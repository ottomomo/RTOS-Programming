
lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003114  0c100000  0c100000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000007cc  0c103114  0c103114  0000b114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  0c1038e0  0c1038e0  0000b8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000008  0c1038e8  0c1038e8  0000b8e8  2**2
                  ALLOC
  4 .debug_abbrev 00000468  00000000  00000000  0000b8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d8f  00000000  00000000  0000bd50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000793  00000000  00000000  0000cadf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_macinfo 0001d2ae  00000000  00000000  0000d272  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000dec  00000000  00000000  0002a520  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000005ea  00000000  00000000  0002b30c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000134  00000000  00000000  0002b8f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000c0  00000000  00000000  0002ba2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000005de  00000000  00000000  0002baea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      0000002a  00000000  00000000  0002c0c8  2**0
                  CONTENTS, READONLY
 14 .ARM.attributes 00000032  00000000  00000000  0002c0f2  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00000d14  00000000  00000000  0002c124  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c100000 <main>:

void isr_keypad( void ) __attribute__ ((interrupt ("IRQ")));
void isr_pb( void ) __attribute__ ((interrupt ("IRQ")));

void main( void )
{
 c100000:	e1a0c00d 	mov	ip, sp
 c100004:	e92dd800 	push	{fp, ip, lr, pc}
 c100008:	e24cb004 	sub	fp, ip, #4

    sys_init();
 c10000c:	eb0002da 	bl	c100b7c <sys_init>
    uart0_init();
 c100010:	eb000838 	bl	c1020f8 <uart0_init>
    keypad_init();
 c100014:	eb0000a2 	bl	c1002a4 <keypad_init>
    pbs_init();
 c100018:	eb0001fd 	bl	c100814 <pbs_init>

    /************************************/

    uart0_puts( "\nDetección de presión:\n" );
 c10001c:	e59f009c 	ldr	r0, [pc, #156]	; c1000c0 <main+0xc0>
 c100020:	eb000877 	bl	c102204 <uart0_puts>

    uart0_puts( "  - Pulse el boton izquierdo\n" );
 c100024:	e59f0098 	ldr	r0, [pc, #152]	; c1000c4 <main+0xc4>
 c100028:	eb000875 	bl	c102204 <uart0_puts>
    pb_wait_keydown( PB_LEFT );
 c10002c:	e3a00040 	mov	r0, #64	; 0x40
 c100030:	eb000215 	bl	c10088c <pb_wait_keydown>

    uart0_puts( "  - Pulse el boton derecho\n" );
 c100034:	e59f008c 	ldr	r0, [pc, #140]	; c1000c8 <main+0xc8>
 c100038:	eb000871 	bl	c102204 <uart0_puts>
    pb_wait_keydown( PB_RIGHT );
 c10003c:	e3a00080 	mov	r0, #128	; 0x80
 c100040:	eb000211 	bl	c10088c <pb_wait_keydown>

    uart0_puts( "  - Pulse alguna tecla\n" );
 c100044:	e59f0080 	ldr	r0, [pc, #128]	; c1000cc <main+0xcc>
 c100048:	eb00086d 	bl	c102204 <uart0_puts>
    keypad_wait_any_keydown( );
 c10004c:	eb000154 	bl	c1005a4 <keypad_wait_any_keydown>

    uart0_puts( "  - Pulse la tecla 7 \n" );
 c100050:	e59f0078 	ldr	r0, [pc, #120]	; c1000d0 <main+0xd0>
 c100054:	eb00086a 	bl	c102204 <uart0_puts>
    keypad_wait_keydown( KEYPAD_KEY7 );
 c100058:	e3a00007 	mov	r0, #7
 c10005c:	eb00011a 	bl	c1004cc <keypad_wait_keydown>

    /************************************/

    uart0_puts( "\nDetección de depresión:\n" );
 c100060:	e59f006c 	ldr	r0, [pc, #108]	; c1000d4 <main+0xd4>
 c100064:	eb000866 	bl	c102204 <uart0_puts>

    uart0_puts( "  - Pulse el boton izquierdo\n" );
 c100068:	e59f0054 	ldr	r0, [pc, #84]	; c1000c4 <main+0xc4>
 c10006c:	eb000864 	bl	c102204 <uart0_puts>
    pb_wait_keyup( PB_LEFT );
 c100070:	e3a00040 	mov	r0, #64	; 0x40
 c100074:	eb000225 	bl	c100910 <pb_wait_keyup>

    uart0_puts( "  - Pulse el boton derecho\n" );
 c100078:	e59f0048 	ldr	r0, [pc, #72]	; c1000c8 <main+0xc8>
 c10007c:	eb000860 	bl	c102204 <uart0_puts>
    pb_wait_keyup( PB_RIGHT );
 c100080:	e3a00080 	mov	r0, #128	; 0x80
 c100084:	eb000221 	bl	c100910 <pb_wait_keyup>

    uart0_puts( "  - Pulse alguna tecla\n" );
 c100088:	e59f003c 	ldr	r0, [pc, #60]	; c1000cc <main+0xcc>
 c10008c:	eb00085c 	bl	c102204 <uart0_puts>
    keypad_wait_any_keyup( );
 c100090:	eb00015f 	bl	c100614 <keypad_wait_any_keyup>

    uart0_puts( "  - Pulse la tecla 7 \n" );
 c100094:	e59f0034 	ldr	r0, [pc, #52]	; c1000d0 <main+0xd0>
 c100098:	eb000859 	bl	c102204 <uart0_puts>
    keypad_wait_keyup( KEYPAD_KEY7 );
 c10009c:	e3a00007 	mov	r0, #7
 c1000a0:	eb00012a 	bl	c100550 <keypad_wait_keyup>

    /************************************/

    uart0_puts( "\nPulse botones y/o teclas del keypad:\n" );
 c1000a4:	e59f002c 	ldr	r0, [pc, #44]	; c1000d8 <main+0xd8>
 c1000a8:	eb000855 	bl	c102204 <uart0_puts>
    keypad_open( isr_keypad );
 c1000ac:	e59f0028 	ldr	r0, [pc, #40]	; c1000dc <main+0xdc>
 c1000b0:	eb0001ac 	bl	c100768 <keypad_open>
    pbs_open( isr_pb );
 c1000b4:	e59f0024 	ldr	r0, [pc, #36]	; c1000e0 <main+0xe0>
 c1000b8:	eb000284 	bl	c100ad0 <pbs_open>

    /************************************/

    while( 1 );
 c1000bc:	eafffffe 	b	c1000bc <main+0xbc>
 c1000c0:	0c103114 	.word	0x0c103114
 c1000c4:	0c10312c 	.word	0x0c10312c
 c1000c8:	0c10314c 	.word	0x0c10314c
 c1000cc:	0c103168 	.word	0x0c103168
 c1000d0:	0c103180 	.word	0x0c103180
 c1000d4:	0c103198 	.word	0x0c103198
 c1000d8:	0c1031b4 	.word	0x0c1031b4
 c1000dc:	0c1000e4 	.word	0x0c1000e4
 c1000e0:	0c1001a0 	.word	0x0c1001a0

0c1000e4 <isr_keypad>:

}

void isr_keypad( void )
{
 c1000e4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1000e8:	e1a0c00d 	mov	ip, sp
 c1000ec:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1000f0:	e24cb004 	sub	fp, ip, #4
 c1000f4:	e24dd008 	sub	sp, sp, #8
    uint8 scancode;
    uint16 time;

    scancode = keypad_getchartime( &time );
 c1000f8:	e24b3020 	sub	r3, fp, #32
 c1000fc:	e1a00003 	mov	r0, r3
 c100100:	eb00016f 	bl	c1006c4 <keypad_getchartime>
 c100104:	e1a03000 	mov	r3, r0
 c100108:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
    switch( scancode )
 c10010c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c100110:	e35300fe 	cmp	r3, #254	; 0xfe
 c100114:	0a000002 	beq	c100124 <isr_keypad+0x40>
 c100118:	e35300ff 	cmp	r3, #255	; 0xff
 c10011c:	0a000003 	beq	c100130 <isr_keypad+0x4c>
 c100120:	ea000005 	b	c10013c <isr_keypad+0x58>
    {
        case KEYPAD_TIMEOUT:
            uart0_puts( "  - KEYPAD TIMEOUT\n" );
 c100124:	e59f005c 	ldr	r0, [pc, #92]	; c100188 <isr_keypad+0xa4>
 c100128:	eb000835 	bl	c102204 <uart0_puts>
            break;
 c10012c:	ea00000e 	b	c10016c <isr_keypad+0x88>
        case KEYPAD_FAILURE:
            uart0_puts( "  - KEYPAD FAILURE\n" );
 c100130:	e59f0054 	ldr	r0, [pc, #84]	; c10018c <isr_keypad+0xa8>
 c100134:	eb000832 	bl	c102204 <uart0_puts>
            break;            
 c100138:	ea00000b 	b	c10016c <isr_keypad+0x88>
        default:
            uart0_puts( "  - Tecla pulsada: 0x" );
 c10013c:	e59f004c 	ldr	r0, [pc, #76]	; c100190 <isr_keypad+0xac>
 c100140:	eb00082f 	bl	c102204 <uart0_puts>
            uart0_puthex( scancode );
 c100144:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c100148:	e1a00003 	mov	r0, r3
 c10014c:	eb000883 	bl	c102360 <uart0_puthex>
            uart0_puts( " durante " );
 c100150:	e59f003c 	ldr	r0, [pc, #60]	; c100194 <isr_keypad+0xb0>
 c100154:	eb00082a 	bl	c102204 <uart0_puts>
            uart0_putint( time );
 c100158:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
 c10015c:	e1a00003 	mov	r0, r3
 c100160:	eb00083b 	bl	c102254 <uart0_putint>
            uart0_puts( " ms \n" );
 c100164:	e59f002c 	ldr	r0, [pc, #44]	; c100198 <isr_keypad+0xb4>
 c100168:	eb000825 	bl	c102204 <uart0_puts>
    }
    I_ISPC = BIT_KEYPAD;
 c10016c:	e59f3028 	ldr	r3, [pc, #40]	; c10019c <isr_keypad+0xb8>
 c100170:	e3a02401 	mov	r2, #16777216	; 0x1000000
 c100174:	e5832000 	str	r2, [r3]
}
 c100178:	e24bd01c 	sub	sp, fp, #28
 c10017c:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c100180:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c100184:	e25ef004 	subs	pc, lr, #4
 c100188:	0c1031dc 	.word	0x0c1031dc
 c10018c:	0c1031f0 	.word	0x0c1031f0
 c100190:	0c103204 	.word	0x0c103204
 c100194:	0c10321c 	.word	0x0c10321c
 c100198:	0c103228 	.word	0x0c103228
 c10019c:	01e00024 	.word	0x01e00024

0c1001a0 <isr_pb>:

void isr_pb( void )
{
 c1001a0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1001a4:	e1a0c00d 	mov	ip, sp
 c1001a8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1001ac:	e24cb004 	sub	fp, ip, #4
 c1001b0:	e24dd008 	sub	sp, sp, #8
    uint8 scancode;
    uint16 time;

    scancode = pb_getchartime( &time );
 c1001b4:	e24b3020 	sub	r3, fp, #32
 c1001b8:	e1a00003 	mov	r0, r3
 c1001bc:	eb00020f 	bl	c100a00 <pb_getchartime>
 c1001c0:	e1a03000 	mov	r3, r0
 c1001c4:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
    switch( scancode )
 c1001c8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c1001cc:	e3530080 	cmp	r3, #128	; 0x80
 c1001d0:	0a00001a 	beq	c100240 <isr_pb+0xa0>
 c1001d4:	e3530080 	cmp	r3, #128	; 0x80
 c1001d8:	ca000002 	bgt	c1001e8 <isr_pb+0x48>
 c1001dc:	e3530040 	cmp	r3, #64	; 0x40
 c1001e0:	0a00000b 	beq	c100214 <isr_pb+0x74>
 c1001e4:	ea000020 	b	c10026c <isr_pb+0xcc>
 c1001e8:	e35300fe 	cmp	r3, #254	; 0xfe
 c1001ec:	0a000002 	beq	c1001fc <isr_pb+0x5c>
 c1001f0:	e35300ff 	cmp	r3, #255	; 0xff
 c1001f4:	0a000003 	beq	c100208 <isr_pb+0x68>
 c1001f8:	ea00001b 	b	c10026c <isr_pb+0xcc>
    {
        case PB_TIMEOUT:
            uart0_puts( "  - PB TIMEOUT\n" );
 c1001fc:	e59f0084 	ldr	r0, [pc, #132]	; c100288 <isr_pb+0xe8>
 c100200:	eb0007ff 	bl	c102204 <uart0_puts>
            break;
 c100204:	ea000018 	b	c10026c <isr_pb+0xcc>
        case PB_FAILURE:
            uart0_puts( "  - PB FAILURE\n" );
 c100208:	e59f007c 	ldr	r0, [pc, #124]	; c10028c <isr_pb+0xec>
 c10020c:	eb0007fc 	bl	c102204 <uart0_puts>
            break;
 c100210:	ea000015 	b	c10026c <isr_pb+0xcc>
        case PB_LEFT:
            uart0_puts( "  - Boton izquierdo pulsado durante " );
 c100214:	e59f0074 	ldr	r0, [pc, #116]	; c100290 <isr_pb+0xf0>
 c100218:	eb0007f9 	bl	c102204 <uart0_puts>
            uart0_putint( time );
 c10021c:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
 c100220:	e1a00003 	mov	r0, r3
 c100224:	eb00080a 	bl	c102254 <uart0_putint>
            uart0_puts( " ms \n" );
 c100228:	e59f0064 	ldr	r0, [pc, #100]	; c100294 <isr_pb+0xf4>
 c10022c:	eb0007f4 	bl	c102204 <uart0_puts>
            EXTINTPND = BIT_LEFTPB;
 c100230:	e59f3060 	ldr	r3, [pc, #96]	; c100298 <isr_pb+0xf8>
 c100234:	e3a02004 	mov	r2, #4
 c100238:	e5832000 	str	r2, [r3]
            break;
 c10023c:	ea00000a 	b	c10026c <isr_pb+0xcc>
        case PB_RIGHT:
            uart0_puts( "  - Boton derecho pulsado durante " );
 c100240:	e59f0054 	ldr	r0, [pc, #84]	; c10029c <isr_pb+0xfc>
 c100244:	eb0007ee 	bl	c102204 <uart0_puts>
            uart0_putint( time );
 c100248:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
 c10024c:	e1a00003 	mov	r0, r3
 c100250:	eb0007ff 	bl	c102254 <uart0_putint>
            uart0_puts( " ms \n" );
 c100254:	e59f0038 	ldr	r0, [pc, #56]	; c100294 <isr_pb+0xf4>
 c100258:	eb0007e9 	bl	c102204 <uart0_puts>
            EXTINTPND = BIT_RIGHTPB;
 c10025c:	e59f3034 	ldr	r3, [pc, #52]	; c100298 <isr_pb+0xf8>
 c100260:	e3a02008 	mov	r2, #8
 c100264:	e5832000 	str	r2, [r3]
            break;
 c100268:	e1a00000 	nop			; (mov r0, r0)
    }
    I_ISPC = BIT_PB;
 c10026c:	e59f302c 	ldr	r3, [pc, #44]	; c1002a0 <isr_pb+0x100>
 c100270:	e3a02602 	mov	r2, #2097152	; 0x200000
 c100274:	e5832000 	str	r2, [r3]
}
 c100278:	e24bd01c 	sub	sp, fp, #28
 c10027c:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c100280:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c100284:	e25ef004 	subs	pc, lr, #4
 c100288:	0c103230 	.word	0x0c103230
 c10028c:	0c103240 	.word	0x0c103240
 c100290:	0c103250 	.word	0x0c103250
 c100294:	0c103228 	.word	0x0c103228
 c100298:	01d20054 	.word	0x01d20054
 c10029c:	0c103278 	.word	0x0c103278
 c1002a0:	01e00024 	.word	0x01e00024

0c1002a4 <keypad_init>:
#include <keypad.h>

extern void isr_KEYPAD_dummy( void );

void keypad_init( void )
{
 c1002a4:	e1a0c00d 	mov	ip, sp
 c1002a8:	e92dd800 	push	{fp, ip, lr, pc}
 c1002ac:	e24cb004 	sub	fp, ip, #4
	EXTINT = (EXTINT & ~(0xf<<4)) | (2<<4);
 c1002b0:	e59f301c 	ldr	r3, [pc, #28]	; c1002d4 <keypad_init+0x30>
 c1002b4:	e59f2018 	ldr	r2, [pc, #24]	; c1002d4 <keypad_init+0x30>
 c1002b8:	e5922000 	ldr	r2, [r2]
 c1002bc:	e3c220f0 	bic	r2, r2, #240	; 0xf0
 c1002c0:	e3822020 	orr	r2, r2, #32
 c1002c4:	e5832000 	str	r2, [r3]
	//keypad_open( keypad_down_isr );

};
 c1002c8:	e24bd00c 	sub	sp, fp, #12
 c1002cc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1002d0:	e12fff1e 	bx	lr
 c1002d4:	01d20050 	.word	0x01d20050

0c1002d8 <keypad_scan>:

//mira que tecla es
uint8 keypad_scan( void )
{
 c1002d8:	e1a0c00d 	mov	ip, sp
 c1002dc:	e92dd800 	push	{fp, ip, lr, pc}
 c1002e0:	e24cb004 	sub	fp, ip, #4
 c1002e4:	e24dd008 	sub	sp, sp, #8
    uint8 aux;

    aux = *( KEYPAD_ADDR + 0x1c );
 c1002e8:	e59f31cc 	ldr	r3, [pc, #460]	; c1004bc <keypad_scan+0x1e4>
 c1002ec:	e5d33000 	ldrb	r3, [r3]
 c1002f0:	e54b300d 	strb	r3, [fp, #-13]
    if( (aux & 0x0f) != 0x0f )
 c1002f4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1002f8:	e203300f 	and	r3, r3, #15
 c1002fc:	e353000f 	cmp	r3, #15
 c100300:	0a000017 	beq	c100364 <keypad_scan+0x8c>
    {
        if( (aux & 0x8) == 0 )
 c100304:	e55b300d 	ldrb	r3, [fp, #-13]
 c100308:	e2033008 	and	r3, r3, #8
 c10030c:	e3530000 	cmp	r3, #0
 c100310:	1a000001 	bne	c10031c <keypad_scan+0x44>
            return KEYPAD_KEY0;
 c100314:	e3a03000 	mov	r3, #0
 c100318:	ea000063 	b	c1004ac <keypad_scan+0x1d4>
        else if( (aux & 0x4) == 0 )
 c10031c:	e55b300d 	ldrb	r3, [fp, #-13]
 c100320:	e2033004 	and	r3, r3, #4
 c100324:	e3530000 	cmp	r3, #0
 c100328:	1a000001 	bne	c100334 <keypad_scan+0x5c>
            return KEYPAD_KEY1;
 c10032c:	e3a03001 	mov	r3, #1
 c100330:	ea00005d 	b	c1004ac <keypad_scan+0x1d4>
        else if( (aux & 0x2) == 0 )
 c100334:	e55b300d 	ldrb	r3, [fp, #-13]
 c100338:	e2033002 	and	r3, r3, #2
 c10033c:	e3530000 	cmp	r3, #0
 c100340:	1a000001 	bne	c10034c <keypad_scan+0x74>
            return KEYPAD_KEY2;
 c100344:	e3a03002 	mov	r3, #2
 c100348:	ea000057 	b	c1004ac <keypad_scan+0x1d4>
        else if( (aux & 0x1) == 0 )
 c10034c:	e55b300d 	ldrb	r3, [fp, #-13]
 c100350:	e2033001 	and	r3, r3, #1
 c100354:	e3530000 	cmp	r3, #0
 c100358:	1a000001 	bne	c100364 <keypad_scan+0x8c>
            return KEYPAD_KEY3;
 c10035c:	e3a03003 	mov	r3, #3
 c100360:	ea000051 	b	c1004ac <keypad_scan+0x1d4>
    }

  	aux = *(KEYPAD_ADDR + 0xFB);
 c100364:	e59f3154 	ldr	r3, [pc, #340]	; c1004c0 <keypad_scan+0x1e8>
 c100368:	e5d33000 	ldrb	r3, [r3]
 c10036c:	e54b300d 	strb	r3, [fp, #-13]
	aux = (aux & 0xF); //nos quitamos la quinta fila y devolvemos un -1 si no hay datos
 c100370:	e55b300d 	ldrb	r3, [fp, #-13]
 c100374:	e203300f 	and	r3, r3, #15
 c100378:	e54b300d 	strb	r3, [fp, #-13]
	switch (aux){
 c10037c:	e55b300d 	ldrb	r3, [fp, #-13]
 c100380:	e2433007 	sub	r3, r3, #7
 c100384:	e3530007 	cmp	r3, #7
 c100388:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c10038c:	ea00000f 	b	c1003d0 <keypad_scan+0xf8>
 c100390:	0c1003b0 	.word	0x0c1003b0
 c100394:	0c1003d0 	.word	0x0c1003d0
 c100398:	0c1003d0 	.word	0x0c1003d0
 c10039c:	0c1003d0 	.word	0x0c1003d0
 c1003a0:	0c1003b8 	.word	0x0c1003b8
 c1003a4:	0c1003d0 	.word	0x0c1003d0
 c1003a8:	0c1003c0 	.word	0x0c1003c0
 c1003ac:	0c1003c8 	.word	0x0c1003c8
	case 7: return KEYPAD_KEY4;
 c1003b0:	e3a03004 	mov	r3, #4
 c1003b4:	ea00003c 	b	c1004ac <keypad_scan+0x1d4>
			break;
	case 11:return KEYPAD_KEY5;
 c1003b8:	e3a03005 	mov	r3, #5
 c1003bc:	ea00003a 	b	c1004ac <keypad_scan+0x1d4>
			break;
	case 13:return KEYPAD_KEY6;
 c1003c0:	e3a03006 	mov	r3, #6
 c1003c4:	ea000038 	b	c1004ac <keypad_scan+0x1d4>
			break;
	case 14:return KEYPAD_KEY7;
 c1003c8:	e3a03007 	mov	r3, #7
 c1003cc:	ea000036 	b	c1004ac <keypad_scan+0x1d4>
			break;
	}

	aux = *(KEYPAD_ADDR + 0xF7);
 c1003d0:	e59f30ec 	ldr	r3, [pc, #236]	; c1004c4 <keypad_scan+0x1ec>
 c1003d4:	e5d33000 	ldrb	r3, [r3]
 c1003d8:	e54b300d 	strb	r3, [fp, #-13]
	aux = (aux & 0xF); //nos quitamos la quinta fila y devolvemos un -1 si no hay datos
 c1003dc:	e55b300d 	ldrb	r3, [fp, #-13]
 c1003e0:	e203300f 	and	r3, r3, #15
 c1003e4:	e54b300d 	strb	r3, [fp, #-13]
	switch (aux){
 c1003e8:	e55b300d 	ldrb	r3, [fp, #-13]
 c1003ec:	e2433007 	sub	r3, r3, #7
 c1003f0:	e3530007 	cmp	r3, #7
 c1003f4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c1003f8:	ea00000f 	b	c10043c <keypad_scan+0x164>
 c1003fc:	0c10041c 	.word	0x0c10041c
 c100400:	0c10043c 	.word	0x0c10043c
 c100404:	0c10043c 	.word	0x0c10043c
 c100408:	0c10043c 	.word	0x0c10043c
 c10040c:	0c100424 	.word	0x0c100424
 c100410:	0c10043c 	.word	0x0c10043c
 c100414:	0c10042c 	.word	0x0c10042c
 c100418:	0c100434 	.word	0x0c100434
	case 7:return KEYPAD_KEY8;
 c10041c:	e3a03008 	mov	r3, #8
 c100420:	ea000021 	b	c1004ac <keypad_scan+0x1d4>
			break;
	case 11:return KEYPAD_KEY9;
 c100424:	e3a03009 	mov	r3, #9
 c100428:	ea00001f 	b	c1004ac <keypad_scan+0x1d4>
			break;
	case 13:return KEYPAD_KEYA;
 c10042c:	e3a0300a 	mov	r3, #10
 c100430:	ea00001d 	b	c1004ac <keypad_scan+0x1d4>
			break;
	case 14:return KEYPAD_KEYB;
 c100434:	e3a0300b 	mov	r3, #11
 c100438:	ea00001b 	b	c1004ac <keypad_scan+0x1d4>
			break;
	}

	aux = *(KEYPAD_ADDR + 0xEF);
 c10043c:	e59f3084 	ldr	r3, [pc, #132]	; c1004c8 <keypad_scan+0x1f0>
 c100440:	e5d33000 	ldrb	r3, [r3]
 c100444:	e54b300d 	strb	r3, [fp, #-13]
	aux = (aux & 0xF); //nos quitamos la quinta fila y devolvemos un -1 si no hay datos
 c100448:	e55b300d 	ldrb	r3, [fp, #-13]
 c10044c:	e203300f 	and	r3, r3, #15
 c100450:	e54b300d 	strb	r3, [fp, #-13]
	switch (aux){
 c100454:	e55b300d 	ldrb	r3, [fp, #-13]
 c100458:	e2433007 	sub	r3, r3, #7
 c10045c:	e3530007 	cmp	r3, #7
 c100460:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c100464:	ea00000f 	b	c1004a8 <keypad_scan+0x1d0>
 c100468:	0c100488 	.word	0x0c100488
 c10046c:	0c1004a8 	.word	0x0c1004a8
 c100470:	0c1004a8 	.word	0x0c1004a8
 c100474:	0c1004a8 	.word	0x0c1004a8
 c100478:	0c100490 	.word	0x0c100490
 c10047c:	0c1004a8 	.word	0x0c1004a8
 c100480:	0c100498 	.word	0x0c100498
 c100484:	0c1004a0 	.word	0x0c1004a0
	case 7:return KEYPAD_KEYC;
 c100488:	e3a0300c 	mov	r3, #12
 c10048c:	ea000006 	b	c1004ac <keypad_scan+0x1d4>
			break;
	case 11:return KEYPAD_KEYD;
 c100490:	e3a0300d 	mov	r3, #13
 c100494:	ea000004 	b	c1004ac <keypad_scan+0x1d4>
			break;
	case 13:return KEYPAD_KEYE;
 c100498:	e3a0300e 	mov	r3, #14
 c10049c:	ea000002 	b	c1004ac <keypad_scan+0x1d4>
			break;
	case 14:return KEYPAD_KEYF;
 c1004a0:	e3a0300f 	mov	r3, #15
 c1004a4:	ea000000 	b	c1004ac <keypad_scan+0x1d4>
			break;
	}

    return KEYPAD_FAILURE;
 c1004a8:	e3a030ff 	mov	r3, #255	; 0xff
}
 c1004ac:	e1a00003 	mov	r0, r3
 c1004b0:	e24bd00c 	sub	sp, fp, #12
 c1004b4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1004b8:	e12fff1e 	bx	lr
 c1004bc:	0600001c 	.word	0x0600001c
 c1004c0:	060000fb 	.word	0x060000fb
 c1004c4:	060000f7 	.word	0x060000f7
 c1004c8:	060000ef 	.word	0x060000ef

0c1004cc <keypad_wait_keydown>:
{

}
*/
void keypad_wait_keydown( uint8 scancode )
{
 c1004cc:	e1a0c00d 	mov	ip, sp
 c1004d0:	e92dd800 	push	{fp, ip, lr, pc}
 c1004d4:	e24cb004 	sub	fp, ip, #4
 c1004d8:	e24dd008 	sub	sp, sp, #8
 c1004dc:	e1a03000 	mov	r3, r0
 c1004e0:	e54b300d 	strb	r3, [fp, #-13]
     while( 1 )
     {
	  while(keypad_scan()!=scancode);
 c1004e4:	e1a00000 	nop			; (mov r0, r0)
 c1004e8:	ebffff7a 	bl	c1002d8 <keypad_scan>
 c1004ec:	e1a03000 	mov	r3, r0
 c1004f0:	e55b200d 	ldrb	r2, [fp, #-13]
 c1004f4:	e1520003 	cmp	r2, r3
 c1004f8:	1afffffa 	bne	c1004e8 <keypad_wait_keydown+0x1c>
        sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c1004fc:	e3a0001e 	mov	r0, #30
 c100500:	eb000523 	bl	c101994 <sw_delay_ms>
        if ( scancode == keypad_scan() )
 c100504:	ebffff73 	bl	c1002d8 <keypad_scan>
 c100508:	e1a03000 	mov	r3, r0
 c10050c:	e55b200d 	ldrb	r2, [fp, #-13]
 c100510:	e1520003 	cmp	r2, r3
 c100514:	0a000009 	beq	c100540 <keypad_wait_keydown+0x74>
            return;
	  while(!(PDATG & (1<<1)));
 c100518:	e1a00000 	nop			; (mov r0, r0)
 c10051c:	e59f3028 	ldr	r3, [pc, #40]	; c10054c <keypad_wait_keydown+0x80>
 c100520:	e5933000 	ldr	r3, [r3]
 c100524:	e2033002 	and	r3, r3, #2
 c100528:	e3530000 	cmp	r3, #0
 c10052c:	0afffffa 	beq	c10051c <keypad_wait_keydown+0x50>
        sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c100530:	e3a00064 	mov	r0, #100	; 0x64
 c100534:	eb000516 	bl	c101994 <sw_delay_ms>
    }
 c100538:	e1a00000 	nop			; (mov r0, r0)
*/
void keypad_wait_keydown( uint8 scancode )
{
     while( 1 )
     {
	  while(keypad_scan()!=scancode);
 c10053c:	eaffffe9 	b	c1004e8 <keypad_wait_keydown+0x1c>
        if ( scancode == keypad_scan() )
            return;
	  while(!(PDATG & (1<<1)));
        sw_delay_ms( KEYPAD_KEYUP_DELAY );
    }
}
 c100540:	e24bd00c 	sub	sp, fp, #12
 c100544:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100548:	e12fff1e 	bx	lr
 c10054c:	01d20044 	.word	0x01d20044

0c100550 <keypad_wait_keyup>:

void keypad_wait_keyup( uint8 scancode )
{
 c100550:	e1a0c00d 	mov	ip, sp
 c100554:	e92dd800 	push	{fp, ip, lr, pc}
 c100558:	e24cb004 	sub	fp, ip, #4
 c10055c:	e24dd008 	sub	sp, sp, #8
 c100560:	e1a03000 	mov	r3, r0
 c100564:	e54b300d 	strb	r3, [fp, #-13]
	keypad_wait_keydown(scancode);
 c100568:	e55b300d 	ldrb	r3, [fp, #-13]
 c10056c:	e1a00003 	mov	r0, r3
 c100570:	ebffffd5 	bl	c1004cc <keypad_wait_keydown>
	while(!(PDATG & (1<<1)));		//mientras sea =0 es decir ESTE PULSADA!!!!!!
 c100574:	e1a00000 	nop			; (mov r0, r0)
 c100578:	e59f3020 	ldr	r3, [pc, #32]	; c1005a0 <keypad_wait_keyup+0x50>
 c10057c:	e5933000 	ldr	r3, [r3]
 c100580:	e2033002 	and	r3, r3, #2
 c100584:	e3530000 	cmp	r3, #0
 c100588:	0afffffa 	beq	c100578 <keypad_wait_keyup+0x28>
	sw_delay_ms(KEYPAD_KEYUP_DELAY);
 c10058c:	e3a00064 	mov	r0, #100	; 0x64
 c100590:	eb0004ff 	bl	c101994 <sw_delay_ms>
}
 c100594:	e24bd00c 	sub	sp, fp, #12
 c100598:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10059c:	e12fff1e 	bx	lr
 c1005a0:	01d20044 	.word	0x01d20044

0c1005a4 <keypad_wait_any_keydown>:

void keypad_wait_any_keydown( void )
{
 c1005a4:	e1a0c00d 	mov	ip, sp
 c1005a8:	e92dd800 	push	{fp, ip, lr, pc}
 c1005ac:	e24cb004 	sub	fp, ip, #4
	while(1)
	{
		while(keypad_scan()==KEYPAD_FAILURE);
 c1005b0:	e1a00000 	nop			; (mov r0, r0)
 c1005b4:	ebffff47 	bl	c1002d8 <keypad_scan>
 c1005b8:	e1a03000 	mov	r3, r0
 c1005bc:	e35300ff 	cmp	r3, #255	; 0xff
 c1005c0:	0afffffb 	beq	c1005b4 <keypad_wait_any_keydown+0x10>
		sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c1005c4:	e3a0001e 	mov	r0, #30
 c1005c8:	eb0004f1 	bl	c101994 <sw_delay_ms>
		if( keypad_scan()!=KEYPAD_FAILURE )
 c1005cc:	ebffff41 	bl	c1002d8 <keypad_scan>
 c1005d0:	e1a03000 	mov	r3, r0
 c1005d4:	e35300ff 	cmp	r3, #255	; 0xff
 c1005d8:	1a000009 	bne	c100604 <keypad_wait_any_keydown+0x60>
			return;
		while( !(PDATG & (1<<1)) );
 c1005dc:	e1a00000 	nop			; (mov r0, r0)
 c1005e0:	e59f3028 	ldr	r3, [pc, #40]	; c100610 <keypad_wait_any_keydown+0x6c>
 c1005e4:	e5933000 	ldr	r3, [r3]
 c1005e8:	e2033002 	and	r3, r3, #2
 c1005ec:	e3530000 	cmp	r3, #0
 c1005f0:	0afffffa 	beq	c1005e0 <keypad_wait_any_keydown+0x3c>
		sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c1005f4:	e3a00064 	mov	r0, #100	; 0x64
 c1005f8:	eb0004e5 	bl	c101994 <sw_delay_ms>
	}
 c1005fc:	e1a00000 	nop			; (mov r0, r0)

void keypad_wait_any_keydown( void )
{
	while(1)
	{
		while(keypad_scan()==KEYPAD_FAILURE);
 c100600:	eaffffeb 	b	c1005b4 <keypad_wait_any_keydown+0x10>
		if( keypad_scan()!=KEYPAD_FAILURE )
			return;
		while( !(PDATG & (1<<1)) );
		sw_delay_ms( KEYPAD_KEYUP_DELAY );
	}
}
 c100604:	e24bd00c 	sub	sp, fp, #12
 c100608:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10060c:	e12fff1e 	bx	lr
 c100610:	01d20044 	.word	0x01d20044

0c100614 <keypad_wait_any_keyup>:

void keypad_wait_any_keyup( void )
{
 c100614:	e1a0c00d 	mov	ip, sp
 c100618:	e92dd800 	push	{fp, ip, lr, pc}
 c10061c:	e24cb004 	sub	fp, ip, #4
	keypad_wait_any_keydown();
 c100620:	ebffffdf 	bl	c1005a4 <keypad_wait_any_keydown>
	while(!(PDATG & (1<<1)));		//mientras sea =0 es decir ESTE PULSADA!!!!!!
 c100624:	e1a00000 	nop			; (mov r0, r0)
 c100628:	e59f3020 	ldr	r3, [pc, #32]	; c100650 <keypad_wait_any_keyup+0x3c>
 c10062c:	e5933000 	ldr	r3, [r3]
 c100630:	e2033002 	and	r3, r3, #2
 c100634:	e3530000 	cmp	r3, #0
 c100638:	0afffffa 	beq	c100628 <keypad_wait_any_keyup+0x14>
	sw_delay_ms(KEYPAD_KEYUP_DELAY);
 c10063c:	e3a00064 	mov	r0, #100	; 0x64
 c100640:	eb0004d3 	bl	c101994 <sw_delay_ms>
}
 c100644:	e24bd00c 	sub	sp, fp, #12
 c100648:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10064c:	e12fff1e 	bx	lr
 c100650:	01d20044 	.word	0x01d20044

0c100654 <keypad_getchar>:

/*
** Espera la presión y depresión de una tecla del keypad y devuelve su scancode
*/
uint8 keypad_getchar( void )
{
 c100654:	e1a0c00d 	mov	ip, sp
 c100658:	e92dd800 	push	{fp, ip, lr, pc}
 c10065c:	e24cb004 	sub	fp, ip, #4
 c100660:	e24dd008 	sub	sp, sp, #8
	uint8 scancode;
	while(keypad_scan()==KEYPAD_FAILURE);	//espera la presion de una tecla
 c100664:	e1a00000 	nop			; (mov r0, r0)
 c100668:	ebffff1a 	bl	c1002d8 <keypad_scan>
 c10066c:	e1a03000 	mov	r3, r0
 c100670:	e35300ff 	cmp	r3, #255	; 0xff
 c100674:	0afffffb 	beq	c100668 <keypad_getchar+0x14>
	sw_delay_ms( KEYPAD_KEYDOWN_DELAY );	//espera SW, fin de rebotes
 c100678:	e3a0001e 	mov	r0, #30
 c10067c:	eb0004c4 	bl	c101994 <sw_delay_ms>
	scancode= keypad_scan();				// lee tecla
 c100680:	ebffff14 	bl	c1002d8 <keypad_scan>
 c100684:	e1a03000 	mov	r3, r0
 c100688:	e54b300d 	strb	r3, [fp, #-13]
	while(!(PDATG & (1<<1)));				//mientras sea =0 es decir ESTE PULSADA!!!!!!
 c10068c:	e1a00000 	nop			; (mov r0, r0)
 c100690:	e59f3028 	ldr	r3, [pc, #40]	; c1006c0 <keypad_getchar+0x6c>
 c100694:	e5933000 	ldr	r3, [r3]
 c100698:	e2033002 	and	r3, r3, #2
 c10069c:	e3530000 	cmp	r3, #0
 c1006a0:	0afffffa 	beq	c100690 <keypad_getchar+0x3c>
	sw_delay_ms( KEYPAD_KEYUP_DELAY );		//espera SW, fin de rebotes
 c1006a4:	e3a00064 	mov	r0, #100	; 0x64
 c1006a8:	eb0004b9 	bl	c101994 <sw_delay_ms>
	return scancode;
 c1006ac:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c1006b0:	e1a00003 	mov	r0, r3
 c1006b4:	e24bd00c 	sub	sp, fp, #12
 c1006b8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1006bc:	e12fff1e 	bx	lr
 c1006c0:	01d20044 	.word	0x01d20044

0c1006c4 <keypad_getchartime>:

/*
** Espera la presión y depresión de una tecla del keypad y devuelve su scancode y el intervalo en ms que ha estado pulsada (max. 6553ms)
*/
uint8 keypad_getchartime( uint16 *ms )
{
 c1006c4:	e1a0c00d 	mov	ip, sp
 c1006c8:	e92dd800 	push	{fp, ip, lr, pc}
 c1006cc:	e24cb004 	sub	fp, ip, #4
 c1006d0:	e24dd010 	sub	sp, sp, #16
 c1006d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	uint8 scancode;
	while(keypad_scan()==KEYPAD_FAILURE);	//espera la presion de una tecla
 c1006d8:	e1a00000 	nop			; (mov r0, r0)
 c1006dc:	ebfffefd 	bl	c1002d8 <keypad_scan>
 c1006e0:	e1a03000 	mov	r3, r0
 c1006e4:	e35300ff 	cmp	r3, #255	; 0xff
 c1006e8:	0afffffb 	beq	c1006dc <keypad_getchartime+0x18>
	timer3_start();							// aranca timer 3
 c1006ec:	eb00050f 	bl	c101b30 <timer3_start>
	sw_delay_ms( KEYPAD_KEYDOWN_DELAY );	//espera SW, fin de rebotes
 c1006f0:	e3a0001e 	mov	r0, #30
 c1006f4:	eb0004a6 	bl	c101994 <sw_delay_ms>
	scancode= keypad_scan();				// lee tecla
 c1006f8:	ebfffef6 	bl	c1002d8 <keypad_scan>
 c1006fc:	e1a03000 	mov	r3, r0
 c100700:	e54b300d 	strb	r3, [fp, #-13]
	while(!(PDATG & (1<<1)));				//mientras sea =0 es decir ESTE PULSADA!!!!!!
 c100704:	e1a00000 	nop			; (mov r0, r0)
 c100708:	e59f3050 	ldr	r3, [pc, #80]	; c100760 <keypad_getchartime+0x9c>
 c10070c:	e5933000 	ldr	r3, [r3]
 c100710:	e2033002 	and	r3, r3, #2
 c100714:	e3530000 	cmp	r3, #0
 c100718:	0afffffa 	beq	c100708 <keypad_getchartime+0x44>
	*ms = timer3_stop() / 10;				// detiene timer 3, calcula los ms
 c10071c:	eb00052f 	bl	c101be0 <timer3_stop>
 c100720:	e1a03000 	mov	r3, r0
 c100724:	e1a02003 	mov	r2, r3
 c100728:	e59f3034 	ldr	r3, [pc, #52]	; c100764 <keypad_getchartime+0xa0>
 c10072c:	e0831392 	umull	r1, r3, r2, r3
 c100730:	e1a031a3 	lsr	r3, r3, #3
 c100734:	e1a03803 	lsl	r3, r3, #16
 c100738:	e1a02823 	lsr	r2, r3, #16
 c10073c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100740:	e1c320b0 	strh	r2, [r3]
	sw_delay_ms( KEYPAD_KEYUP_DELAY );		//espera SW, fin de rebotes
 c100744:	e3a00064 	mov	r0, #100	; 0x64
 c100748:	eb000491 	bl	c101994 <sw_delay_ms>
	return scancode;
 c10074c:	e55b300d 	ldrb	r3, [fp, #-13]

}
 c100750:	e1a00003 	mov	r0, r3
 c100754:	e24bd00c 	sub	sp, fp, #12
 c100758:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10075c:	e12fff1e 	bx	lr
 c100760:	01d20044 	.word	0x01d20044
 c100764:	cccccccd 	.word	0xcccccccd

0c100768 <keypad_open>:
{
    ...
}
*/
void keypad_open( void (*isr)(void) )
{
 c100768:	e1a0c00d 	mov	ip, sp
 c10076c:	e92dd800 	push	{fp, ip, lr, pc}
 c100770:	e24cb004 	sub	fp, ip, #4
 c100774:	e24dd008 	sub	sp, sp, #8
 c100778:	e50b0010 	str	r0, [fp, #-16]
	pISR_KEYPAD= ((uint32)isr);
 c10077c:	e59f303c 	ldr	r3, [pc, #60]	; c1007c0 <keypad_open+0x58>
 c100780:	e51b2010 	ldr	r2, [fp, #-16]
 c100784:	e5832000 	str	r2, [r3]
		EXTINTPND = ~0;
 c100788:	e59f3034 	ldr	r3, [pc, #52]	; c1007c4 <keypad_open+0x5c>
 c10078c:	e3e02000 	mvn	r2, #0
 c100790:	e5832000 	str	r2, [r3]
		I_ISPC = BIT_KEYPAD;
 c100794:	e59f302c 	ldr	r3, [pc, #44]	; c1007c8 <keypad_open+0x60>
 c100798:	e3a02401 	mov	r2, #16777216	; 0x1000000
 c10079c:	e5832000 	str	r2, [r3]
		INTMSK &= ~(BIT_GLOBAL | BIT_KEYPAD);
 c1007a0:	e59f3024 	ldr	r3, [pc, #36]	; c1007cc <keypad_open+0x64>
 c1007a4:	e59f2020 	ldr	r2, [pc, #32]	; c1007cc <keypad_open+0x64>
 c1007a8:	e5922000 	ldr	r2, [r2]
 c1007ac:	e3c22405 	bic	r2, r2, #83886080	; 0x5000000
 c1007b0:	e5832000 	str	r2, [r3]
}
 c1007b4:	e24bd00c 	sub	sp, fp, #12
 c1007b8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1007bc:	e12fff1e 	bx	lr
 c1007c0:	0c7fff80 	.word	0x0c7fff80
 c1007c4:	01d20054 	.word	0x01d20054
 c1007c8:	01e00024 	.word	0x01e00024
 c1007cc:	01e0000c 	.word	0x01e0000c

0c1007d0 <keypad_close>:

void keypad_close( void )
{
 c1007d0:	e1a0c00d 	mov	ip, sp
 c1007d4:	e92dd800 	push	{fp, ip, lr, pc}
 c1007d8:	e24cb004 	sub	fp, ip, #4
	INTMSK |= (BIT_KEYPAD);
 c1007dc:	e59f3024 	ldr	r3, [pc, #36]	; c100808 <keypad_close+0x38>
 c1007e0:	e59f2020 	ldr	r2, [pc, #32]	; c100808 <keypad_close+0x38>
 c1007e4:	e5922000 	ldr	r2, [r2]
 c1007e8:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
 c1007ec:	e5832000 	str	r2, [r3]
		pISR_KEYPAD= (uint32)isr_KEYPAD_dummy;
 c1007f0:	e59f3014 	ldr	r3, [pc, #20]	; c10080c <keypad_close+0x3c>
 c1007f4:	e59f2014 	ldr	r2, [pc, #20]	; c100810 <keypad_close+0x40>
 c1007f8:	e5832000 	str	r2, [r3]
}
 c1007fc:	e24bd00c 	sub	sp, fp, #12
 c100800:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100804:	e12fff1e 	bx	lr
 c100808:	01e0000c 	.word	0x01e0000c
 c10080c:	0c7fff80 	.word	0x0c7fff80
 c100810:	0c1012d8 	.word	0x0c1012d8

0c100814 <pbs_init>:
#include <timers.h>

extern void isr_PB_dummy( void );

void pbs_init( void )
{
 c100814:	e1a0c00d 	mov	ip, sp
 c100818:	e92dd800 	push	{fp, ip, lr, pc}
 c10081c:	e24cb004 	sub	fp, ip, #4
    timers_init();
 c100820:	eb0003b3 	bl	c1016f4 <timers_init>
}
 c100824:	e24bd00c 	sub	sp, fp, #12
 c100828:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10082c:	e12fff1e 	bx	lr

0c100830 <pb_scan>:

uint8 pb_scan( void ) //lee secuencialmente los pulsadores para determinar el código a devolver
{
 c100830:	e1a0c00d 	mov	ip, sp
 c100834:	e92dd800 	push	{fp, ip, lr, pc}
 c100838:	e24cb004 	sub	fp, ip, #4
	if( !(PDATG & (1<<6)))
 c10083c:	e59f3044 	ldr	r3, [pc, #68]	; c100888 <pb_scan+0x58>
 c100840:	e5933000 	ldr	r3, [r3]
 c100844:	e2033040 	and	r3, r3, #64	; 0x40
 c100848:	e3530000 	cmp	r3, #0
 c10084c:	1a000001 	bne	c100858 <pb_scan+0x28>
		return PB_LEFT;
 c100850:	e3a03040 	mov	r3, #64	; 0x40
 c100854:	ea000007 	b	c100878 <pb_scan+0x48>
	else if( !(PDATG & (1 << 7)) )
 c100858:	e59f3028 	ldr	r3, [pc, #40]	; c100888 <pb_scan+0x58>
 c10085c:	e5933000 	ldr	r3, [r3]
 c100860:	e2033080 	and	r3, r3, #128	; 0x80
 c100864:	e3530000 	cmp	r3, #0
 c100868:	1a000001 	bne	c100874 <pb_scan+0x44>
		return PB_RIGHT;
 c10086c:	e3a03080 	mov	r3, #128	; 0x80
 c100870:	ea000000 	b	c100878 <pb_scan+0x48>
	else
		return PB_FAILURE; //si ninguno esta pulsado devuelve fallo
 c100874:	e3a030ff 	mov	r3, #255	; 0xff
}
 c100878:	e1a00003 	mov	r0, r3
 c10087c:	e24bd00c 	sub	sp, fp, #12
 c100880:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100884:	e12fff1e 	bx	lr
 c100888:	01d20044 	.word	0x01d20044

0c10088c <pb_wait_keydown>:
//    ...
//}

//**
void pb_wait_keydown( uint8 scancode )
{
 c10088c:	e1a0c00d 	mov	ip, sp
 c100890:	e92dd800 	push	{fp, ip, lr, pc}
 c100894:	e24cb004 	sub	fp, ip, #4
 c100898:	e24dd008 	sub	sp, sp, #8
 c10089c:	e1a03000 	mov	r3, r0
 c1008a0:	e54b300d 	strb	r3, [fp, #-13]
	 while( 1 )
	     {
		  while(pb_scan()!=scancode);
 c1008a4:	e1a00000 	nop			; (mov r0, r0)
 c1008a8:	ebffffe0 	bl	c100830 <pb_scan>
 c1008ac:	e1a03000 	mov	r3, r0
 c1008b0:	e55b200d 	ldrb	r2, [fp, #-13]
 c1008b4:	e1520003 	cmp	r2, r3
 c1008b8:	1afffffa 	bne	c1008a8 <pb_wait_keydown+0x1c>
	        sw_delay_ms( PB_KEYDOWN_DELAY );
 c1008bc:	e3a0001e 	mov	r0, #30
 c1008c0:	eb000433 	bl	c101994 <sw_delay_ms>
	        if ( scancode == pb_scan() )
 c1008c4:	ebffffd9 	bl	c100830 <pb_scan>
 c1008c8:	e1a03000 	mov	r3, r0
 c1008cc:	e55b200d 	ldrb	r2, [fp, #-13]
 c1008d0:	e1520003 	cmp	r2, r3
 c1008d4:	0a000009 	beq	c100900 <pb_wait_keydown+0x74>
	            return;
		  while(!(PDATG & (1<<1)));
 c1008d8:	e1a00000 	nop			; (mov r0, r0)
 c1008dc:	e59f3028 	ldr	r3, [pc, #40]	; c10090c <pb_wait_keydown+0x80>
 c1008e0:	e5933000 	ldr	r3, [r3]
 c1008e4:	e2033002 	and	r3, r3, #2
 c1008e8:	e3530000 	cmp	r3, #0
 c1008ec:	0afffffa 	beq	c1008dc <pb_wait_keydown+0x50>
	        sw_delay_ms( PB_KEYUP_DELAY );
 c1008f0:	e3a00064 	mov	r0, #100	; 0x64
 c1008f4:	eb000426 	bl	c101994 <sw_delay_ms>
	    }
 c1008f8:	e1a00000 	nop			; (mov r0, r0)
//**
void pb_wait_keydown( uint8 scancode )
{
	 while( 1 )
	     {
		  while(pb_scan()!=scancode);
 c1008fc:	eaffffe9 	b	c1008a8 <pb_wait_keydown+0x1c>
	        if ( scancode == pb_scan() )
	            return;
		  while(!(PDATG & (1<<1)));
	        sw_delay_ms( PB_KEYUP_DELAY );
	    }
}
 c100900:	e24bd00c 	sub	sp, fp, #12
 c100904:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100908:	e12fff1e 	bx	lr
 c10090c:	01d20044 	.word	0x01d20044

0c100910 <pb_wait_keyup>:

//**
void pb_wait_keyup( uint8 scancode )
{
 c100910:	e1a0c00d 	mov	ip, sp
 c100914:	e92dd800 	push	{fp, ip, lr, pc}
 c100918:	e24cb004 	sub	fp, ip, #4
 c10091c:	e24dd008 	sub	sp, sp, #8
 c100920:	e1a03000 	mov	r3, r0
 c100924:	e54b300d 	strb	r3, [fp, #-13]
	pb_wait_keydown(scancode);
 c100928:	e55b300d 	ldrb	r3, [fp, #-13]
 c10092c:	e1a00003 	mov	r0, r3
 c100930:	ebffffd5 	bl	c10088c <pb_wait_keydown>
	while(!(PDATG & (1<<1)));		//mientras sea =0 es decir ESTE PULSADA!!!!!!
 c100934:	e1a00000 	nop			; (mov r0, r0)
 c100938:	e59f3020 	ldr	r3, [pc, #32]	; c100960 <pb_wait_keyup+0x50>
 c10093c:	e5933000 	ldr	r3, [r3]
 c100940:	e2033002 	and	r3, r3, #2
 c100944:	e3530000 	cmp	r3, #0
 c100948:	0afffffa 	beq	c100938 <pb_wait_keyup+0x28>
	sw_delay_ms(PB_KEYUP_DELAY);
 c10094c:	e3a00064 	mov	r0, #100	; 0x64
 c100950:	eb00040f 	bl	c101994 <sw_delay_ms>
}
 c100954:	e24bd00c 	sub	sp, fp, #12
 c100958:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10095c:	e12fff1e 	bx	lr
 c100960:	01d20044 	.word	0x01d20044

0c100964 <pb_getchar>:

/*
** Espera la presión y depresión de un pulsador y devuelve su scancode
*/
uint8 pb_getchar( void )
{
 c100964:	e1a0c00d 	mov	ip, sp
 c100968:	e92dd800 	push	{fp, ip, lr, pc}
 c10096c:	e24cb004 	sub	fp, ip, #4
 c100970:	e24dd008 	sub	sp, sp, #8
	uint8 scancode;
	 while( (PDATG & (1<<6)) != 0 && (PDATG & (1 << 7)) != 0 ); //espera la presion de cualquier pulsador
 c100974:	e1a00000 	nop			; (mov r0, r0)
 c100978:	e59f307c 	ldr	r3, [pc, #124]	; c1009fc <pb_getchar+0x98>
 c10097c:	e5933000 	ldr	r3, [r3]
 c100980:	e2033040 	and	r3, r3, #64	; 0x40
 c100984:	e3530000 	cmp	r3, #0
 c100988:	0a000004 	beq	c1009a0 <pb_getchar+0x3c>
 c10098c:	e59f3068 	ldr	r3, [pc, #104]	; c1009fc <pb_getchar+0x98>
 c100990:	e5933000 	ldr	r3, [r3]
 c100994:	e2033080 	and	r3, r3, #128	; 0x80
 c100998:	e3530000 	cmp	r3, #0
 c10099c:	1afffff5 	bne	c100978 <pb_getchar+0x14>
	 sw_delay_ms( PB_KEYDOWN_DELAY ); //espera SW, fin de rebotes
 c1009a0:	e3a0001e 	mov	r0, #30
 c1009a4:	eb0003fa 	bl	c101994 <sw_delay_ms>
	 scancode = pb_scan(); //obtiene el codigo del pulsador presionado
 c1009a8:	ebffffa0 	bl	c100830 <pb_scan>
 c1009ac:	e1a03000 	mov	r3, r0
 c1009b0:	e54b300d 	strb	r3, [fp, #-13]
	 while(!(PDATG & (1<<6)) || !(PDATG & (1 << 7)) ); //espera la depresion del pulsador
 c1009b4:	e1a00000 	nop			; (mov r0, r0)
 c1009b8:	e59f303c 	ldr	r3, [pc, #60]	; c1009fc <pb_getchar+0x98>
 c1009bc:	e5933000 	ldr	r3, [r3]
 c1009c0:	e2033040 	and	r3, r3, #64	; 0x40
 c1009c4:	e3530000 	cmp	r3, #0
 c1009c8:	0afffffa 	beq	c1009b8 <pb_getchar+0x54>
 c1009cc:	e59f3028 	ldr	r3, [pc, #40]	; c1009fc <pb_getchar+0x98>
 c1009d0:	e5933000 	ldr	r3, [r3]
 c1009d4:	e2033080 	and	r3, r3, #128	; 0x80
 c1009d8:	e3530000 	cmp	r3, #0
 c1009dc:	0afffff5 	beq	c1009b8 <pb_getchar+0x54>
	 sw_delay_ms( PB_KEYUP_DELAY ); //espera SW, fin de rebotes
 c1009e0:	e3a00064 	mov	r0, #100	; 0x64
 c1009e4:	eb0003ea 	bl	c101994 <sw_delay_ms>
	return scancode;
 c1009e8:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c1009ec:	e1a00003 	mov	r0, r3
 c1009f0:	e24bd00c 	sub	sp, fp, #12
 c1009f4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1009f8:	e12fff1e 	bx	lr
 c1009fc:	01d20044 	.word	0x01d20044

0c100a00 <pb_getchartime>:

/*
** Espera la presión y depresión de un pulsador y devuelve su scancode y el intervalo en ms que ha estado pulsado (max. 6553ms)
*/
uint8 pb_getchartime( uint16 *ms )
{
 c100a00:	e1a0c00d 	mov	ip, sp
 c100a04:	e92dd800 	push	{fp, ip, lr, pc}
 c100a08:	e24cb004 	sub	fp, ip, #4
 c100a0c:	e24dd010 	sub	sp, sp, #16
 c100a10:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    uint8 scancode;

    while( (PDATG & (1<<6)) != 0 && (PDATG & (1 << 7)) != 0 ); //espera la presion de cualquier pulsador
 c100a14:	e1a00000 	nop			; (mov r0, r0)
 c100a18:	e59f30a8 	ldr	r3, [pc, #168]	; c100ac8 <pb_getchartime+0xc8>
 c100a1c:	e5933000 	ldr	r3, [r3]
 c100a20:	e2033040 	and	r3, r3, #64	; 0x40
 c100a24:	e3530000 	cmp	r3, #0
 c100a28:	0a000004 	beq	c100a40 <pb_getchartime+0x40>
 c100a2c:	e59f3094 	ldr	r3, [pc, #148]	; c100ac8 <pb_getchartime+0xc8>
 c100a30:	e5933000 	ldr	r3, [r3]
 c100a34:	e2033080 	and	r3, r3, #128	; 0x80
 c100a38:	e3530000 	cmp	r3, #0
 c100a3c:	1afffff5 	bne	c100a18 <pb_getchartime+0x18>
    timer3_start(); //arranca el timer 3
 c100a40:	eb00043a 	bl	c101b30 <timer3_start>
    sw_delay_ms( PB_KEYDOWN_DELAY ); //espera SW(el timer 3 está ocupado) fin de rebotes
 c100a44:	e3a0001e 	mov	r0, #30
 c100a48:	eb0003d1 	bl	c101994 <sw_delay_ms>

    scancode = pb_scan(); //obtiene el codigo del pulsador presionado
 c100a4c:	ebffff77 	bl	c100830 <pb_scan>
 c100a50:	e1a03000 	mov	r3, r0
 c100a54:	e54b300d 	strb	r3, [fp, #-13]

    while(!(PDATG & (1<<6)) || !(PDATG & (1 << 7)) ); //espera la depresion del pulsador
 c100a58:	e1a00000 	nop			; (mov r0, r0)
 c100a5c:	e59f3064 	ldr	r3, [pc, #100]	; c100ac8 <pb_getchartime+0xc8>
 c100a60:	e5933000 	ldr	r3, [r3]
 c100a64:	e2033040 	and	r3, r3, #64	; 0x40
 c100a68:	e3530000 	cmp	r3, #0
 c100a6c:	0afffffa 	beq	c100a5c <pb_getchartime+0x5c>
 c100a70:	e59f3050 	ldr	r3, [pc, #80]	; c100ac8 <pb_getchartime+0xc8>
 c100a74:	e5933000 	ldr	r3, [r3]
 c100a78:	e2033080 	and	r3, r3, #128	; 0x80
 c100a7c:	e3530000 	cmp	r3, #0
 c100a80:	0afffff5 	beq	c100a5c <pb_getchartime+0x5c>
    *ms = timer3_stop() / 10; //detiene el timer 3 y calcula los ms
 c100a84:	eb000455 	bl	c101be0 <timer3_stop>
 c100a88:	e1a03000 	mov	r3, r0
 c100a8c:	e1a02003 	mov	r2, r3
 c100a90:	e59f3034 	ldr	r3, [pc, #52]	; c100acc <pb_getchartime+0xcc>
 c100a94:	e0831392 	umull	r1, r3, r2, r3
 c100a98:	e1a031a3 	lsr	r3, r3, #3
 c100a9c:	e1a03803 	lsl	r3, r3, #16
 c100aa0:	e1a02823 	lsr	r2, r3, #16
 c100aa4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100aa8:	e1c320b0 	strh	r2, [r3]
    sw_delay_ms( PB_KEYUP_DELAY ); //espera SW(el timer 3 está ocupado) fin de rebotes
 c100aac:	e3a00064 	mov	r0, #100	; 0x64
 c100ab0:	eb0003b7 	bl	c101994 <sw_delay_ms>

    return scancode; //devuelve el código del pulsador presionado
 c100ab4:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c100ab8:	e1a00003 	mov	r0, r3
 c100abc:	e24bd00c 	sub	sp, fp, #12
 c100ac0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100ac4:	e12fff1e 	bx	lr
 c100ac8:	01d20044 	.word	0x01d20044
 c100acc:	cccccccd 	.word	0xcccccccd

0c100ad0 <pbs_open>:
//{
//    ...
//}

void pbs_open( void (*isr)(void) )
{
 c100ad0:	e1a0c00d 	mov	ip, sp
 c100ad4:	e92dd800 	push	{fp, ip, lr, pc}
 c100ad8:	e24cb004 	sub	fp, ip, #4
 c100adc:	e24dd008 	sub	sp, sp, #8
 c100ae0:	e50b0010 	str	r0, [fp, #-16]
	pISR_PB = (uint32)isr;
 c100ae4:	e59f303c 	ldr	r3, [pc, #60]	; c100b28 <pbs_open+0x58>
 c100ae8:	e51b2010 	ldr	r2, [fp, #-16]
 c100aec:	e5832000 	str	r2, [r3]
	EXTINTPND = ~0;
 c100af0:	e59f3034 	ldr	r3, [pc, #52]	; c100b2c <pbs_open+0x5c>
 c100af4:	e3e02000 	mvn	r2, #0
 c100af8:	e5832000 	str	r2, [r3]
	I_ISPC = BIT_EINT4567;
 c100afc:	e59f302c 	ldr	r3, [pc, #44]	; c100b30 <pbs_open+0x60>
 c100b00:	e3a02602 	mov	r2, #2097152	; 0x200000
 c100b04:	e5832000 	str	r2, [r3]
	INTMSK &= ~(BIT_GLOBAL | BIT_EINT4567);
 c100b08:	e59f3024 	ldr	r3, [pc, #36]	; c100b34 <pbs_open+0x64>
 c100b0c:	e59f2020 	ldr	r2, [pc, #32]	; c100b34 <pbs_open+0x64>
 c100b10:	e5922000 	ldr	r2, [r2]
 c100b14:	e3c22642 	bic	r2, r2, #69206016	; 0x4200000
 c100b18:	e5832000 	str	r2, [r3]
}
 c100b1c:	e24bd00c 	sub	sp, fp, #12
 c100b20:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100b24:	e12fff1e 	bx	lr
 c100b28:	0c7fff74 	.word	0x0c7fff74
 c100b2c:	01d20054 	.word	0x01d20054
 c100b30:	01e00024 	.word	0x01e00024
 c100b34:	01e0000c 	.word	0x01e0000c

0c100b38 <pbs_close>:

void pbs_close( void )
{
 c100b38:	e1a0c00d 	mov	ip, sp
 c100b3c:	e92dd800 	push	{fp, ip, lr, pc}
 c100b40:	e24cb004 	sub	fp, ip, #4
	INTMSK |= (BIT_GLOBAL | BIT_EINT4567);
 c100b44:	e59f3024 	ldr	r3, [pc, #36]	; c100b70 <pbs_close+0x38>
 c100b48:	e59f2020 	ldr	r2, [pc, #32]	; c100b70 <pbs_close+0x38>
 c100b4c:	e5922000 	ldr	r2, [r2]
 c100b50:	e3822642 	orr	r2, r2, #69206016	; 0x4200000
 c100b54:	e5832000 	str	r2, [r3]
	pISR_PB = (uint32)isr_PB_dummy;
 c100b58:	e59f3014 	ldr	r3, [pc, #20]	; c100b74 <pbs_close+0x3c>
 c100b5c:	e59f2014 	ldr	r2, [pc, #20]	; c100b78 <pbs_close+0x40>
 c100b60:	e5832000 	str	r2, [r3]
}
 c100b64:	e24bd00c 	sub	sp, fp, #12
 c100b68:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100b6c:	e12fff1e 	bx	lr
 c100b70:	01e0000c 	.word	0x01e0000c
 c100b74:	0c7fff74 	.word	0x0c7fff74
 c100b78:	0c101648 	.word	0x0c101648

0c100b7c <sys_init>:
void isr_PB_dummy(void) __attribute__ ((interrupt ("IRQ")));
void isr_ETHERNET_dummy(void) __attribute__ ((interrupt ("IRQ")));
void isr_TICK_dummy(void) __attribute__ ((interrupt ("IRQ")));
void isr_RESET_dummy(void) __attribute__ ((interrupt ("IRQ")));

void sys_init(void) {
 c100b7c:	e1a0c00d 	mov	ip, sp
 c100b80:	e92dd800 	push	{fp, ip, lr, pc}
 c100b84:	e24cb004 	sub	fp, ip, #4
	WTCON = 0;
 c100b88:	e59f30ec 	ldr	r3, [pc, #236]	; c100c7c <sys_init+0x100>
 c100b8c:	e3a02000 	mov	r2, #0
 c100b90:	e5832000 	str	r2, [r3]
	INTMSK = ~0;
 c100b94:	e59f30e4 	ldr	r3, [pc, #228]	; c100c80 <sys_init+0x104>
 c100b98:	e3e02000 	mvn	r2, #0
 c100b9c:	e5832000 	str	r2, [r3]

	LOCKTIME = 0xFFF;
 c100ba0:	e59f30dc 	ldr	r3, [pc, #220]	; c100c84 <sys_init+0x108>
 c100ba4:	e59f20dc 	ldr	r2, [pc, #220]	; c100c88 <sys_init+0x10c>
 c100ba8:	e5832000 	str	r2, [r3]
	PLLCON = 0x38021;
 c100bac:	e3a03776 	mov	r3, #30932992	; 0x1d80000
 c100bb0:	e59f20d4 	ldr	r2, [pc, #212]	; c100c8c <sys_init+0x110>
 c100bb4:	e5832000 	str	r2, [r3]
	CLKSLOW = 0x8;
 c100bb8:	e59f30d0 	ldr	r3, [pc, #208]	; c100c90 <sys_init+0x114>
 c100bbc:	e3a02008 	mov	r2, #8
 c100bc0:	e5832000 	str	r2, [r3]
	CLKCON = 0x7FF8;
 c100bc4:	e59f30c8 	ldr	r3, [pc, #200]	; c100c94 <sys_init+0x118>
 c100bc8:	e59f20c8 	ldr	r2, [pc, #200]	; c100c98 <sys_init+0x11c>
 c100bcc:	e5832000 	str	r2, [r3]

	SBUSCON = 0x8000001B;
 c100bd0:	e3a03771 	mov	r3, #29622272	; 0x1c40000
 c100bd4:	e3a0216e 	mov	r2, #-2147483621	; 0x8000001b
 c100bd8:	e5832000 	str	r2, [r3]

	SYSCFG = 0x0;
 c100bdc:	e3a03507 	mov	r3, #29360128	; 0x1c00000
 c100be0:	e3a02000 	mov	r2, #0
 c100be4:	e5832000 	str	r2, [r3]

	I_PMST = 0x1F1B;
 c100be8:	e59f30ac 	ldr	r3, [pc, #172]	; c100c9c <sys_init+0x120>
 c100bec:	e59f20ac 	ldr	r2, [pc, #172]	; c100ca0 <sys_init+0x124>
 c100bf0:	e5832000 	str	r2, [r3]
	I_PSLV = 0x1B1B1B1B;
 c100bf4:	e59f30a8 	ldr	r3, [pc, #168]	; c100ca4 <sys_init+0x128>
 c100bf8:	e59f20a8 	ldr	r2, [pc, #168]	; c100ca8 <sys_init+0x12c>
 c100bfc:	e5832000 	str	r2, [r3]
	INTMOD = 0x0;
 c100c00:	e59f30a4 	ldr	r3, [pc, #164]	; c100cac <sys_init+0x130>
 c100c04:	e3a02000 	mov	r2, #0
 c100c08:	e5832000 	str	r2, [r3]

	install_dummy_isr();// Instala RTI por defecto a todas los tipos de interrupción
 c100c0c:	eb00008d 	bl	c100e48 <install_dummy_isr>

	EXTINTPND = 0xf0;
 c100c10:	e59f3098 	ldr	r3, [pc, #152]	; c100cb0 <sys_init+0x134>
 c100c14:	e3a020f0 	mov	r2, #240	; 0xf0
 c100c18:	e5832000 	str	r2, [r3]
	I_ISPC = 0xffff;
 c100c1c:	e59f3090 	ldr	r3, [pc, #144]	; c100cb4 <sys_init+0x138>
 c100c20:	e59f2090 	ldr	r2, [pc, #144]	; c100cb8 <sys_init+0x13c>
 c100c24:	e5832000 	str	r2, [r3]
	INTCON = 0x1;
 c100c28:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c100c2c:	e3a02001 	mov	r2, #1
 c100c30:	e5832000 	str	r2, [r3]

	SET_OPMODE(SVCMODE); // Pone el procesador en modo SVC
 c100c34:	e10f0000 	mrs	r0, CPSR
 c100c38:	e3c0001f 	bic	r0, r0, #31
 c100c3c:	e3800013 	orr	r0, r0, #19
 c100c40:	e121f000 	msr	CPSR_c, r0
	SET_IRQFLAG(0);// Habilita en el procesador las interrupciones IRQ
 c100c44:	e10f0000 	mrs	r0, CPSR
 c100c48:	e3c00080 	bic	r0, r0, #128	; 0x80
 c100c4c:	e3800000 	orr	r0, r0, #0
 c100c50:	e121f000 	msr	CPSR_c, r0
	SET_FIQFLAG(1);// Deshabilita en el procesador las interrupciones FIQ
 c100c54:	e10f0000 	mrs	r0, CPSR
 c100c58:	e3c00040 	bic	r0, r0, #64	; 0x40
 c100c5c:	e3800040 	orr	r0, r0, #64	; 0x40
 c100c60:	e121f000 	msr	CPSR_c, r0

	port_init();
 c100c64:	eb000014 	bl	c100cbc <port_init>
	uart0_init();
 c100c68:	eb000522 	bl	c1020f8 <uart0_init>

	show_sys_info();
 c100c6c:	eb00028b 	bl	c1016a0 <show_sys_info>
}
 c100c70:	e24bd00c 	sub	sp, fp, #12
 c100c74:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100c78:	e12fff1e 	bx	lr
 c100c7c:	01d30000 	.word	0x01d30000
 c100c80:	01e0000c 	.word	0x01e0000c
 c100c84:	01d8000c 	.word	0x01d8000c
 c100c88:	00000fff 	.word	0x00000fff
 c100c8c:	00038021 	.word	0x00038021
 c100c90:	01d80008 	.word	0x01d80008
 c100c94:	01d80004 	.word	0x01d80004
 c100c98:	00007ff8 	.word	0x00007ff8
 c100c9c:	01e00014 	.word	0x01e00014
 c100ca0:	00001f1b 	.word	0x00001f1b
 c100ca4:	01e00010 	.word	0x01e00010
 c100ca8:	1b1b1b1b 	.word	0x1b1b1b1b
 c100cac:	01e00008 	.word	0x01e00008
 c100cb0:	01d20054 	.word	0x01d20054
 c100cb4:	01e00024 	.word	0x01e00024
 c100cb8:	0000ffff 	.word	0x0000ffff

0c100cbc <port_init>:

static void port_init(void) {
 c100cbc:	e1a0c00d 	mov	ip, sp
 c100cc0:	e92dd800 	push	{fp, ip, lr, pc}
 c100cc4:	e24cb004 	sub	fp, ip, #4
	PDATA = ~0;
 c100cc8:	e59f3100 	ldr	r3, [pc, #256]	; c100dd0 <port_init+0x114>
 c100ccc:	e3e02000 	mvn	r2, #0
 c100cd0:	e5832000 	str	r2, [r3]
	PCONA = 0xFE;
 c100cd4:	e59f30f8 	ldr	r3, [pc, #248]	; c100dd4 <port_init+0x118>
 c100cd8:	e3a020fe 	mov	r2, #254	; 0xfe
 c100cdc:	e5832000 	str	r2, [r3]

	PDATB = ~0;
 c100ce0:	e59f30f0 	ldr	r3, [pc, #240]	; c100dd8 <port_init+0x11c>
 c100ce4:	e3e02000 	mvn	r2, #0
 c100ce8:	e5832000 	str	r2, [r3]
	PCONB = 0x14F;
 c100cec:	e59f30e8 	ldr	r3, [pc, #232]	; c100ddc <port_init+0x120>
 c100cf0:	e59f20e8 	ldr	r2, [pc, #232]	; c100de0 <port_init+0x124>
 c100cf4:	e5832000 	str	r2, [r3]

	PDATC = ~0;
 c100cf8:	e59f30e4 	ldr	r3, [pc, #228]	; c100de4 <port_init+0x128>
 c100cfc:	e3e02000 	mvn	r2, #0
 c100d00:	e5832000 	str	r2, [r3]
	PCONC = 0x5FF555FF;
 c100d04:	e59f30dc 	ldr	r3, [pc, #220]	; c100de8 <port_init+0x12c>
 c100d08:	e59f20dc 	ldr	r2, [pc, #220]	; c100dec <port_init+0x130>
 c100d0c:	e5832000 	str	r2, [r3]
	PUPC = 0x94FB;
 c100d10:	e59f30d8 	ldr	r3, [pc, #216]	; c100df0 <port_init+0x134>
 c100d14:	e59f20d8 	ldr	r2, [pc, #216]	; c100df4 <port_init+0x138>
 c100d18:	e5832000 	str	r2, [r3]

	PDATD = ~0;
 c100d1c:	e59f30d4 	ldr	r3, [pc, #212]	; c100df8 <port_init+0x13c>
 c100d20:	e3e02000 	mvn	r2, #0
 c100d24:	e5832000 	str	r2, [r3]
	PCOND = 0xAAAA;
 c100d28:	e59f30cc 	ldr	r3, [pc, #204]	; c100dfc <port_init+0x140>
 c100d2c:	e59f20cc 	ldr	r2, [pc, #204]	; c100e00 <port_init+0x144>
 c100d30:	e5832000 	str	r2, [r3]
	PUPD = 0xFF;
 c100d34:	e59f30c8 	ldr	r3, [pc, #200]	; c100e04 <port_init+0x148>
 c100d38:	e3a020ff 	mov	r2, #255	; 0xff
 c100d3c:	e5832000 	str	r2, [r3]

	PDATE = ~0;
 c100d40:	e59f30c0 	ldr	r3, [pc, #192]	; c100e08 <port_init+0x14c>
 c100d44:	e3e02000 	mvn	r2, #0
 c100d48:	e5832000 	str	r2, [r3]
	PCONE = 0x255A9;
 c100d4c:	e59f30b8 	ldr	r3, [pc, #184]	; c100e0c <port_init+0x150>
 c100d50:	e59f20b8 	ldr	r2, [pc, #184]	; c100e10 <port_init+0x154>
 c100d54:	e5832000 	str	r2, [r3]
	PUPE = 0x1FB;
 c100d58:	e59f30b4 	ldr	r3, [pc, #180]	; c100e14 <port_init+0x158>
 c100d5c:	e59f20b4 	ldr	r2, [pc, #180]	; c100e18 <port_init+0x15c>
 c100d60:	e5832000 	str	r2, [r3]

	PDATF = ~0;
 c100d64:	e59f30b0 	ldr	r3, [pc, #176]	; c100e1c <port_init+0x160>
 c100d68:	e3e02000 	mvn	r2, #0
 c100d6c:	e5832000 	str	r2, [r3]
	PCONF = 0x251A;
 c100d70:	e59f30a8 	ldr	r3, [pc, #168]	; c100e20 <port_init+0x164>
 c100d74:	e59f20a8 	ldr	r2, [pc, #168]	; c100e24 <port_init+0x168>
 c100d78:	e5832000 	str	r2, [r3]
	PUPF = 0x74;
 c100d7c:	e59f30a4 	ldr	r3, [pc, #164]	; c100e28 <port_init+0x16c>
 c100d80:	e3a02074 	mov	r2, #116	; 0x74
 c100d84:	e5832000 	str	r2, [r3]

	PDATG = ~0;
 c100d88:	e59f309c 	ldr	r3, [pc, #156]	; c100e2c <port_init+0x170>
 c100d8c:	e3e02000 	mvn	r2, #0
 c100d90:	e5832000 	str	r2, [r3]
	PCONG = 0xF5FF;
 c100d94:	e59f3094 	ldr	r3, [pc, #148]	; c100e30 <port_init+0x174>
 c100d98:	e59f2094 	ldr	r2, [pc, #148]	; c100e34 <port_init+0x178>
 c100d9c:	e5832000 	str	r2, [r3]
	PUPG = 0x30;
 c100da0:	e59f3090 	ldr	r3, [pc, #144]	; c100e38 <port_init+0x17c>
 c100da4:	e3a02030 	mov	r2, #48	; 0x30
 c100da8:	e5832000 	str	r2, [r3]

	SPUCR = 0x7;
 c100dac:	e59f3088 	ldr	r3, [pc, #136]	; c100e3c <port_init+0x180>
 c100db0:	e3a02007 	mov	r2, #7
 c100db4:	e5832000 	str	r2, [r3]

	EXTINT = 0x22000220;
 c100db8:	e59f3080 	ldr	r3, [pc, #128]	; c100e40 <port_init+0x184>
 c100dbc:	e59f2080 	ldr	r2, [pc, #128]	; c100e44 <port_init+0x188>
 c100dc0:	e5832000 	str	r2, [r3]
}
 c100dc4:	e24bd00c 	sub	sp, fp, #12
 c100dc8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100dcc:	e12fff1e 	bx	lr
 c100dd0:	01d20004 	.word	0x01d20004
 c100dd4:	01d20000 	.word	0x01d20000
 c100dd8:	01d2000c 	.word	0x01d2000c
 c100ddc:	01d20008 	.word	0x01d20008
 c100de0:	0000014f 	.word	0x0000014f
 c100de4:	01d20014 	.word	0x01d20014
 c100de8:	01d20010 	.word	0x01d20010
 c100dec:	5ff555ff 	.word	0x5ff555ff
 c100df0:	01d20018 	.word	0x01d20018
 c100df4:	000094fb 	.word	0x000094fb
 c100df8:	01d20020 	.word	0x01d20020
 c100dfc:	01d2001c 	.word	0x01d2001c
 c100e00:	0000aaaa 	.word	0x0000aaaa
 c100e04:	01d20024 	.word	0x01d20024
 c100e08:	01d2002c 	.word	0x01d2002c
 c100e0c:	01d20028 	.word	0x01d20028
 c100e10:	000255a9 	.word	0x000255a9
 c100e14:	01d20030 	.word	0x01d20030
 c100e18:	000001fb 	.word	0x000001fb
 c100e1c:	01d20038 	.word	0x01d20038
 c100e20:	01d20034 	.word	0x01d20034
 c100e24:	0000251a 	.word	0x0000251a
 c100e28:	01d2003c 	.word	0x01d2003c
 c100e2c:	01d20044 	.word	0x01d20044
 c100e30:	01d20040 	.word	0x01d20040
 c100e34:	0000f5ff 	.word	0x0000f5ff
 c100e38:	01d20048 	.word	0x01d20048
 c100e3c:	01d2004c 	.word	0x01d2004c
 c100e40:	01d20050 	.word	0x01d20050
 c100e44:	22000220 	.word	0x22000220

0c100e48 <install_dummy_isr>:

static void install_dummy_isr(void) {
 c100e48:	e1a0c00d 	mov	ip, sp
 c100e4c:	e92dd800 	push	{fp, ip, lr, pc}
 c100e50:	e24cb004 	sub	fp, ip, #4

	pISR_RESET = (uint32) isr_RESET_dummy;
 c100e54:	e59f3190 	ldr	r3, [pc, #400]	; c100fec <install_dummy_isr+0x1a4>
 c100e58:	e59f2190 	ldr	r2, [pc, #400]	; c100ff0 <install_dummy_isr+0x1a8>
 c100e5c:	e5832000 	str	r2, [r3]
	pISR_UNDEF = (uint32) isr_UNDEF_dummy;
 c100e60:	e59f318c 	ldr	r3, [pc, #396]	; c100ff4 <install_dummy_isr+0x1ac>
 c100e64:	e59f218c 	ldr	r2, [pc, #396]	; c100ff8 <install_dummy_isr+0x1b0>
 c100e68:	e5832000 	str	r2, [r3]
	pISR_SWI = (uint32) isr_SWI_dummy;
 c100e6c:	e59f3188 	ldr	r3, [pc, #392]	; c100ffc <install_dummy_isr+0x1b4>
 c100e70:	e59f2188 	ldr	r2, [pc, #392]	; c101000 <install_dummy_isr+0x1b8>
 c100e74:	e5832000 	str	r2, [r3]
	pISR_PABORT = (uint32) isr_PABORT_dummy;
 c100e78:	e59f3184 	ldr	r3, [pc, #388]	; c101004 <install_dummy_isr+0x1bc>
 c100e7c:	e59f2184 	ldr	r2, [pc, #388]	; c101008 <install_dummy_isr+0x1c0>
 c100e80:	e5832000 	str	r2, [r3]
	pISR_DABORT = (uint32) isr_DABORT_dummy;
 c100e84:	e59f3180 	ldr	r3, [pc, #384]	; c10100c <install_dummy_isr+0x1c4>
 c100e88:	e59f2180 	ldr	r2, [pc, #384]	; c101010 <install_dummy_isr+0x1c8>
 c100e8c:	e5832000 	str	r2, [r3]
	/* Reservado */
	pISR_IRQ = (uint32) isr_IRQ_dummy;
 c100e90:	e59f317c 	ldr	r3, [pc, #380]	; c101014 <install_dummy_isr+0x1cc>
 c100e94:	e59f217c 	ldr	r2, [pc, #380]	; c101018 <install_dummy_isr+0x1d0>
 c100e98:	e5832000 	str	r2, [r3]
	pISR_FIQ = (uint32) isr_FIQ_dummy;
 c100e9c:	e59f3178 	ldr	r3, [pc, #376]	; c10101c <install_dummy_isr+0x1d4>
 c100ea0:	e59f2178 	ldr	r2, [pc, #376]	; c101020 <install_dummy_isr+0x1d8>
 c100ea4:	e5832000 	str	r2, [r3]
	pISR_ADC = (uint32) isr_ADC_dummy;
 c100ea8:	e59f3174 	ldr	r3, [pc, #372]	; c101024 <install_dummy_isr+0x1dc>
 c100eac:	e59f2174 	ldr	r2, [pc, #372]	; c101028 <install_dummy_isr+0x1e0>
 c100eb0:	e5832000 	str	r2, [r3]
	pISR_RTC = (uint32) isr_RTC_dummy;
 c100eb4:	e59f3170 	ldr	r3, [pc, #368]	; c10102c <install_dummy_isr+0x1e4>
 c100eb8:	e59f2170 	ldr	r2, [pc, #368]	; c101030 <install_dummy_isr+0x1e8>
 c100ebc:	e5832000 	str	r2, [r3]
	pISR_UTXD1 = (uint32) isr_UTXD1_dummy;
 c100ec0:	e59f316c 	ldr	r3, [pc, #364]	; c101034 <install_dummy_isr+0x1ec>
 c100ec4:	e59f216c 	ldr	r2, [pc, #364]	; c101038 <install_dummy_isr+0x1f0>
 c100ec8:	e5832000 	str	r2, [r3]
	pISR_UTXD0 = (uint32) isr_UTXD0_dummy;
 c100ecc:	e59f3168 	ldr	r3, [pc, #360]	; c10103c <install_dummy_isr+0x1f4>
 c100ed0:	e59f2168 	ldr	r2, [pc, #360]	; c101040 <install_dummy_isr+0x1f8>
 c100ed4:	e5832000 	str	r2, [r3]
	pISR_SIO = (uint32) isr_SIO_dummy;
 c100ed8:	e59f3164 	ldr	r3, [pc, #356]	; c101044 <install_dummy_isr+0x1fc>
 c100edc:	e59f2164 	ldr	r2, [pc, #356]	; c101048 <install_dummy_isr+0x200>
 c100ee0:	e5832000 	str	r2, [r3]
	pISR_IIC = (uint32) isr_IIC_dummy;
 c100ee4:	e59f3160 	ldr	r3, [pc, #352]	; c10104c <install_dummy_isr+0x204>
 c100ee8:	e59f2160 	ldr	r2, [pc, #352]	; c101050 <install_dummy_isr+0x208>
 c100eec:	e5832000 	str	r2, [r3]
	pISR_URXD1 = (uint32) isr_URXD1_dummy;
 c100ef0:	e59f315c 	ldr	r3, [pc, #348]	; c101054 <install_dummy_isr+0x20c>
 c100ef4:	e59f215c 	ldr	r2, [pc, #348]	; c101058 <install_dummy_isr+0x210>
 c100ef8:	e5832000 	str	r2, [r3]
	pISR_URXD0 = (uint32) isr_URXD0_dummy;
 c100efc:	e59f3158 	ldr	r3, [pc, #344]	; c10105c <install_dummy_isr+0x214>
 c100f00:	e59f2158 	ldr	r2, [pc, #344]	; c101060 <install_dummy_isr+0x218>
 c100f04:	e5832000 	str	r2, [r3]
	pISR_TIMER5 = (uint32) isr_TIMER5_dummy;
 c100f08:	e59f3154 	ldr	r3, [pc, #340]	; c101064 <install_dummy_isr+0x21c>
 c100f0c:	e59f2154 	ldr	r2, [pc, #340]	; c101068 <install_dummy_isr+0x220>
 c100f10:	e5832000 	str	r2, [r3]
	pISR_TIMER4 = (uint32) isr_TIMER4_dummy;
 c100f14:	e59f3150 	ldr	r3, [pc, #336]	; c10106c <install_dummy_isr+0x224>
 c100f18:	e59f2150 	ldr	r2, [pc, #336]	; c101070 <install_dummy_isr+0x228>
 c100f1c:	e5832000 	str	r2, [r3]
	pISR_TIMER3 = (uint32) isr_TIMER3_dummy;
 c100f20:	e59f314c 	ldr	r3, [pc, #332]	; c101074 <install_dummy_isr+0x22c>
 c100f24:	e59f214c 	ldr	r2, [pc, #332]	; c101078 <install_dummy_isr+0x230>
 c100f28:	e5832000 	str	r2, [r3]
	pISR_TIMER2 = (uint32) isr_TIMER2_dummy;
 c100f2c:	e59f3148 	ldr	r3, [pc, #328]	; c10107c <install_dummy_isr+0x234>
 c100f30:	e59f2148 	ldr	r2, [pc, #328]	; c101080 <install_dummy_isr+0x238>
 c100f34:	e5832000 	str	r2, [r3]
	pISR_TIMER1 = (uint32) isr_TIMER1_dummy;
 c100f38:	e59f3144 	ldr	r3, [pc, #324]	; c101084 <install_dummy_isr+0x23c>
 c100f3c:	e59f2144 	ldr	r2, [pc, #324]	; c101088 <install_dummy_isr+0x240>
 c100f40:	e5832000 	str	r2, [r3]
	pISR_TIMER0 = (uint32) isr_TIMER0_dummy;
 c100f44:	e59f3140 	ldr	r3, [pc, #320]	; c10108c <install_dummy_isr+0x244>
 c100f48:	e59f2140 	ldr	r2, [pc, #320]	; c101090 <install_dummy_isr+0x248>
 c100f4c:	e5832000 	str	r2, [r3]
	pISR_UERR01 = (uint32) isr_UERR01_dummy;
 c100f50:	e59f313c 	ldr	r3, [pc, #316]	; c101094 <install_dummy_isr+0x24c>
 c100f54:	e59f213c 	ldr	r2, [pc, #316]	; c101098 <install_dummy_isr+0x250>
 c100f58:	e5832000 	str	r2, [r3]
	pISR_WDT = (uint32) isr_WDT_dummy;
 c100f5c:	e59f3138 	ldr	r3, [pc, #312]	; c10109c <install_dummy_isr+0x254>
 c100f60:	e59f2138 	ldr	r2, [pc, #312]	; c1010a0 <install_dummy_isr+0x258>
 c100f64:	e5832000 	str	r2, [r3]
	pISR_BDMA1 = (uint32) isr_BDMA1_dummy;
 c100f68:	e59f3134 	ldr	r3, [pc, #308]	; c1010a4 <install_dummy_isr+0x25c>
 c100f6c:	e59f2134 	ldr	r2, [pc, #308]	; c1010a8 <install_dummy_isr+0x260>
 c100f70:	e5832000 	str	r2, [r3]
	pISR_BDMA0 = (uint32) isr_BDMA0_dummy;
 c100f74:	e59f3130 	ldr	r3, [pc, #304]	; c1010ac <install_dummy_isr+0x264>
 c100f78:	e59f2130 	ldr	r2, [pc, #304]	; c1010b0 <install_dummy_isr+0x268>
 c100f7c:	e5832000 	str	r2, [r3]
	pISR_ZDMA1 = (uint32) isr_ZDMA1_dummy;
 c100f80:	e59f312c 	ldr	r3, [pc, #300]	; c1010b4 <install_dummy_isr+0x26c>
 c100f84:	e59f212c 	ldr	r2, [pc, #300]	; c1010b8 <install_dummy_isr+0x270>
 c100f88:	e5832000 	str	r2, [r3]
	pISR_ZDMA0 = (uint32) isr_ZDMA0_dummy;
 c100f8c:	e59f3128 	ldr	r3, [pc, #296]	; c1010bc <install_dummy_isr+0x274>
 c100f90:	e59f2128 	ldr	r2, [pc, #296]	; c1010c0 <install_dummy_isr+0x278>
 c100f94:	e5832000 	str	r2, [r3]
	pISR_PB = (uint32) isr_PB_dummy;
 c100f98:	e59f3124 	ldr	r3, [pc, #292]	; c1010c4 <install_dummy_isr+0x27c>
 c100f9c:	e59f2124 	ldr	r2, [pc, #292]	; c1010c8 <install_dummy_isr+0x280>
 c100fa0:	e5832000 	str	r2, [r3]
	pISR_ETHERNET = (uint32) isr_ETHERNET_dummy;
 c100fa4:	e59f3120 	ldr	r3, [pc, #288]	; c1010cc <install_dummy_isr+0x284>
 c100fa8:	e59f2120 	ldr	r2, [pc, #288]	; c1010d0 <install_dummy_isr+0x288>
 c100fac:	e5832000 	str	r2, [r3]
	pISR_TS = (uint32) isr_TS_dummy;  // EINT2
 c100fb0:	e59f311c 	ldr	r3, [pc, #284]	; c1010d4 <install_dummy_isr+0x28c>
 c100fb4:	e59f211c 	ldr	r2, [pc, #284]	; c1010d8 <install_dummy_isr+0x290>
 c100fb8:	e5832000 	str	r2, [r3]
	pISR_KEYPAD = (uint32) isr_KEYPAD_dummy; // EINT1
 c100fbc:	e59f3118 	ldr	r3, [pc, #280]	; c1010dc <install_dummy_isr+0x294>
 c100fc0:	e59f2118 	ldr	r2, [pc, #280]	; c1010e0 <install_dummy_isr+0x298>
 c100fc4:	e5832000 	str	r2, [r3]
	pISR_USB = (uint32) isr_USB_dummy;
 c100fc8:	e59f3114 	ldr	r3, [pc, #276]	; c1010e4 <install_dummy_isr+0x29c>
 c100fcc:	e59f2114 	ldr	r2, [pc, #276]	; c1010e8 <install_dummy_isr+0x2a0>
 c100fd0:	e5832000 	str	r2, [r3]
	pISR_TICK = (uint32) isr_TICK_dummy;
 c100fd4:	e59f3110 	ldr	r3, [pc, #272]	; c1010ec <install_dummy_isr+0x2a4>
 c100fd8:	e59f2110 	ldr	r2, [pc, #272]	; c1010f0 <install_dummy_isr+0x2a8>
 c100fdc:	e5832000 	str	r2, [r3]

}
 c100fe0:	e24bd00c 	sub	sp, fp, #12
 c100fe4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100fe8:	e12fff1e 	bx	lr
 c100fec:	0c7fff00 	.word	0x0c7fff00
 c100ff0:	0c1010f4 	.word	0x0c1010f4
 c100ff4:	0c7fff04 	.word	0x0c7fff04
 c100ff8:	0c1011d0 	.word	0x0c1011d0
 c100ffc:	0c7fff08 	.word	0x0c7fff08
 c101000:	0c1011fc 	.word	0x0c1011fc
 c101004:	0c7fff0c 	.word	0x0c7fff0c
 c101008:	0c10114c 	.word	0x0c10114c
 c10100c:	0c7fff10 	.word	0x0c7fff10
 c101010:	0c101120 	.word	0x0c101120
 c101014:	0c7fff18 	.word	0x0c7fff18
 c101018:	0c1011a4 	.word	0x0c1011a4
 c10101c:	0c7fff1c 	.word	0x0c7fff1c
 c101020:	0c101178 	.word	0x0c101178
 c101024:	0c7fff20 	.word	0x0c7fff20
 c101028:	0c101280 	.word	0x0c101280
 c10102c:	0c7fff24 	.word	0x0c7fff24
 c101030:	0c1012ac 	.word	0x0c1012ac
 c101034:	0c7fff28 	.word	0x0c7fff28
 c101038:	0c101330 	.word	0x0c101330
 c10103c:	0c7fff2c 	.word	0x0c7fff2c
 c101040:	0c10135c 	.word	0x0c10135c
 c101044:	0c7fff30 	.word	0x0c7fff30
 c101048:	0c101388 	.word	0x0c101388
 c10104c:	0c7fff34 	.word	0x0c7fff34
 c101050:	0c1013b4 	.word	0x0c1013b4
 c101054:	0c7fff38 	.word	0x0c7fff38
 c101058:	0c1013e0 	.word	0x0c1013e0
 c10105c:	0c7fff3c 	.word	0x0c7fff3c
 c101060:	0c10140c 	.word	0x0c10140c
 c101064:	0c7fff40 	.word	0x0c7fff40
 c101068:	0c101438 	.word	0x0c101438
 c10106c:	0c7fff44 	.word	0x0c7fff44
 c101070:	0c101464 	.word	0x0c101464
 c101074:	0c7fff48 	.word	0x0c7fff48
 c101078:	0c101490 	.word	0x0c101490
 c10107c:	0c7fff4c 	.word	0x0c7fff4c
 c101080:	0c1014bc 	.word	0x0c1014bc
 c101084:	0c7fff50 	.word	0x0c7fff50
 c101088:	0c1014e8 	.word	0x0c1014e8
 c10108c:	0c7fff54 	.word	0x0c7fff54
 c101090:	0c101514 	.word	0x0c101514
 c101094:	0c7fff58 	.word	0x0c7fff58
 c101098:	0c101540 	.word	0x0c101540
 c10109c:	0c7fff5c 	.word	0x0c7fff5c
 c1010a0:	0c10156c 	.word	0x0c10156c
 c1010a4:	0c7fff60 	.word	0x0c7fff60
 c1010a8:	0c101598 	.word	0x0c101598
 c1010ac:	0c7fff64 	.word	0x0c7fff64
 c1010b0:	0c1015c4 	.word	0x0c1015c4
 c1010b4:	0c7fff68 	.word	0x0c7fff68
 c1010b8:	0c1015f0 	.word	0x0c1015f0
 c1010bc:	0c7fff6c 	.word	0x0c7fff6c
 c1010c0:	0c10161c 	.word	0x0c10161c
 c1010c4:	0c7fff74 	.word	0x0c7fff74
 c1010c8:	0c101648 	.word	0x0c101648
 c1010cc:	0c7fff78 	.word	0x0c7fff78
 c1010d0:	0c101674 	.word	0x0c101674
 c1010d4:	0c7fff7c 	.word	0x0c7fff7c
 c1010d8:	0c101304 	.word	0x0c101304
 c1010dc:	0c7fff80 	.word	0x0c7fff80
 c1010e0:	0c1012d8 	.word	0x0c1012d8
 c1010e4:	0c7fff84 	.word	0x0c7fff84
 c1010e8:	0c101254 	.word	0x0c101254
 c1010ec:	0c7fff70 	.word	0x0c7fff70
 c1010f0:	0c101228 	.word	0x0c101228

0c1010f4 <isr_RESET_dummy>:
void isr_RESET_dummy(void) {
 c1010f4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1010f8:	e1a0c00d 	mov	ip, sp
 c1010fc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101100:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_RESET_dummy");
 c101104:	e59f0010 	ldr	r0, [pc, #16]	; c10111c <isr_RESET_dummy+0x28>
 c101108:	eb00043d 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c10110c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101110:	e3a02075 	mov	r2, #117	; 0x75
 c101114:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c101118:	eafffffe 	b	c101118 <isr_RESET_dummy+0x24>
 c10111c:	0c10329c 	.word	0x0c10329c

0c101120 <isr_DABORT_dummy>:
}

void isr_DABORT_dummy(void) {
 c101120:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101124:	e1a0c00d 	mov	ip, sp
 c101128:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10112c:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_DABORT_dummy");
 c101130:	e59f0010 	ldr	r0, [pc, #16]	; c101148 <isr_DABORT_dummy+0x28>
 c101134:	eb000432 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c101138:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10113c:	e3a02075 	mov	r2, #117	; 0x75
 c101140:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c101144:	eafffffe 	b	c101144 <isr_DABORT_dummy+0x24>
 c101148:	0c1032cc 	.word	0x0c1032cc

0c10114c <isr_PABORT_dummy>:

}
void isr_PABORT_dummy(void) {
 c10114c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101150:	e1a0c00d 	mov	ip, sp
 c101154:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101158:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_PABORT_dummy");
 c10115c:	e59f0010 	ldr	r0, [pc, #16]	; c101174 <isr_PABORT_dummy+0x28>
 c101160:	eb000427 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c101164:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101168:	e3a02075 	mov	r2, #117	; 0x75
 c10116c:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c101170:	eafffffe 	b	c101170 <isr_PABORT_dummy+0x24>
 c101174:	0c1032fc 	.word	0x0c1032fc

0c101178 <isr_FIQ_dummy>:

}
void isr_FIQ_dummy(void) {
 c101178:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10117c:	e1a0c00d 	mov	ip, sp
 c101180:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101184:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_FIQ_dummy");
 c101188:	e59f0010 	ldr	r0, [pc, #16]	; c1011a0 <isr_FIQ_dummy+0x28>
 c10118c:	eb00041c 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c101190:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101194:	e3a02075 	mov	r2, #117	; 0x75
 c101198:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c10119c:	eafffffe 	b	c10119c <isr_FIQ_dummy+0x24>
 c1011a0:	0c10332c 	.word	0x0c10332c

0c1011a4 <isr_IRQ_dummy>:

}

void isr_IRQ_dummy(void) {
 c1011a4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1011a8:	e1a0c00d 	mov	ip, sp
 c1011ac:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1011b0:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_IRQ_dummy");
 c1011b4:	e59f0010 	ldr	r0, [pc, #16]	; c1011cc <isr_IRQ_dummy+0x28>
 c1011b8:	eb000411 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c1011bc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1011c0:	e3a02075 	mov	r2, #117	; 0x75
 c1011c4:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c1011c8:	eafffffe 	b	c1011c8 <isr_IRQ_dummy+0x24>
 c1011cc:	0c103358 	.word	0x0c103358

0c1011d0 <isr_UNDEF_dummy>:

}
void isr_UNDEF_dummy(void) {
 c1011d0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1011d4:	e1a0c00d 	mov	ip, sp
 c1011d8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1011dc:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UNDEF_dummy");
 c1011e0:	e59f0010 	ldr	r0, [pc, #16]	; c1011f8 <isr_UNDEF_dummy+0x28>
 c1011e4:	eb000406 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c1011e8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1011ec:	e3a02075 	mov	r2, #117	; 0x75
 c1011f0:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c1011f4:	eafffffe 	b	c1011f4 <isr_UNDEF_dummy+0x24>
 c1011f8:	0c103384 	.word	0x0c103384

0c1011fc <isr_SWI_dummy>:
}

void isr_SWI_dummy(void) {
 c1011fc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101200:	e1a0c00d 	mov	ip, sp
 c101204:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101208:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_SWI_dummy");
 c10120c:	e59f0010 	ldr	r0, [pc, #16]	; c101224 <isr_SWI_dummy+0x28>
 c101210:	eb0003fb 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c101214:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101218:	e3a02075 	mov	r2, #117	; 0x75
 c10121c:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c101220:	eafffffe 	b	c101220 <isr_SWI_dummy+0x24>
 c101224:	0c1033b4 	.word	0x0c1033b4

0c101228 <isr_TICK_dummy>:

}

void isr_TICK_dummy(void) {
 c101228:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10122c:	e1a0c00d 	mov	ip, sp
 c101230:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101234:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TICK_dummy");
 c101238:	e59f0010 	ldr	r0, [pc, #16]	; c101250 <isr_TICK_dummy+0x28>
 c10123c:	eb0003f0 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c101240:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101244:	e3a02075 	mov	r2, #117	; 0x75
 c101248:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c10124c:	eafffffe 	b	c10124c <isr_TICK_dummy+0x24>
 c101250:	0c1033e0 	.word	0x0c1033e0

0c101254 <isr_USB_dummy>:
}

void isr_USB_dummy(void) {
 c101254:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101258:	e1a0c00d 	mov	ip, sp
 c10125c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101260:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_USB_dummy");
 c101264:	e59f0010 	ldr	r0, [pc, #16]	; c10127c <isr_USB_dummy+0x28>
 c101268:	eb0003e5 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c10126c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101270:	e3a02075 	mov	r2, #117	; 0x75
 c101274:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c101278:	eafffffe 	b	c101278 <isr_USB_dummy+0x24>
 c10127c:	0c103410 	.word	0x0c103410

0c101280 <isr_ADC_dummy>:
}

void isr_ADC_dummy(void) {
 c101280:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101284:	e1a0c00d 	mov	ip, sp
 c101288:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10128c:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ADC_dummy");
 c101290:	e59f0010 	ldr	r0, [pc, #16]	; c1012a8 <isr_ADC_dummy+0x28>
 c101294:	eb0003da 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c101298:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10129c:	e3a02075 	mov	r2, #117	; 0x75
 c1012a0:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c1012a4:	eafffffe 	b	c1012a4 <isr_ADC_dummy+0x24>
 c1012a8:	0c10343c 	.word	0x0c10343c

0c1012ac <isr_RTC_dummy>:
}

void isr_RTC_dummy(void) {
 c1012ac:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1012b0:	e1a0c00d 	mov	ip, sp
 c1012b4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1012b8:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_RTC_dummy");
 c1012bc:	e59f0010 	ldr	r0, [pc, #16]	; c1012d4 <isr_RTC_dummy+0x28>
 c1012c0:	eb0003cf 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c1012c4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1012c8:	e3a02075 	mov	r2, #117	; 0x75
 c1012cc:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c1012d0:	eafffffe 	b	c1012d0 <isr_RTC_dummy+0x24>
 c1012d4:	0c103468 	.word	0x0c103468

0c1012d8 <isr_KEYPAD_dummy>:
}

void isr_KEYPAD_dummy(void) {
 c1012d8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1012dc:	e1a0c00d 	mov	ip, sp
 c1012e0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1012e4:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_KEYPAD_dummy");
 c1012e8:	e59f0010 	ldr	r0, [pc, #16]	; c101300 <isr_KEYPAD_dummy+0x28>
 c1012ec:	eb0003c4 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c1012f0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1012f4:	e3a02075 	mov	r2, #117	; 0x75
 c1012f8:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c1012fc:	eafffffe 	b	c1012fc <isr_KEYPAD_dummy+0x24>
 c101300:	0c103494 	.word	0x0c103494

0c101304 <isr_TS_dummy>:
}

void isr_TS_dummy(void) {
 c101304:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101308:	e1a0c00d 	mov	ip, sp
 c10130c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101310:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TS_dummy");
 c101314:	e59f0010 	ldr	r0, [pc, #16]	; c10132c <isr_TS_dummy+0x28>
 c101318:	eb0003b9 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c10131c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101320:	e3a02075 	mov	r2, #117	; 0x75
 c101324:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c101328:	eafffffe 	b	c101328 <isr_TS_dummy+0x24>
 c10132c:	0c1034c4 	.word	0x0c1034c4

0c101330 <isr_UTXD1_dummy>:
}

void isr_UTXD1_dummy(void) {
 c101330:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101334:	e1a0c00d 	mov	ip, sp
 c101338:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10133c:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UTXD1_dummy");
 c101340:	e59f0010 	ldr	r0, [pc, #16]	; c101358 <isr_UTXD1_dummy+0x28>
 c101344:	eb0003ae 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c101348:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10134c:	e3a02075 	mov	r2, #117	; 0x75
 c101350:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c101354:	eafffffe 	b	c101354 <isr_UTXD1_dummy+0x24>
 c101358:	0c1034f0 	.word	0x0c1034f0

0c10135c <isr_UTXD0_dummy>:
}

void isr_UTXD0_dummy(void) {
 c10135c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101360:	e1a0c00d 	mov	ip, sp
 c101364:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101368:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UTXD0_dummy");
 c10136c:	e59f0010 	ldr	r0, [pc, #16]	; c101384 <isr_UTXD0_dummy+0x28>
 c101370:	eb0003a3 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c101374:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101378:	e3a02075 	mov	r2, #117	; 0x75
 c10137c:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c101380:	eafffffe 	b	c101380 <isr_UTXD0_dummy+0x24>
 c101384:	0c103520 	.word	0x0c103520

0c101388 <isr_SIO_dummy>:
}

void isr_SIO_dummy(void) {
 c101388:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10138c:	e1a0c00d 	mov	ip, sp
 c101390:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101394:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_SIO_dummy");
 c101398:	e59f0010 	ldr	r0, [pc, #16]	; c1013b0 <isr_SIO_dummy+0x28>
 c10139c:	eb000398 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c1013a0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1013a4:	e3a02075 	mov	r2, #117	; 0x75
 c1013a8:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c1013ac:	eafffffe 	b	c1013ac <isr_SIO_dummy+0x24>
 c1013b0:	0c103550 	.word	0x0c103550

0c1013b4 <isr_IIC_dummy>:
}

void isr_IIC_dummy(void) {
 c1013b4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1013b8:	e1a0c00d 	mov	ip, sp
 c1013bc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1013c0:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_IIC_dummy");
 c1013c4:	e59f0010 	ldr	r0, [pc, #16]	; c1013dc <isr_IIC_dummy+0x28>
 c1013c8:	eb00038d 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c1013cc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1013d0:	e3a02075 	mov	r2, #117	; 0x75
 c1013d4:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c1013d8:	eafffffe 	b	c1013d8 <isr_IIC_dummy+0x24>
 c1013dc:	0c10357c 	.word	0x0c10357c

0c1013e0 <isr_URXD1_dummy>:
}

void isr_URXD1_dummy(void) {
 c1013e0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1013e4:	e1a0c00d 	mov	ip, sp
 c1013e8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1013ec:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_URXD1_dummy");
 c1013f0:	e59f0010 	ldr	r0, [pc, #16]	; c101408 <isr_URXD1_dummy+0x28>
 c1013f4:	eb000382 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c1013f8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1013fc:	e3a02075 	mov	r2, #117	; 0x75
 c101400:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c101404:	eafffffe 	b	c101404 <isr_URXD1_dummy+0x24>
 c101408:	0c1035a8 	.word	0x0c1035a8

0c10140c <isr_URXD0_dummy>:
}

void isr_URXD0_dummy(void) {
 c10140c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101410:	e1a0c00d 	mov	ip, sp
 c101414:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101418:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_URXD0_dummy");
 c10141c:	e59f0010 	ldr	r0, [pc, #16]	; c101434 <isr_URXD0_dummy+0x28>
 c101420:	eb000377 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c101424:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101428:	e3a02075 	mov	r2, #117	; 0x75
 c10142c:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c101430:	eafffffe 	b	c101430 <isr_URXD0_dummy+0x24>
 c101434:	0c1035d8 	.word	0x0c1035d8

0c101438 <isr_TIMER5_dummy>:
}

void isr_TIMER5_dummy(void) {
 c101438:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10143c:	e1a0c00d 	mov	ip, sp
 c101440:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101444:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER5_dummy");
 c101448:	e59f0010 	ldr	r0, [pc, #16]	; c101460 <isr_TIMER5_dummy+0x28>
 c10144c:	eb00036c 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c101450:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101454:	e3a02075 	mov	r2, #117	; 0x75
 c101458:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c10145c:	eafffffe 	b	c10145c <isr_TIMER5_dummy+0x24>
 c101460:	0c103608 	.word	0x0c103608

0c101464 <isr_TIMER4_dummy>:
}

void isr_TIMER4_dummy(void) {
 c101464:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101468:	e1a0c00d 	mov	ip, sp
 c10146c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101470:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER4_dummy");
 c101474:	e59f0010 	ldr	r0, [pc, #16]	; c10148c <isr_TIMER4_dummy+0x28>
 c101478:	eb000361 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c10147c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101480:	e3a02075 	mov	r2, #117	; 0x75
 c101484:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c101488:	eafffffe 	b	c101488 <isr_TIMER4_dummy+0x24>
 c10148c:	0c103638 	.word	0x0c103638

0c101490 <isr_TIMER3_dummy>:
}

void isr_TIMER3_dummy(void) {
 c101490:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101494:	e1a0c00d 	mov	ip, sp
 c101498:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10149c:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER3_dummy");
 c1014a0:	e59f0010 	ldr	r0, [pc, #16]	; c1014b8 <isr_TIMER3_dummy+0x28>
 c1014a4:	eb000356 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c1014a8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1014ac:	e3a02075 	mov	r2, #117	; 0x75
 c1014b0:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c1014b4:	eafffffe 	b	c1014b4 <isr_TIMER3_dummy+0x24>
 c1014b8:	0c103668 	.word	0x0c103668

0c1014bc <isr_TIMER2_dummy>:
}

void isr_TIMER2_dummy(void) {
 c1014bc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1014c0:	e1a0c00d 	mov	ip, sp
 c1014c4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1014c8:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER2_dummy");
 c1014cc:	e59f0010 	ldr	r0, [pc, #16]	; c1014e4 <isr_TIMER2_dummy+0x28>
 c1014d0:	eb00034b 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c1014d4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1014d8:	e3a02075 	mov	r2, #117	; 0x75
 c1014dc:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c1014e0:	eafffffe 	b	c1014e0 <isr_TIMER2_dummy+0x24>
 c1014e4:	0c103698 	.word	0x0c103698

0c1014e8 <isr_TIMER1_dummy>:
}

void isr_TIMER1_dummy(void) {
 c1014e8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1014ec:	e1a0c00d 	mov	ip, sp
 c1014f0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1014f4:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER1_dummy");
 c1014f8:	e59f0010 	ldr	r0, [pc, #16]	; c101510 <isr_TIMER1_dummy+0x28>
 c1014fc:	eb000340 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c101500:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101504:	e3a02075 	mov	r2, #117	; 0x75
 c101508:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c10150c:	eafffffe 	b	c10150c <isr_TIMER1_dummy+0x24>
 c101510:	0c1036c8 	.word	0x0c1036c8

0c101514 <isr_TIMER0_dummy>:
}

void isr_TIMER0_dummy(void) {
 c101514:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101518:	e1a0c00d 	mov	ip, sp
 c10151c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101520:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER0_dummy");
 c101524:	e59f0010 	ldr	r0, [pc, #16]	; c10153c <isr_TIMER0_dummy+0x28>
 c101528:	eb000335 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c10152c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101530:	e3a02075 	mov	r2, #117	; 0x75
 c101534:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c101538:	eafffffe 	b	c101538 <isr_TIMER0_dummy+0x24>
 c10153c:	0c1036f8 	.word	0x0c1036f8

0c101540 <isr_UERR01_dummy>:
}

void isr_UERR01_dummy(void) {
 c101540:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101544:	e1a0c00d 	mov	ip, sp
 c101548:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10154c:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UERR01_dummy");
 c101550:	e59f0010 	ldr	r0, [pc, #16]	; c101568 <isr_UERR01_dummy+0x28>
 c101554:	eb00032a 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c101558:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10155c:	e3a02075 	mov	r2, #117	; 0x75
 c101560:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c101564:	eafffffe 	b	c101564 <isr_UERR01_dummy+0x24>
 c101568:	0c103728 	.word	0x0c103728

0c10156c <isr_WDT_dummy>:
}

void isr_WDT_dummy(void) {
 c10156c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101570:	e1a0c00d 	mov	ip, sp
 c101574:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101578:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_WDT_dummy");
 c10157c:	e59f0010 	ldr	r0, [pc, #16]	; c101594 <isr_WDT_dummy+0x28>
 c101580:	eb00031f 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c101584:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101588:	e3a02075 	mov	r2, #117	; 0x75
 c10158c:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c101590:	eafffffe 	b	c101590 <isr_WDT_dummy+0x24>
 c101594:	0c103758 	.word	0x0c103758

0c101598 <isr_BDMA1_dummy>:
}

void isr_BDMA1_dummy(void) {
 c101598:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10159c:	e1a0c00d 	mov	ip, sp
 c1015a0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1015a4:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_BDMA1_dummy");
 c1015a8:	e59f0010 	ldr	r0, [pc, #16]	; c1015c0 <isr_BDMA1_dummy+0x28>
 c1015ac:	eb000314 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c1015b0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1015b4:	e3a02075 	mov	r2, #117	; 0x75
 c1015b8:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c1015bc:	eafffffe 	b	c1015bc <isr_BDMA1_dummy+0x24>
 c1015c0:	0c103784 	.word	0x0c103784

0c1015c4 <isr_BDMA0_dummy>:
}

void isr_BDMA0_dummy(void) {
 c1015c4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1015c8:	e1a0c00d 	mov	ip, sp
 c1015cc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1015d0:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_BDMA0_dummy");
 c1015d4:	e59f0010 	ldr	r0, [pc, #16]	; c1015ec <isr_BDMA0_dummy+0x28>
 c1015d8:	eb000309 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c1015dc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1015e0:	e3a02075 	mov	r2, #117	; 0x75
 c1015e4:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c1015e8:	eafffffe 	b	c1015e8 <isr_BDMA0_dummy+0x24>
 c1015ec:	0c1037b4 	.word	0x0c1037b4

0c1015f0 <isr_ZDMA1_dummy>:
}

void isr_ZDMA1_dummy(void) {
 c1015f0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1015f4:	e1a0c00d 	mov	ip, sp
 c1015f8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1015fc:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ZDMA1_dummy");
 c101600:	e59f0010 	ldr	r0, [pc, #16]	; c101618 <isr_ZDMA1_dummy+0x28>
 c101604:	eb0002fe 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c101608:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10160c:	e3a02075 	mov	r2, #117	; 0x75
 c101610:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c101614:	eafffffe 	b	c101614 <isr_ZDMA1_dummy+0x24>
 c101618:	0c1037e4 	.word	0x0c1037e4

0c10161c <isr_ZDMA0_dummy>:
}

void isr_ZDMA0_dummy(void) {
 c10161c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101620:	e1a0c00d 	mov	ip, sp
 c101624:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101628:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ZDMA0_dummy");
 c10162c:	e59f0010 	ldr	r0, [pc, #16]	; c101644 <isr_ZDMA0_dummy+0x28>
 c101630:	eb0002f3 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c101634:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101638:	e3a02075 	mov	r2, #117	; 0x75
 c10163c:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c101640:	eafffffe 	b	c101640 <isr_ZDMA0_dummy+0x24>
 c101644:	0c103814 	.word	0x0c103814

0c101648 <isr_PB_dummy>:
}

void isr_PB_dummy(void) {
 c101648:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10164c:	e1a0c00d 	mov	ip, sp
 c101650:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101654:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_PB_dummy");
 c101658:	e59f0010 	ldr	r0, [pc, #16]	; c101670 <isr_PB_dummy+0x28>
 c10165c:	eb0002e8 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c101660:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101664:	e3a02075 	mov	r2, #117	; 0x75
 c101668:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c10166c:	eafffffe 	b	c10166c <isr_PB_dummy+0x24>
 c101670:	0c103844 	.word	0x0c103844

0c101674 <isr_ETHERNET_dummy>:
}

void isr_ETHERNET_dummy(void) {
 c101674:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101678:	e1a0c00d 	mov	ip, sp
 c10167c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101680:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ETHERNET_dummy");
 c101684:	e59f0010 	ldr	r0, [pc, #16]	; c10169c <isr_ETHERNET_dummy+0x28>
 c101688:	eb0002dd 	bl	c102204 <uart0_puts>
	SEGS = 0x75;
 c10168c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101690:	e3a02075 	mov	r2, #117	; 0x75
 c101694:	e5c32000 	strb	r2, [r3]
	while (1)
		;
 c101698:	eafffffe 	b	c101698 <isr_ETHERNET_dummy+0x24>
 c10169c:	0c103870 	.word	0x0c103870

0c1016a0 <show_sys_info>:
}
static void show_sys_info(void) {
 c1016a0:	e1a0c00d 	mov	ip, sp
 c1016a4:	e92dd800 	push	{fp, ip, lr, pc}
 c1016a8:	e24cb004 	sub	fp, ip, #4
	uart0_puts(
 c1016ac:	e59f000c 	ldr	r0, [pc, #12]	; c1016c0 <show_sys_info+0x20>
 c1016b0:	eb0002d3 	bl	c102204 <uart0_puts>
			"\n\n Prácticas PSyD:\n Autores: Octavio Sales y Jorge López\n\n");
}
 c1016b4:	e24bd00c 	sub	sp, fp, #12
 c1016b8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1016bc:	e12fff1e 	bx	lr
 c1016c0:	0c1038a4 	.word	0x0c1038a4

0c1016c4 <sleep>:

inline void sleep(void) {
 c1016c4:	e1a0c00d 	mov	ip, sp
 c1016c8:	e92dd800 	push	{fp, ip, lr, pc}
 c1016cc:	e24cb004 	sub	fp, ip, #4
	CLKCON |= (1 << 2);    // Pone a la CPU en estado IDLE
 c1016d0:	e59f3018 	ldr	r3, [pc, #24]	; c1016f0 <sleep+0x2c>
 c1016d4:	e59f2014 	ldr	r2, [pc, #20]	; c1016f0 <sleep+0x2c>
 c1016d8:	e5922000 	ldr	r2, [r2]
 c1016dc:	e3822004 	orr	r2, r2, #4
 c1016e0:	e5832000 	str	r2, [r3]
}
 c1016e4:	e24bd00c 	sub	sp, fp, #12
 c1016e8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1016ec:	e12fff1e 	bx	lr
 c1016f0:	01d80004 	.word	0x01d80004

0c1016f4 <timers_init>:
static uint32 loop_ms = 0;
static uint32 loop_s = 0;

static void sw_delay_init(void);

void timers_init(void) {
 c1016f4:	e1a0c00d 	mov	ip, sp
 c1016f8:	e92dd800 	push	{fp, ip, lr, pc}
 c1016fc:	e24cb004 	sub	fp, ip, #4
	TCFG0 = 0;
 c101700:	e59f30bc 	ldr	r3, [pc, #188]	; c1017c4 <timers_init+0xd0>
 c101704:	e3a02000 	mov	r2, #0
 c101708:	e5832000 	str	r2, [r3]
	TCFG1 = 0;
 c10170c:	e59f30b4 	ldr	r3, [pc, #180]	; c1017c8 <timers_init+0xd4>
 c101710:	e3a02000 	mov	r2, #0
 c101714:	e5832000 	str	r2, [r3]

	TCNTB0 = 0;
 c101718:	e59f30ac 	ldr	r3, [pc, #172]	; c1017cc <timers_init+0xd8>
 c10171c:	e3a02000 	mov	r2, #0
 c101720:	e5832000 	str	r2, [r3]
	TCMPB0 = 0;
 c101724:	e59f30a4 	ldr	r3, [pc, #164]	; c1017d0 <timers_init+0xdc>
 c101728:	e3a02000 	mov	r2, #0
 c10172c:	e5832000 	str	r2, [r3]
	TCNTB1 = 0;
 c101730:	e59f309c 	ldr	r3, [pc, #156]	; c1017d4 <timers_init+0xe0>
 c101734:	e3a02000 	mov	r2, #0
 c101738:	e5832000 	str	r2, [r3]
	TCMPB1 = 0;
 c10173c:	e59f3094 	ldr	r3, [pc, #148]	; c1017d8 <timers_init+0xe4>
 c101740:	e3a02000 	mov	r2, #0
 c101744:	e5832000 	str	r2, [r3]
	TCNTB2 = 0;
 c101748:	e59f308c 	ldr	r3, [pc, #140]	; c1017dc <timers_init+0xe8>
 c10174c:	e3a02000 	mov	r2, #0
 c101750:	e5832000 	str	r2, [r3]
	TCMPB2 = 0;
 c101754:	e59f3084 	ldr	r3, [pc, #132]	; c1017e0 <timers_init+0xec>
 c101758:	e3a02000 	mov	r2, #0
 c10175c:	e5832000 	str	r2, [r3]
	TCNTB3 = 0;
 c101760:	e59f307c 	ldr	r3, [pc, #124]	; c1017e4 <timers_init+0xf0>
 c101764:	e3a02000 	mov	r2, #0
 c101768:	e5832000 	str	r2, [r3]
	TCMPB3 = 0;
 c10176c:	e59f3074 	ldr	r3, [pc, #116]	; c1017e8 <timers_init+0xf4>
 c101770:	e3a02000 	mov	r2, #0
 c101774:	e5832000 	str	r2, [r3]
	TCNTB4 = 0;
 c101778:	e59f306c 	ldr	r3, [pc, #108]	; c1017ec <timers_init+0xf8>
 c10177c:	e3a02000 	mov	r2, #0
 c101780:	e5832000 	str	r2, [r3]
	TCMPB4 = 0;
 c101784:	e59f3064 	ldr	r3, [pc, #100]	; c1017f0 <timers_init+0xfc>
 c101788:	e3a02000 	mov	r2, #0
 c10178c:	e5832000 	str	r2, [r3]
	TCNTB5 = 0;
 c101790:	e59f305c 	ldr	r3, [pc, #92]	; c1017f4 <timers_init+0x100>
 c101794:	e3a02000 	mov	r2, #0
 c101798:	e5832000 	str	r2, [r3]

	TCON = 0;
 c10179c:	e59f3054 	ldr	r3, [pc, #84]	; c1017f8 <timers_init+0x104>
 c1017a0:	e3a02000 	mov	r2, #0
 c1017a4:	e5832000 	str	r2, [r3]
	TCON = 0;
 c1017a8:	e59f3048 	ldr	r3, [pc, #72]	; c1017f8 <timers_init+0x104>
 c1017ac:	e3a02000 	mov	r2, #0
 c1017b0:	e5832000 	str	r2, [r3]

	sw_delay_init();
 c1017b4:	eb000010 	bl	c1017fc <sw_delay_init>
}
 c1017b8:	e24bd00c 	sub	sp, fp, #12
 c1017bc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1017c0:	e12fff1e 	bx	lr
 c1017c4:	01d50000 	.word	0x01d50000
 c1017c8:	01d50004 	.word	0x01d50004
 c1017cc:	01d5000c 	.word	0x01d5000c
 c1017d0:	01d50010 	.word	0x01d50010
 c1017d4:	01d50018 	.word	0x01d50018
 c1017d8:	01d5001c 	.word	0x01d5001c
 c1017dc:	01d50024 	.word	0x01d50024
 c1017e0:	01d50028 	.word	0x01d50028
 c1017e4:	01d50030 	.word	0x01d50030
 c1017e8:	01d50034 	.word	0x01d50034
 c1017ec:	01d5003c 	.word	0x01d5003c
 c1017f0:	01d50040 	.word	0x01d50040
 c1017f4:	01d50048 	.word	0x01d50048
 c1017f8:	01d50008 	.word	0x01d50008

0c1017fc <sw_delay_init>:

static void sw_delay_init(void) {
 c1017fc:	e1a0c00d 	mov	ip, sp
 c101800:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c101804:	e24cb004 	sub	fp, ip, #4
 c101808:	e24dd00c 	sub	sp, sp, #12
	uint32 i;

	timer3_start();
 c10180c:	eb0000c7 	bl	c101b30 <timer3_start>
	for (i = 1000000; i; i--)
 c101810:	e59f3088 	ldr	r3, [pc, #136]	; c1018a0 <sw_delay_init+0xa4>
 c101814:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c101818:	ea000002 	b	c101828 <sw_delay_init+0x2c>
 c10181c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101820:	e2433001 	sub	r3, r3, #1
 c101824:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c101828:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10182c:	e3530000 	cmp	r3, #0
 c101830:	1afffff9 	bne	c10181c <sw_delay_init+0x20>
		;
	loop_s = ((uint64) 1000000 * 10000) / timer3_stop();
 c101834:	eb0000e9 	bl	c101be0 <timer3_stop>
 c101838:	e1a03000 	mov	r3, r0
 c10183c:	e1a02003 	mov	r2, r3
 c101840:	e1a03002 	mov	r3, r2
 c101844:	e3a04000 	mov	r4, #0
 c101848:	e3a00315 	mov	r0, #1409286144	; 0x54000000
 c10184c:	e2800abe 	add	r0, r0, #778240	; 0xbe000
 c101850:	e2800b01 	add	r0, r0, #1024	; 0x400
 c101854:	e3a01002 	mov	r1, #2
 c101858:	e1a02003 	mov	r2, r3
 c10185c:	e1a03004 	mov	r3, r4
 c101860:	eb0003b3 	bl	c102734 <__aeabi_uldivmod>
 c101864:	e1a03000 	mov	r3, r0
 c101868:	e1a04001 	mov	r4, r1
 c10186c:	e1a02003 	mov	r2, r3
 c101870:	e59f302c 	ldr	r3, [pc, #44]	; c1018a4 <sw_delay_init+0xa8>
 c101874:	e5832000 	str	r2, [r3]
	loop_ms = loop_s / 1000;
 c101878:	e59f3024 	ldr	r3, [pc, #36]	; c1018a4 <sw_delay_init+0xa8>
 c10187c:	e5932000 	ldr	r2, [r3]
 c101880:	e59f3020 	ldr	r3, [pc, #32]	; c1018a8 <sw_delay_init+0xac>
 c101884:	e0831392 	umull	r1, r3, r2, r3
 c101888:	e1a02323 	lsr	r2, r3, #6
 c10188c:	e59f3018 	ldr	r3, [pc, #24]	; c1018ac <sw_delay_init+0xb0>
 c101890:	e5832000 	str	r2, [r3]
}
 c101894:	e24bd010 	sub	sp, fp, #16
 c101898:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c10189c:	e12fff1e 	bx	lr
 c1018a0:	000f4240 	.word	0x000f4240
 c1018a4:	0c1038ec 	.word	0x0c1038ec
 c1018a8:	10624dd3 	.word	0x10624dd3
 c1018ac:	0c1038e8 	.word	0x0c1038e8

0c1018b0 <timer3_delay_ms>:
;

void timer3_delay_ms(uint16 n) {
 c1018b0:	e1a0c00d 	mov	ip, sp
 c1018b4:	e92dd800 	push	{fp, ip, lr, pc}
 c1018b8:	e24cb004 	sub	fp, ip, #4
 c1018bc:	e24dd008 	sub	sp, sp, #8
 c1018c0:	e1a03000 	mov	r3, r0
 c1018c4:	e14b30be 	strh	r3, [fp, #-14]
	TCFG0 = (TCFG0 & ~(0xff << 8)) | (0 << 8);// prescaler
 c1018c8:	e59f30b0 	ldr	r3, [pc, #176]	; c101980 <timer3_delay_ms+0xd0>
 c1018cc:	e59f20ac 	ldr	r2, [pc, #172]	; c101980 <timer3_delay_ms+0xd0>
 c1018d0:	e5922000 	ldr	r2, [r2]
 c1018d4:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c1018d8:	e5832000 	str	r2, [r3]
	TCFG1 = (TCFG1 & ~(0xf << 12)) | (2 << 12);// divisor
 c1018dc:	e59f30a0 	ldr	r3, [pc, #160]	; c101984 <timer3_delay_ms+0xd4>
 c1018e0:	e59f209c 	ldr	r2, [pc, #156]	; c101984 <timer3_delay_ms+0xd4>
 c1018e4:	e5922000 	ldr	r2, [r2]
 c1018e8:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c1018ec:	e3822a02 	orr	r2, r2, #8192	; 0x2000
 c1018f0:	e5832000 	str	r2, [r3]
	TCNTB3 = 32000;								/* (0+1) *2/(64 MHz) = 31.25ns (1 ms)/(31.25 ns) = 32000*/
 c1018f4:	e59f308c 	ldr	r3, [pc, #140]	; c101988 <timer3_delay_ms+0xd8>
 c1018f8:	e3a02c7d 	mov	r2, #32000	; 0x7d00
 c1018fc:	e5832000 	str	r2, [r3]
	for (; n; n--) {
 c101900:	ea000018 	b	c101968 <timer3_delay_ms+0xb8>
		TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c101904:	e59f3080 	ldr	r3, [pc, #128]	; c10198c <timer3_delay_ms+0xdc>
 c101908:	e59f207c 	ldr	r2, [pc, #124]	; c10198c <timer3_delay_ms+0xdc>
 c10190c:	e5922000 	ldr	r2, [r2]
 c101910:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c101914:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c101918:	e5832000 	str	r2, [r3]
		TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c10191c:	e59f3068 	ldr	r3, [pc, #104]	; c10198c <timer3_delay_ms+0xdc>
 c101920:	e59f2064 	ldr	r2, [pc, #100]	; c10198c <timer3_delay_ms+0xdc>
 c101924:	e5922000 	ldr	r2, [r2]
 c101928:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c10192c:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c101930:	e5832000 	str	r2, [r3]
		while (!TCNTO3 );
 c101934:	e1a00000 	nop			; (mov r0, r0)
 c101938:	e59f3050 	ldr	r3, [pc, #80]	; c101990 <timer3_delay_ms+0xe0>
 c10193c:	e5933000 	ldr	r3, [r3]
 c101940:	e3530000 	cmp	r3, #0
 c101944:	0afffffb 	beq	c101938 <timer3_delay_ms+0x88>
		while (TCNTO3 );
 c101948:	e1a00000 	nop			; (mov r0, r0)
 c10194c:	e59f303c 	ldr	r3, [pc, #60]	; c101990 <timer3_delay_ms+0xe0>
 c101950:	e5933000 	ldr	r3, [r3]
 c101954:	e3530000 	cmp	r3, #0
 c101958:	1afffffb 	bne	c10194c <timer3_delay_ms+0x9c>

void timer3_delay_ms(uint16 n) {
	TCFG0 = (TCFG0 & ~(0xff << 8)) | (0 << 8);// prescaler
	TCFG1 = (TCFG1 & ~(0xf << 12)) | (2 << 12);// divisor
	TCNTB3 = 32000;								/* (0+1) *2/(64 MHz) = 31.25ns (1 ms)/(31.25 ns) = 32000*/
	for (; n; n--) {
 c10195c:	e15b30be 	ldrh	r3, [fp, #-14]
 c101960:	e2433001 	sub	r3, r3, #1
 c101964:	e14b30be 	strh	r3, [fp, #-14]
 c101968:	e15b30be 	ldrh	r3, [fp, #-14]
 c10196c:	e3530000 	cmp	r3, #0
 c101970:	1affffe3 	bne	c101904 <timer3_delay_ms+0x54>
		TCON = (TCON & ~(0xf << 16)) | (1 << 17);
		TCON = (TCON & ~(0xf << 16)) | (1 << 16);
		while (!TCNTO3 );
		while (TCNTO3 );
	}
}
 c101974:	e24bd00c 	sub	sp, fp, #12
 c101978:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10197c:	e12fff1e 	bx	lr
 c101980:	01d50000 	.word	0x01d50000
 c101984:	01d50004 	.word	0x01d50004
 c101988:	01d50030 	.word	0x01d50030
 c10198c:	01d50008 	.word	0x01d50008
 c101990:	01d50038 	.word	0x01d50038

0c101994 <sw_delay_ms>:

void sw_delay_ms(uint16 n) {
 c101994:	e1a0c00d 	mov	ip, sp
 c101998:	e92dd800 	push	{fp, ip, lr, pc}
 c10199c:	e24cb004 	sub	fp, ip, #4
 c1019a0:	e24dd010 	sub	sp, sp, #16
 c1019a4:	e1a03000 	mov	r3, r0
 c1019a8:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
	uint32 i;

	for (i = loop_ms * n; i; i--)
 c1019ac:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1019b0:	e59f2030 	ldr	r2, [pc, #48]	; c1019e8 <sw_delay_ms+0x54>
 c1019b4:	e5922000 	ldr	r2, [r2]
 c1019b8:	e0030392 	mul	r3, r2, r3
 c1019bc:	e50b3010 	str	r3, [fp, #-16]
 c1019c0:	ea000002 	b	c1019d0 <sw_delay_ms+0x3c>
 c1019c4:	e51b3010 	ldr	r3, [fp, #-16]
 c1019c8:	e2433001 	sub	r3, r3, #1
 c1019cc:	e50b3010 	str	r3, [fp, #-16]
 c1019d0:	e51b3010 	ldr	r3, [fp, #-16]
 c1019d4:	e3530000 	cmp	r3, #0
 c1019d8:	1afffff9 	bne	c1019c4 <sw_delay_ms+0x30>
		;
}
 c1019dc:	e24bd00c 	sub	sp, fp, #12
 c1019e0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1019e4:	e12fff1e 	bx	lr
 c1019e8:	0c1038e8 	.word	0x0c1038e8

0c1019ec <timer3_delay_s>:

void timer3_delay_s(uint16 n) {
 c1019ec:	e1a0c00d 	mov	ip, sp
 c1019f0:	e92dd800 	push	{fp, ip, lr, pc}
 c1019f4:	e24cb004 	sub	fp, ip, #4
 c1019f8:	e24dd008 	sub	sp, sp, #8
 c1019fc:	e1a03000 	mov	r3, r0
 c101a00:	e14b30be 	strh	r3, [fp, #-14]
	TCFG0 = (TCFG0 & ~(0xff << 8)) | (63 << 8);
 c101a04:	e59f30b4 	ldr	r3, [pc, #180]	; c101ac0 <timer3_delay_s+0xd4>
 c101a08:	e59f20b0 	ldr	r2, [pc, #176]	; c101ac0 <timer3_delay_s+0xd4>
 c101a0c:	e5922000 	ldr	r2, [r2]
 c101a10:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c101a14:	e3822c3f 	orr	r2, r2, #16128	; 0x3f00
 c101a18:	e5832000 	str	r2, [r3]
	TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c101a1c:	e59f30a0 	ldr	r3, [pc, #160]	; c101ac4 <timer3_delay_s+0xd8>
 c101a20:	e59f209c 	ldr	r2, [pc, #156]	; c101ac4 <timer3_delay_s+0xd8>
 c101a24:	e5922000 	ldr	r2, [r2]
 c101a28:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c101a2c:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c101a30:	e5832000 	str	r2, [r3]
	TCNTB3 = 31250;							/*2 (63+1) â32/(64MHz)=32 micro s	(1s)/(32 micro s)= 31250*/
 c101a34:	e59f308c 	ldr	r3, [pc, #140]	; c101ac8 <timer3_delay_s+0xdc>
 c101a38:	e59f208c 	ldr	r2, [pc, #140]	; c101acc <timer3_delay_s+0xe0>
 c101a3c:	e5832000 	str	r2, [r3]

	for (; n; n--) {
 c101a40:	ea000018 	b	c101aa8 <timer3_delay_s+0xbc>
		TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c101a44:	e59f3084 	ldr	r3, [pc, #132]	; c101ad0 <timer3_delay_s+0xe4>
 c101a48:	e59f2080 	ldr	r2, [pc, #128]	; c101ad0 <timer3_delay_s+0xe4>
 c101a4c:	e5922000 	ldr	r2, [r2]
 c101a50:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c101a54:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c101a58:	e5832000 	str	r2, [r3]
		TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c101a5c:	e59f306c 	ldr	r3, [pc, #108]	; c101ad0 <timer3_delay_s+0xe4>
 c101a60:	e59f2068 	ldr	r2, [pc, #104]	; c101ad0 <timer3_delay_s+0xe4>
 c101a64:	e5922000 	ldr	r2, [r2]
 c101a68:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c101a6c:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c101a70:	e5832000 	str	r2, [r3]
		while (!TCNTO3 )
 c101a74:	e1a00000 	nop			; (mov r0, r0)
 c101a78:	e59f3054 	ldr	r3, [pc, #84]	; c101ad4 <timer3_delay_s+0xe8>
 c101a7c:	e5933000 	ldr	r3, [r3]
 c101a80:	e3530000 	cmp	r3, #0
 c101a84:	0afffffb 	beq	c101a78 <timer3_delay_s+0x8c>
			;
		while (TCNTO3 )
 c101a88:	e1a00000 	nop			; (mov r0, r0)
 c101a8c:	e59f3040 	ldr	r3, [pc, #64]	; c101ad4 <timer3_delay_s+0xe8>
 c101a90:	e5933000 	ldr	r3, [r3]
 c101a94:	e3530000 	cmp	r3, #0
 c101a98:	1afffffb 	bne	c101a8c <timer3_delay_s+0xa0>
void timer3_delay_s(uint16 n) {
	TCFG0 = (TCFG0 & ~(0xff << 8)) | (63 << 8);
	TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
	TCNTB3 = 31250;							/*2 (63+1) â32/(64MHz)=32 micro s	(1s)/(32 micro s)= 31250*/

	for (; n; n--) {
 c101a9c:	e15b30be 	ldrh	r3, [fp, #-14]
 c101aa0:	e2433001 	sub	r3, r3, #1
 c101aa4:	e14b30be 	strh	r3, [fp, #-14]
 c101aa8:	e15b30be 	ldrh	r3, [fp, #-14]
 c101aac:	e3530000 	cmp	r3, #0
 c101ab0:	1affffe3 	bne	c101a44 <timer3_delay_s+0x58>
		while (!TCNTO3 )
			;
		while (TCNTO3 )
			;
}
}
 c101ab4:	e24bd00c 	sub	sp, fp, #12
 c101ab8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101abc:	e12fff1e 	bx	lr
 c101ac0:	01d50000 	.word	0x01d50000
 c101ac4:	01d50004 	.word	0x01d50004
 c101ac8:	01d50030 	.word	0x01d50030
 c101acc:	00007a12 	.word	0x00007a12
 c101ad0:	01d50008 	.word	0x01d50008
 c101ad4:	01d50038 	.word	0x01d50038

0c101ad8 <sw_delay_s>:

void sw_delay_s(uint16 n) {
 c101ad8:	e1a0c00d 	mov	ip, sp
 c101adc:	e92dd800 	push	{fp, ip, lr, pc}
 c101ae0:	e24cb004 	sub	fp, ip, #4
 c101ae4:	e24dd010 	sub	sp, sp, #16
 c101ae8:	e1a03000 	mov	r3, r0
 c101aec:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
uint32 i;

for (i = loop_s * n; i; i--)
 c101af0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101af4:	e59f2030 	ldr	r2, [pc, #48]	; c101b2c <sw_delay_s+0x54>
 c101af8:	e5922000 	ldr	r2, [r2]
 c101afc:	e0030392 	mul	r3, r2, r3
 c101b00:	e50b3010 	str	r3, [fp, #-16]
 c101b04:	ea000002 	b	c101b14 <sw_delay_s+0x3c>
 c101b08:	e51b3010 	ldr	r3, [fp, #-16]
 c101b0c:	e2433001 	sub	r3, r3, #1
 c101b10:	e50b3010 	str	r3, [fp, #-16]
 c101b14:	e51b3010 	ldr	r3, [fp, #-16]
 c101b18:	e3530000 	cmp	r3, #0
 c101b1c:	1afffff9 	bne	c101b08 <sw_delay_s+0x30>
	;
}
 c101b20:	e24bd00c 	sub	sp, fp, #12
 c101b24:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101b28:	e12fff1e 	bx	lr
 c101b2c:	0c1038ec 	.word	0x0c1038ec

0c101b30 <timer3_start>:

void timer3_start(void) {
 c101b30:	e1a0c00d 	mov	ip, sp
 c101b34:	e92dd800 	push	{fp, ip, lr, pc}
 c101b38:	e24cb004 	sub	fp, ip, #4
TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8); /*T2âT3 prescaler: N=199*/
 c101b3c:	e59f3084 	ldr	r3, [pc, #132]	; c101bc8 <timer3_start+0x98>
 c101b40:	e59f2080 	ldr	r2, [pc, #128]	; c101bc8 <timer3_start+0x98>
 c101b44:	e5922000 	ldr	r2, [r2]
 c101b48:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c101b4c:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c101b50:	e5832000 	str	r2, [r3]
TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);/*T3 divisor (1/32): D=32*/
 c101b54:	e59f3070 	ldr	r3, [pc, #112]	; c101bcc <timer3_start+0x9c>
 c101b58:	e59f206c 	ldr	r2, [pc, #108]	; c101bcc <timer3_start+0x9c>
 c101b5c:	e5922000 	ldr	r2, [r2]
 c101b60:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c101b64:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c101b68:	e5832000 	str	r2, [r3]

TCNTB3 = 0xffff;							/*count maximo*/
 c101b6c:	e59f305c 	ldr	r3, [pc, #92]	; c101bd0 <timer3_start+0xa0>
 c101b70:	e59f205c 	ldr	r2, [pc, #92]	; c101bd4 <timer3_start+0xa4>
 c101b74:	e5832000 	str	r2, [r3]
TCON = (TCON & ~(0xf << 16)) | (1 << 17);	/*one shot , carga TCNT3*/
 c101b78:	e59f3058 	ldr	r3, [pc, #88]	; c101bd8 <timer3_start+0xa8>
 c101b7c:	e59f2054 	ldr	r2, [pc, #84]	; c101bd8 <timer3_start+0xa8>
 c101b80:	e5922000 	ldr	r2, [r2]
 c101b84:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c101b88:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c101b8c:	e5832000 	str	r2, [r3]
TCON = (TCON & ~(0xf << 16)) | (1 << 16);	/*start..*/
 c101b90:	e59f3040 	ldr	r3, [pc, #64]	; c101bd8 <timer3_start+0xa8>
 c101b94:	e59f203c 	ldr	r2, [pc, #60]	; c101bd8 <timer3_start+0xa8>
 c101b98:	e5922000 	ldr	r2, [r2]
 c101b9c:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c101ba0:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c101ba4:	e5832000 	str	r2, [r3]
while (!TCNTO3 )							/* hasta que TCNTO3 se actualice*/
 c101ba8:	e1a00000 	nop			; (mov r0, r0)
 c101bac:	e59f3028 	ldr	r3, [pc, #40]	; c101bdc <timer3_start+0xac>
 c101bb0:	e5933000 	ldr	r3, [r3]
 c101bb4:	e3530000 	cmp	r3, #0
 c101bb8:	0afffffb 	beq	c101bac <timer3_start+0x7c>
	;
}
 c101bbc:	e24bd00c 	sub	sp, fp, #12
 c101bc0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101bc4:	e12fff1e 	bx	lr
 c101bc8:	01d50000 	.word	0x01d50000
 c101bcc:	01d50004 	.word	0x01d50004
 c101bd0:	01d50030 	.word	0x01d50030
 c101bd4:	0000ffff 	.word	0x0000ffff
 c101bd8:	01d50008 	.word	0x01d50008
 c101bdc:	01d50038 	.word	0x01d50038

0c101be0 <timer3_stop>:

uint16 timer3_stop(void) {
 c101be0:	e1a0c00d 	mov	ip, sp
 c101be4:	e92dd800 	push	{fp, ip, lr, pc}
 c101be8:	e24cb004 	sub	fp, ip, #4
TCON &= ~(1 << 16);							/*stop timer3*/
 c101bec:	e59f3038 	ldr	r3, [pc, #56]	; c101c2c <timer3_stop+0x4c>
 c101bf0:	e59f2034 	ldr	r2, [pc, #52]	; c101c2c <timer3_stop+0x4c>
 c101bf4:	e5922000 	ldr	r2, [r2]
 c101bf8:	e3c22801 	bic	r2, r2, #65536	; 0x10000
 c101bfc:	e5832000 	str	r2, [r3]
return 0xffff - TCNTO3 ;					/*calcula los ciclos de cuenta transcurridos. (TCNTB3 - TCNTO3)*/
 c101c00:	e59f3028 	ldr	r3, [pc, #40]	; c101c30 <timer3_stop+0x50>
 c101c04:	e5933000 	ldr	r3, [r3]
 c101c08:	e1a03803 	lsl	r3, r3, #16
 c101c0c:	e1a03823 	lsr	r3, r3, #16
 c101c10:	e1e03003 	mvn	r3, r3
 c101c14:	e1a03803 	lsl	r3, r3, #16
 c101c18:	e1a03823 	lsr	r3, r3, #16
}
 c101c1c:	e1a00003 	mov	r0, r3
 c101c20:	e24bd00c 	sub	sp, fp, #12
 c101c24:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101c28:	e12fff1e 	bx	lr
 c101c2c:	01d50008 	.word	0x01d50008
 c101c30:	01d50038 	.word	0x01d50038

0c101c34 <timer3_start_timeout>:

/*
** Arranca el timer3 a una frecuencia de 0,01 MHz
** PermitirÃ¡ contar n dÃ©cimas de milisegundo (0,1 ms = 100 us) hasta un mÃ¡ximo de 6.55s
*/
void timer3_start_timeout(uint16 n) {
 c101c34:	e1a0c00d 	mov	ip, sp
 c101c38:	e92dd800 	push	{fp, ip, lr, pc}
 c101c3c:	e24cb004 	sub	fp, ip, #4
 c101c40:	e24dd008 	sub	sp, sp, #8
 c101c44:	e1a03000 	mov	r3, r0
 c101c48:	e14b30be 	strh	r3, [fp, #-14]
TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);
 c101c4c:	e59f3084 	ldr	r3, [pc, #132]	; c101cd8 <timer3_start_timeout+0xa4>
 c101c50:	e59f2080 	ldr	r2, [pc, #128]	; c101cd8 <timer3_start_timeout+0xa4>
 c101c54:	e5922000 	ldr	r2, [r2]
 c101c58:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c101c5c:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c101c60:	e5832000 	str	r2, [r3]
TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c101c64:	e59f3070 	ldr	r3, [pc, #112]	; c101cdc <timer3_start_timeout+0xa8>
 c101c68:	e59f206c 	ldr	r2, [pc, #108]	; c101cdc <timer3_start_timeout+0xa8>
 c101c6c:	e5922000 	ldr	r2, [r2]
 c101c70:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c101c74:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c101c78:	e5832000 	str	r2, [r3]

TCNTB3 = n;
 c101c7c:	e59f305c 	ldr	r3, [pc, #92]	; c101ce0 <timer3_start_timeout+0xac>
 c101c80:	e15b20be 	ldrh	r2, [fp, #-14]
 c101c84:	e5832000 	str	r2, [r3]
TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c101c88:	e59f3054 	ldr	r3, [pc, #84]	; c101ce4 <timer3_start_timeout+0xb0>
 c101c8c:	e59f2050 	ldr	r2, [pc, #80]	; c101ce4 <timer3_start_timeout+0xb0>
 c101c90:	e5922000 	ldr	r2, [r2]
 c101c94:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c101c98:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c101c9c:	e5832000 	str	r2, [r3]
TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c101ca0:	e59f303c 	ldr	r3, [pc, #60]	; c101ce4 <timer3_start_timeout+0xb0>
 c101ca4:	e59f2038 	ldr	r2, [pc, #56]	; c101ce4 <timer3_start_timeout+0xb0>
 c101ca8:	e5922000 	ldr	r2, [r2]
 c101cac:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c101cb0:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c101cb4:	e5832000 	str	r2, [r3]
while (!TCNTO3 )
 c101cb8:	e1a00000 	nop			; (mov r0, r0)
 c101cbc:	e59f3024 	ldr	r3, [pc, #36]	; c101ce8 <timer3_start_timeout+0xb4>
 c101cc0:	e5933000 	ldr	r3, [r3]
 c101cc4:	e3530000 	cmp	r3, #0
 c101cc8:	0afffffb 	beq	c101cbc <timer3_start_timeout+0x88>
	;
}
 c101ccc:	e24bd00c 	sub	sp, fp, #12
 c101cd0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101cd4:	e12fff1e 	bx	lr
 c101cd8:	01d50000 	.word	0x01d50000
 c101cdc:	01d50004 	.word	0x01d50004
 c101ce0:	01d50030 	.word	0x01d50030
 c101ce4:	01d50008 	.word	0x01d50008
 c101ce8:	01d50038 	.word	0x01d50038

0c101cec <timer3_timeout>:

/*
** Indica si el timer3 ha finalizado su cuenta
*/
uint16 timer3_timeout() {
 c101cec:	e1a0c00d 	mov	ip, sp
 c101cf0:	e92dd800 	push	{fp, ip, lr, pc}
 c101cf4:	e24cb004 	sub	fp, ip, #4
return !TCNTO3 ;
 c101cf8:	e59f3024 	ldr	r3, [pc, #36]	; c101d24 <timer3_timeout+0x38>
 c101cfc:	e5933000 	ldr	r3, [r3]
 c101d00:	e3530000 	cmp	r3, #0
 c101d04:	13a03000 	movne	r3, #0
 c101d08:	03a03001 	moveq	r3, #1
 c101d0c:	e1a03803 	lsl	r3, r3, #16
 c101d10:	e1a03823 	lsr	r3, r3, #16
}
 c101d14:	e1a00003 	mov	r0, r3
 c101d18:	e24bd00c 	sub	sp, fp, #12
 c101d1c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101d20:	e12fff1e 	bx	lr
 c101d24:	01d50038 	.word	0x01d50038

0c101d28 <timer0_open_tick>:
** Borra interrupciones pendientes del timer0
** Desenmascara globalmente las interrupciones y especÃ­ficamente las interrupciones del timer0
** Configura el timer0 para que genere tps interrupciones por segundo
*/
 void timer0_open_tick( void (*isr)(void), uint16 tps )
 {
 c101d28:	e1a0c00d 	mov	ip, sp
 c101d2c:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c101d30:	e24cb004 	sub	fp, ip, #4
 c101d34:	e24dd00c 	sub	sp, sp, #12
 c101d38:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c101d3c:	e1a03001 	mov	r3, r1
 c101d40:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
pISR_TIMER0 = (uint32)isr;
 c101d44:	e59f31f4 	ldr	r3, [pc, #500]	; c101f40 <timer0_open_tick+0x218>
 c101d48:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c101d4c:	e5832000 	str	r2, [r3]
	I_ISPC = BIT_TIMER0;
 c101d50:	e59f31ec 	ldr	r3, [pc, #492]	; c101f44 <timer0_open_tick+0x21c>
 c101d54:	e3a02a02 	mov	r2, #8192	; 0x2000
 c101d58:	e5832000 	str	r2, [r3]
	INTMSK &= ~(BIT_GLOBAL | BIT_TIMER0);
 c101d5c:	e59f21e4 	ldr	r2, [pc, #484]	; c101f48 <timer0_open_tick+0x220>
 c101d60:	e59f31e0 	ldr	r3, [pc, #480]	; c101f48 <timer0_open_tick+0x220>
 c101d64:	e5933000 	ldr	r3, [r3]
 c101d68:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c101d6c:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
 c101d70:	e5823000 	str	r3, [r2]
	if (tps > 0 && tps <= 10) {
 c101d74:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101d78:	e3530000 	cmp	r3, #0
 c101d7c:	0a000018 	beq	c101de4 <timer0_open_tick+0xbc>
 c101d80:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101d84:	e353000a 	cmp	r3, #10
 c101d88:	8a000015 	bhi	c101de4 <timer0_open_tick+0xbc>
		TCFG0 = (TCFG0 & ~(0xff << 0)) | (199 << 0);
 c101d8c:	e59f31b8 	ldr	r3, [pc, #440]	; c101f4c <timer0_open_tick+0x224>
 c101d90:	e59f21b4 	ldr	r2, [pc, #436]	; c101f4c <timer0_open_tick+0x224>
 c101d94:	e5922000 	ldr	r2, [r2]
 c101d98:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c101d9c:	e38220c7 	orr	r2, r2, #199	; 0xc7
 c101da0:	e5832000 	str	r2, [r3]
		TCFG1 = (TCFG1 & ~(0xf << 0)) | (2 << 0);
 c101da4:	e59f31a4 	ldr	r3, [pc, #420]	; c101f50 <timer0_open_tick+0x228>
 c101da8:	e59f21a0 	ldr	r2, [pc, #416]	; c101f50 <timer0_open_tick+0x228>
 c101dac:	e5922000 	ldr	r2, [r2]
 c101db0:	e3c2200f 	bic	r2, r2, #15
 c101db4:	e3822002 	orr	r2, r2, #2
 c101db8:	e5832000 	str	r2, [r3]
		TCNTB0 = (40000U / tps);
 c101dbc:	e59f4190 	ldr	r4, [pc, #400]	; c101f54 <timer0_open_tick+0x22c>
 c101dc0:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101dc4:	e59f018c 	ldr	r0, [pc, #396]	; c101f58 <timer0_open_tick+0x230>
 c101dc8:	e1a01003 	mov	r1, r3
 c101dcc:	eb000212 	bl	c10261c <__aeabi_uidiv>
 c101dd0:	e1a03000 	mov	r3, r0
 c101dd4:	e1a03803 	lsl	r3, r3, #16
 c101dd8:	e1a03823 	lsr	r3, r3, #16
 c101ddc:	e5843000 	str	r3, [r4]
 c101de0:	ea000047 	b	c101f04 <timer0_open_tick+0x1dc>
	} else if (tps > 10 && tps <= 100) {
 c101de4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101de8:	e353000a 	cmp	r3, #10
 c101dec:	9a000016 	bls	c101e4c <timer0_open_tick+0x124>
 c101df0:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101df4:	e3530064 	cmp	r3, #100	; 0x64
 c101df8:	8a000013 	bhi	c101e4c <timer0_open_tick+0x124>
		TCFG0 = (TCFG0 & ~(0xff << 0))  | (4 << 0);
 c101dfc:	e59f3148 	ldr	r3, [pc, #328]	; c101f4c <timer0_open_tick+0x224>
 c101e00:	e59f2144 	ldr	r2, [pc, #324]	; c101f4c <timer0_open_tick+0x224>
 c101e04:	e5922000 	ldr	r2, [r2]
 c101e08:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c101e0c:	e3822004 	orr	r2, r2, #4
 c101e10:	e5832000 	str	r2, [r3]
		TCFG1 = (TCFG1 & ~(0xf << 0)) | (4 << 0);
 c101e14:	e59f3134 	ldr	r3, [pc, #308]	; c101f50 <timer0_open_tick+0x228>
 c101e18:	e59f2130 	ldr	r2, [pc, #304]	; c101f50 <timer0_open_tick+0x228>
 c101e1c:	e5922000 	ldr	r2, [r2]
 c101e20:	e3c2200f 	bic	r2, r2, #15
 c101e24:	e3822004 	orr	r2, r2, #4
 c101e28:	e5832000 	str	r2, [r3]
		TCNTB0 = (400000U / (uint32) tps);
 c101e2c:	e59f4120 	ldr	r4, [pc, #288]	; c101f54 <timer0_open_tick+0x22c>
 c101e30:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101e34:	e59f0120 	ldr	r0, [pc, #288]	; c101f5c <timer0_open_tick+0x234>
 c101e38:	e1a01003 	mov	r1, r3
 c101e3c:	eb0001f6 	bl	c10261c <__aeabi_uidiv>
 c101e40:	e1a03000 	mov	r3, r0
 c101e44:	e5843000 	str	r3, [r4]
 c101e48:	ea00002d 	b	c101f04 <timer0_open_tick+0x1dc>
	} else if (tps > 100 && tps <= 1000) {
 c101e4c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101e50:	e3530064 	cmp	r3, #100	; 0x64
 c101e54:	9a000016 	bls	c101eb4 <timer0_open_tick+0x18c>
 c101e58:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101e5c:	e3530ffa 	cmp	r3, #1000	; 0x3e8
 c101e60:	8a000013 	bhi	c101eb4 <timer0_open_tick+0x18c>
		TCFG0 = (TCFG0 & ~(0xff << 0)) | (1 << 0);
 c101e64:	e59f30e0 	ldr	r3, [pc, #224]	; c101f4c <timer0_open_tick+0x224>
 c101e68:	e59f20dc 	ldr	r2, [pc, #220]	; c101f4c <timer0_open_tick+0x224>
 c101e6c:	e5922000 	ldr	r2, [r2]
 c101e70:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c101e74:	e3822001 	orr	r2, r2, #1
 c101e78:	e5832000 	str	r2, [r3]
		TCFG1 = (TCFG1 & ~(0xf << 0)) | (2 << 0);
 c101e7c:	e59f30cc 	ldr	r3, [pc, #204]	; c101f50 <timer0_open_tick+0x228>
 c101e80:	e59f20c8 	ldr	r2, [pc, #200]	; c101f50 <timer0_open_tick+0x228>
 c101e84:	e5922000 	ldr	r2, [r2]
 c101e88:	e3c2200f 	bic	r2, r2, #15
 c101e8c:	e3822002 	orr	r2, r2, #2
 c101e90:	e5832000 	str	r2, [r3]
		TCNTB0 = (4000000U / (uint32) tps);
 c101e94:	e59f40b8 	ldr	r4, [pc, #184]	; c101f54 <timer0_open_tick+0x22c>
 c101e98:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101e9c:	e59f00bc 	ldr	r0, [pc, #188]	; c101f60 <timer0_open_tick+0x238>
 c101ea0:	e1a01003 	mov	r1, r3
 c101ea4:	eb0001dc 	bl	c10261c <__aeabi_uidiv>
 c101ea8:	e1a03000 	mov	r3, r0
 c101eac:	e5843000 	str	r3, [r4]
 c101eb0:	ea000013 	b	c101f04 <timer0_open_tick+0x1dc>
	} else if (tps > 1000) {
 c101eb4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101eb8:	e3530ffa 	cmp	r3, #1000	; 0x3e8
 c101ebc:	9a000010 	bls	c101f04 <timer0_open_tick+0x1dc>
		TCFG0 = (TCFG0 & ~(0xff << 0)) | (0 << 0);
 c101ec0:	e59f3084 	ldr	r3, [pc, #132]	; c101f4c <timer0_open_tick+0x224>
 c101ec4:	e59f2080 	ldr	r2, [pc, #128]	; c101f4c <timer0_open_tick+0x224>
 c101ec8:	e5922000 	ldr	r2, [r2]
 c101ecc:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c101ed0:	e5832000 	str	r2, [r3]
		TCFG1 = (TCFG1 & ~(0xf << 0)) | (0 << 0);
 c101ed4:	e59f3074 	ldr	r3, [pc, #116]	; c101f50 <timer0_open_tick+0x228>
 c101ed8:	e59f2070 	ldr	r2, [pc, #112]	; c101f50 <timer0_open_tick+0x228>
 c101edc:	e5922000 	ldr	r2, [r2]
 c101ee0:	e3c2200f 	bic	r2, r2, #15
 c101ee4:	e5832000 	str	r2, [r3]
		TCNTB0 = (32000000U / (uint32) tps);
 c101ee8:	e59f4064 	ldr	r4, [pc, #100]	; c101f54 <timer0_open_tick+0x22c>
 c101eec:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101ef0:	e59f006c 	ldr	r0, [pc, #108]	; c101f64 <timer0_open_tick+0x23c>
 c101ef4:	e1a01003 	mov	r1, r3
 c101ef8:	eb0001c7 	bl	c10261c <__aeabi_uidiv>
 c101efc:	e1a03000 	mov	r3, r0
 c101f00:	e5843000 	str	r3, [r4]
	}
	TCON = (TCON & ~(0x7 << 0)) | (1<<3) | (1 << 1);
 c101f04:	e59f305c 	ldr	r3, [pc, #92]	; c101f68 <timer0_open_tick+0x240>
 c101f08:	e59f2058 	ldr	r2, [pc, #88]	; c101f68 <timer0_open_tick+0x240>
 c101f0c:	e5922000 	ldr	r2, [r2]
 c101f10:	e3c2200f 	bic	r2, r2, #15
 c101f14:	e382200a 	orr	r2, r2, #10
 c101f18:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0x7 << 0)) | (1<<3) | (1 << 0);
 c101f1c:	e59f3044 	ldr	r3, [pc, #68]	; c101f68 <timer0_open_tick+0x240>
 c101f20:	e59f2040 	ldr	r2, [pc, #64]	; c101f68 <timer0_open_tick+0x240>
 c101f24:	e5922000 	ldr	r2, [r2]
 c101f28:	e3c2200f 	bic	r2, r2, #15
 c101f2c:	e3822009 	orr	r2, r2, #9
 c101f30:	e5832000 	str	r2, [r3]
 }
 c101f34:	e24bd010 	sub	sp, fp, #16
 c101f38:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c101f3c:	e12fff1e 	bx	lr
 c101f40:	0c7fff54 	.word	0x0c7fff54
 c101f44:	01e00024 	.word	0x01e00024
 c101f48:	01e0000c 	.word	0x01e0000c
 c101f4c:	01d50000 	.word	0x01d50000
 c101f50:	01d50004 	.word	0x01d50004
 c101f54:	01d5000c 	.word	0x01d5000c
 c101f58:	00009c40 	.word	0x00009c40
 c101f5c:	00061a80 	.word	0x00061a80
 c101f60:	003d0900 	.word	0x003d0900
 c101f64:	01e84800 	.word	0x01e84800
 c101f68:	01d50008 	.word	0x01d50008

0c101f6c <timer0_open_ms>:
** Desenmascara globalmente las interrupciones y especÃ­ficamente las interrupciones del timer0
** Configura el timer0 para que genere interrupciones en el modo y con la periodicidad indicadas
** Configura el timer0 para que genere interrupciones en el modo y con la periodicidad indicadas
*/
 void timer0_open_ms( void (*isr)(void), uint16 ms, uint8 mode )
 {
 c101f6c:	e1a0c00d 	mov	ip, sp
 c101f70:	e92dd800 	push	{fp, ip, lr, pc}
 c101f74:	e24cb004 	sub	fp, ip, #4
 c101f78:	e24dd008 	sub	sp, sp, #8
 c101f7c:	e50b0010 	str	r0, [fp, #-16]
 c101f80:	e1a03002 	mov	r3, r2
 c101f84:	e14b11b2 	strh	r1, [fp, #-18]	; 0xffffffee
 c101f88:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
	pISR_TIMER0 = (uint32)isr;
 c101f8c:	e59f30b0 	ldr	r3, [pc, #176]	; c102044 <timer0_open_ms+0xd8>
 c101f90:	e51b2010 	ldr	r2, [fp, #-16]
 c101f94:	e5832000 	str	r2, [r3]
	I_ISPC      = BIT_TIMER0;
 c101f98:	e59f30a8 	ldr	r3, [pc, #168]	; c102048 <timer0_open_ms+0xdc>
 c101f9c:	e3a02a02 	mov	r2, #8192	; 0x2000
 c101fa0:	e5832000 	str	r2, [r3]
	INTMSK &= ~(BIT_GLOBAL | BIT_TIMER0);
 c101fa4:	e59f20a0 	ldr	r2, [pc, #160]	; c10204c <timer0_open_ms+0xe0>
 c101fa8:	e59f309c 	ldr	r3, [pc, #156]	; c10204c <timer0_open_ms+0xe0>
 c101fac:	e5933000 	ldr	r3, [r3]
 c101fb0:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c101fb4:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
 c101fb8:	e5823000 	str	r3, [r2]

	TCFG0 = (TCFG0 & ~(0xff << 0)) | (199 << 0);//PROGRAMA EL TIMER0 A UNA RESOLUCCION DE 100MS
 c101fbc:	e59f308c 	ldr	r3, [pc, #140]	; c102050 <timer0_open_ms+0xe4>
 c101fc0:	e59f2088 	ldr	r2, [pc, #136]	; c102050 <timer0_open_ms+0xe4>
 c101fc4:	e5922000 	ldr	r2, [r2]
 c101fc8:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c101fcc:	e38220c7 	orr	r2, r2, #199	; 0xc7
 c101fd0:	e5832000 	str	r2, [r3]
	TCFG1 = (TCFG1 & ~(0xf << 0)) | (4 << 0); //
 c101fd4:	e59f3078 	ldr	r3, [pc, #120]	; c102054 <timer0_open_ms+0xe8>
 c101fd8:	e59f2074 	ldr	r2, [pc, #116]	; c102054 <timer0_open_ms+0xe8>
 c101fdc:	e5922000 	ldr	r2, [r2]
 c101fe0:	e3c2200f 	bic	r2, r2, #15
 c101fe4:	e3822004 	orr	r2, r2, #4
 c101fe8:	e5832000 	str	r2, [r3]
	TCNTB0 = 10 * ms; //10 intervalos de 100 micro segundos
 c101fec:	e59f1064 	ldr	r1, [pc, #100]	; c102058 <timer0_open_ms+0xec>
 c101ff0:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c101ff4:	e1a03002 	mov	r3, r2
 c101ff8:	e1a03103 	lsl	r3, r3, #2
 c101ffc:	e0833002 	add	r3, r3, r2
 c102000:	e1a03083 	lsl	r3, r3, #1
 c102004:	e5813000 	str	r3, [r1]
	TCON = (TCON & ~(0xf << 0)) | (1 << 1); //stop
 c102008:	e59f304c 	ldr	r3, [pc, #76]	; c10205c <timer0_open_ms+0xf0>
 c10200c:	e59f2048 	ldr	r2, [pc, #72]	; c10205c <timer0_open_ms+0xf0>
 c102010:	e5922000 	ldr	r2, [r2]
 c102014:	e3c2200f 	bic	r2, r2, #15
 c102018:	e3822002 	orr	r2, r2, #2
 c10201c:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 0)) | (1 << 0); //start
 c102020:	e59f3034 	ldr	r3, [pc, #52]	; c10205c <timer0_open_ms+0xf0>
 c102024:	e59f2030 	ldr	r2, [pc, #48]	; c10205c <timer0_open_ms+0xf0>
 c102028:	e5922000 	ldr	r2, [r2]
 c10202c:	e3c2200f 	bic	r2, r2, #15
 c102030:	e3822001 	orr	r2, r2, #1
 c102034:	e5832000 	str	r2, [r3]
 }
 c102038:	e24bd00c 	sub	sp, fp, #12
 c10203c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102040:	e12fff1e 	bx	lr
 c102044:	0c7fff54 	.word	0x0c7fff54
 c102048:	01e00024 	.word	0x01e00024
 c10204c:	01e0000c 	.word	0x01e0000c
 c102050:	01d50000 	.word	0x01d50000
 c102054:	01d50004 	.word	0x01d50004
 c102058:	01d5000c 	.word	0x01d5000c
 c10205c:	01d50008 	.word	0x01d50008

0c102060 <timer0_close>:
  ** Para y pone a 0 todos sus bufferes y registros del timer0
  ** Deshabilita las interrupciones del timer0
  ** Desinstala la RTI del timer0
  */
 void timer0_close( void )
 {
 c102060:	e1a0c00d 	mov	ip, sp
 c102064:	e92dd800 	push	{fp, ip, lr, pc}
 c102068:	e24cb004 	sub	fp, ip, #4
		TCNTB0 = 0;
 c10206c:	e59f306c 	ldr	r3, [pc, #108]	; c1020e0 <timer0_close+0x80>
 c102070:	e3a02000 	mov	r2, #0
 c102074:	e5832000 	str	r2, [r3]
		TCMPB0 = 0;
 c102078:	e59f3064 	ldr	r3, [pc, #100]	; c1020e4 <timer0_close+0x84>
 c10207c:	e3a02000 	mov	r2, #0
 c102080:	e5832000 	str	r2, [r3]
		TCON = (TCON & ~(0xf << 0)) | (1 << 1);
 c102084:	e59f305c 	ldr	r3, [pc, #92]	; c1020e8 <timer0_close+0x88>
 c102088:	e59f2058 	ldr	r2, [pc, #88]	; c1020e8 <timer0_close+0x88>
 c10208c:	e5922000 	ldr	r2, [r2]
 c102090:	e3c2200f 	bic	r2, r2, #15
 c102094:	e3822002 	orr	r2, r2, #2
 c102098:	e5832000 	str	r2, [r3]
		TCON = (TCON & ~(0xf << 0)) | (1 << 0);
 c10209c:	e59f3044 	ldr	r3, [pc, #68]	; c1020e8 <timer0_close+0x88>
 c1020a0:	e59f2040 	ldr	r2, [pc, #64]	; c1020e8 <timer0_close+0x88>
 c1020a4:	e5922000 	ldr	r2, [r2]
 c1020a8:	e3c2200f 	bic	r2, r2, #15
 c1020ac:	e3822001 	orr	r2, r2, #1
 c1020b0:	e5832000 	str	r2, [r3]
		INTMSK |= BIT_TIMER0;
 c1020b4:	e59f3030 	ldr	r3, [pc, #48]	; c1020ec <timer0_close+0x8c>
 c1020b8:	e59f202c 	ldr	r2, [pc, #44]	; c1020ec <timer0_close+0x8c>
 c1020bc:	e5922000 	ldr	r2, [r2]
 c1020c0:	e3822a02 	orr	r2, r2, #8192	; 0x2000
 c1020c4:	e5832000 	str	r2, [r3]
		pISR_TIMER0 = (uint32)isr_TIMER0_dummy;
 c1020c8:	e59f3020 	ldr	r3, [pc, #32]	; c1020f0 <timer0_close+0x90>
 c1020cc:	e59f2020 	ldr	r2, [pc, #32]	; c1020f4 <timer0_close+0x94>
 c1020d0:	e5832000 	str	r2, [r3]

 }
 c1020d4:	e24bd00c 	sub	sp, fp, #12
 c1020d8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1020dc:	e12fff1e 	bx	lr
 c1020e0:	01d5000c 	.word	0x01d5000c
 c1020e4:	01d50010 	.word	0x01d50010
 c1020e8:	01d50008 	.word	0x01d50008
 c1020ec:	01e0000c 	.word	0x01e0000c
 c1020f0:	0c7fff54 	.word	0x0c7fff54
 c1020f4:	0c101514 	.word	0x0c101514

0c1020f8 <uart0_init>:
#include <s3c44b0x.h>
#include <uart.h>

void uart0_init(void) {
 c1020f8:	e1a0c00d 	mov	ip, sp
 c1020fc:	e92dd800 	push	{fp, ip, lr, pc}
 c102100:	e24cb004 	sub	fp, ip, #4
	UFCON0 = 0x1;
 c102104:	e59f3040 	ldr	r3, [pc, #64]	; c10214c <uart0_init+0x54>
 c102108:	e3a02001 	mov	r2, #1
 c10210c:	e5832000 	str	r2, [r3]
	UMCON0 = 0x0;
 c102110:	e59f3038 	ldr	r3, [pc, #56]	; c102150 <uart0_init+0x58>
 c102114:	e3a02000 	mov	r2, #0
 c102118:	e5832000 	str	r2, [r3]
	ULCON0 = (0 << 6) | (0 << 3) | (0 << 2) | (3);
 c10211c:	e3a0361d 	mov	r3, #30408704	; 0x1d00000
 c102120:	e3a02003 	mov	r2, #3
 c102124:	e5832000 	str	r2, [r3]
	UBRDIV0 = 0x22;
 c102128:	e59f3024 	ldr	r3, [pc, #36]	; c102154 <uart0_init+0x5c>
 c10212c:	e3a02022 	mov	r2, #34	; 0x22
 c102130:	e5832000 	str	r2, [r3]
	UCON0 = 0x5;
 c102134:	e59f301c 	ldr	r3, [pc, #28]	; c102158 <uart0_init+0x60>
 c102138:	e3a02005 	mov	r2, #5
 c10213c:	e5832000 	str	r2, [r3]
}
 c102140:	e24bd00c 	sub	sp, fp, #12
 c102144:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102148:	e12fff1e 	bx	lr
 c10214c:	01d00008 	.word	0x01d00008
 c102150:	01d0000c 	.word	0x01d0000c
 c102154:	01d00028 	.word	0x01d00028
 c102158:	01d00004 	.word	0x01d00004

0c10215c <uart0_putchar>:

//envia un caracter
void uart0_putchar(char ch) {
 c10215c:	e1a0c00d 	mov	ip, sp
 c102160:	e92dd800 	push	{fp, ip, lr, pc}
 c102164:	e24cb004 	sub	fp, ip, #4
 c102168:	e24dd008 	sub	sp, sp, #8
 c10216c:	e1a03000 	mov	r3, r0
 c102170:	e54b300d 	strb	r3, [fp, #-13]
	//Esperar mientras UFSTAT0[9] == 1 si se usa FIFO
	while (((UFSTAT0>>9) & 1) == 1)//espera mientras Rx FIFO no este llena
 c102174:	e1a00000 	nop			; (mov r0, r0)
 c102178:	e59f302c 	ldr	r3, [pc, #44]	; c1021ac <uart0_putchar+0x50>
 c10217c:	e5933000 	ldr	r3, [r3]
 c102180:	e1a034a3 	lsr	r3, r3, #9
 c102184:	e2033001 	and	r3, r3, #1
 c102188:	e20330ff 	and	r3, r3, #255	; 0xff
 c10218c:	e3530000 	cmp	r3, #0
 c102190:	1afffff8 	bne	c102178 <uart0_putchar+0x1c>
		;
	UTXH0 = ch;
 c102194:	e59f3014 	ldr	r3, [pc, #20]	; c1021b0 <uart0_putchar+0x54>
 c102198:	e55b200d 	ldrb	r2, [fp, #-13]
 c10219c:	e5832000 	str	r2, [r3]
}
 c1021a0:	e24bd00c 	sub	sp, fp, #12
 c1021a4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1021a8:	e12fff1e 	bx	lr
 c1021ac:	01d00018 	.word	0x01d00018
 c1021b0:	01d00020 	.word	0x01d00020

0c1021b4 <uart0_getchar>:

//Espera la recepción de un carácter y lo devuelve
char uart0_getchar(void) {
 c1021b4:	e1a0c00d 	mov	ip, sp
 c1021b8:	e92dd800 	push	{fp, ip, lr, pc}
 c1021bc:	e24cb004 	sub	fp, ip, #4
 c1021c0:	e24dd008 	sub	sp, sp, #8

	while ((UFSTAT0 & 0xF) == 0)//se espera mientras Rx FIFO este vacía
 c1021c4:	e1a00000 	nop			; (mov r0, r0)
 c1021c8:	e59f302c 	ldr	r3, [pc, #44]	; c1021fc <uart0_getchar+0x48>
 c1021cc:	e5933000 	ldr	r3, [r3]
 c1021d0:	e203300f 	and	r3, r3, #15
 c1021d4:	e3530000 	cmp	r3, #0
 c1021d8:	0afffffa 	beq	c1021c8 <uart0_getchar+0x14>
		;
	char s = URXH0;
 c1021dc:	e59f301c 	ldr	r3, [pc, #28]	; c102200 <uart0_getchar+0x4c>
 c1021e0:	e5933000 	ldr	r3, [r3]
 c1021e4:	e54b300d 	strb	r3, [fp, #-13]
	return s;
 c1021e8:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c1021ec:	e1a00003 	mov	r0, r3
 c1021f0:	e24bd00c 	sub	sp, fp, #12
 c1021f4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1021f8:	e12fff1e 	bx	lr
 c1021fc:	01d00018 	.word	0x01d00018
 c102200:	01d00024 	.word	0x01d00024

0c102204 <uart0_puts>:

//envia una cadena de caracteres
void uart0_puts(char *s) {
 c102204:	e1a0c00d 	mov	ip, sp
 c102208:	e92dd800 	push	{fp, ip, lr, pc}
 c10220c:	e24cb004 	sub	fp, ip, #4
 c102210:	e24dd008 	sub	sp, sp, #8
 c102214:	e50b0010 	str	r0, [fp, #-16]
	while ((*s) != '\0') {
 c102218:	ea000006 	b	c102238 <uart0_puts+0x34>
		uart0_putchar(*s);
 c10221c:	e51b3010 	ldr	r3, [fp, #-16]
 c102220:	e5d33000 	ldrb	r3, [r3]
 c102224:	e1a00003 	mov	r0, r3
 c102228:	ebffffcb 	bl	c10215c <uart0_putchar>
		s++;
 c10222c:	e51b3010 	ldr	r3, [fp, #-16]
 c102230:	e2833001 	add	r3, r3, #1
 c102234:	e50b3010 	str	r3, [fp, #-16]
	return s;
}

//envia una cadena de caracteres
void uart0_puts(char *s) {
	while ((*s) != '\0') {
 c102238:	e51b3010 	ldr	r3, [fp, #-16]
 c10223c:	e5d33000 	ldrb	r3, [r3]
 c102240:	e3530000 	cmp	r3, #0
 c102244:	1afffff4 	bne	c10221c <uart0_puts+0x18>
		uart0_putchar(*s);
		s++;
	}
}
 c102248:	e24bd00c 	sub	sp, fp, #12
 c10224c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102250:	e12fff1e 	bx	lr

0c102254 <uart0_putint>:

/*Envía un entero con signo como una cadena de dígitos decimales*/
void uart0_putint(int32 i) {
 c102254:	e1a0c00d 	mov	ip, sp
 c102258:	e92dd800 	push	{fp, ip, lr, pc}
 c10225c:	e24cb004 	sub	fp, ip, #4
 c102260:	e24dd020 	sub	sp, sp, #32
 c102264:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
	char buf[9 + 1 + 1];
	char *p = buf + 9 + 1;
 c102268:	e24b3020 	sub	r3, fp, #32
 c10226c:	e283300a 	add	r3, r3, #10
 c102270:	e50b3010 	str	r3, [fp, #-16]
	char sig = '0';
 c102274:	e3a03030 	mov	r3, #48	; 0x30
 c102278:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	int8 digito;

	*p = '\0';
 c10227c:	e51b3010 	ldr	r3, [fp, #-16]
 c102280:	e3a02000 	mov	r2, #0
 c102284:	e5c32000 	strb	r2, [r3]

	do {
		if (i < 0) {
 c102288:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c10228c:	e3530000 	cmp	r3, #0
 c102290:	aa000004 	bge	c1022a8 <uart0_putint+0x54>
			sig = '1';
 c102294:	e3a03031 	mov	r3, #49	; 0x31
 c102298:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
			i *= -1;
 c10229c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c1022a0:	e2633000 	rsb	r3, r3, #0
 c1022a4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
		}
		digito = i % 10;
 c1022a8:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
 c1022ac:	e59f30a8 	ldr	r3, [pc, #168]	; c10235c <uart0_putint+0x108>
 c1022b0:	e0c32391 	smull	r2, r3, r1, r3
 c1022b4:	e1a02143 	asr	r2, r3, #2
 c1022b8:	e1a03fc1 	asr	r3, r1, #31
 c1022bc:	e0632002 	rsb	r2, r3, r2
 c1022c0:	e1a03002 	mov	r3, r2
 c1022c4:	e1a03103 	lsl	r3, r3, #2
 c1022c8:	e0833002 	add	r3, r3, r2
 c1022cc:	e1a03083 	lsl	r3, r3, #1
 c1022d0:	e0632001 	rsb	r2, r3, r1
 c1022d4:	e1a03002 	mov	r3, r2
 c1022d8:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
		*--p = '0' + digito; //almacena digito
 c1022dc:	e51b3010 	ldr	r3, [fp, #-16]
 c1022e0:	e2433001 	sub	r3, r3, #1
 c1022e4:	e50b3010 	str	r3, [fp, #-16]
 c1022e8:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c1022ec:	e2833030 	add	r3, r3, #48	; 0x30
 c1022f0:	e20320ff 	and	r2, r3, #255	; 0xff
 c1022f4:	e51b3010 	ldr	r3, [fp, #-16]
 c1022f8:	e5c32000 	strb	r2, [r3]
		i = i / 10;
 c1022fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102300:	e59f2054 	ldr	r2, [pc, #84]	; c10235c <uart0_putint+0x108>
 c102304:	e0c21293 	smull	r1, r2, r3, r2
 c102308:	e1a02142 	asr	r2, r2, #2
 c10230c:	e1a03fc3 	asr	r3, r3, #31
 c102310:	e0633002 	rsb	r3, r3, r2
 c102314:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
	} while (i);
 c102318:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c10231c:	e3530000 	cmp	r3, #0
 c102320:	1affffd8 	bne	c102288 <uart0_putint+0x34>
	if (sig == '1') {
 c102324:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102328:	e3530031 	cmp	r3, #49	; 0x31
 c10232c:	1a000005 	bne	c102348 <uart0_putint+0xf4>
		*--p = '-'; // pone signo
 c102330:	e51b3010 	ldr	r3, [fp, #-16]
 c102334:	e2433001 	sub	r3, r3, #1
 c102338:	e50b3010 	str	r3, [fp, #-16]
 c10233c:	e51b3010 	ldr	r3, [fp, #-16]
 c102340:	e3a0202d 	mov	r2, #45	; 0x2d
 c102344:	e5c32000 	strb	r2, [r3]
	}
	uart0_puts(p); // envia cadena
 c102348:	e51b0010 	ldr	r0, [fp, #-16]
 c10234c:	ebffffac 	bl	c102204 <uart0_puts>
}
 c102350:	e24bd00c 	sub	sp, fp, #12
 c102354:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102358:	e12fff1e 	bx	lr
 c10235c:	66666667 	.word	0x66666667

0c102360 <uart0_puthex>:

/*Envía un entero sin signo como una cadena de dígitos hexadecimales*/
void uart0_puthex(uint32 i) {
 c102360:	e1a0c00d 	mov	ip, sp
 c102364:	e92dd800 	push	{fp, ip, lr, pc}
 c102368:	e24cb004 	sub	fp, ip, #4
 c10236c:	e24dd018 	sub	sp, sp, #24
 c102370:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
	char buf[8 + 1];
	char *p = buf + 8; //Los caracteres se	generan	comenzando	por	el	menos	significativo
 c102374:	e24b301c 	sub	r3, fp, #28
 c102378:	e2833008 	add	r3, r3, #8
 c10237c:	e50b3010 	str	r3, [fp, #-16]
	uint8 c;

	*p = '\0';  // fin de cadena
 c102380:	e51b3010 	ldr	r3, [fp, #-16]
 c102384:	e3a02000 	mov	r2, #0
 c102388:	e5c32000 	strb	r2, [r3]

	do {
		c = i & 0xf;	// resto de division /16
 c10238c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102390:	e20330ff 	and	r3, r3, #255	; 0xff
 c102394:	e203300f 	and	r3, r3, #15
 c102398:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		if (c < 10)
 c10239c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1023a0:	e3530009 	cmp	r3, #9
 c1023a4:	8a000008 	bhi	c1023cc <uart0_puthex+0x6c>
			*--p = '0' + c;	//almacena caracter
 c1023a8:	e51b3010 	ldr	r3, [fp, #-16]
 c1023ac:	e2433001 	sub	r3, r3, #1
 c1023b0:	e50b3010 	str	r3, [fp, #-16]
 c1023b4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1023b8:	e2833030 	add	r3, r3, #48	; 0x30
 c1023bc:	e20320ff 	and	r2, r3, #255	; 0xff
 c1023c0:	e51b3010 	ldr	r3, [fp, #-16]
 c1023c4:	e5c32000 	strb	r2, [r3]
 c1023c8:	ea000007 	b	c1023ec <uart0_puthex+0x8c>
		else
			*--p = 'a' + c - 10;// alamacena caracter
 c1023cc:	e51b3010 	ldr	r3, [fp, #-16]
 c1023d0:	e2433001 	sub	r3, r3, #1
 c1023d4:	e50b3010 	str	r3, [fp, #-16]
 c1023d8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1023dc:	e2833057 	add	r3, r3, #87	; 0x57
 c1023e0:	e20320ff 	and	r2, r3, #255	; 0xff
 c1023e4:	e51b3010 	ldr	r3, [fp, #-16]
 c1023e8:	e5c32000 	strb	r2, [r3]
		i = i >> 4; // division por 16
 c1023ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1023f0:	e1a03223 	lsr	r3, r3, #4
 c1023f4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
	} while (i);
 c1023f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1023fc:	e3530000 	cmp	r3, #0
 c102400:	1affffe1 	bne	c10238c <uart0_puthex+0x2c>

	uart0_puts(p); // envia cadena
 c102404:	e51b0010 	ldr	r0, [fp, #-16]
 c102408:	ebffff7d 	bl	c102204 <uart0_puts>
}
 c10240c:	e24bd00c 	sub	sp, fp, #12
 c102410:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102414:	e12fff1e 	bx	lr

0c102418 <uart0_gets>:

/*Espera la recepción de una cadena y la almacena.*/
void uart0_gets(char *s) {/*Los caracteres se reciben y almacenan de uno en uno hasta detectar el fin de línea LF ('\n') que no se almacena.
 c102418:	e1a0c00d 	mov	ip, sp
 c10241c:	e92dd800 	push	{fp, ip, lr, pc}
 c102420:	e24cb004 	sub	fp, ip, #4
 c102424:	e24dd008 	sub	sp, sp, #8
 c102428:	e50b0010 	str	r0, [fp, #-16]
 En su lugar se almacena el centinela fin de cadena ('\0')*/

	do{
		*s = uart0_getchar();
 c10242c:	ebffff60 	bl	c1021b4 <uart0_getchar>
 c102430:	e1a03000 	mov	r3, r0
 c102434:	e1a02003 	mov	r2, r3
 c102438:	e51b3010 	ldr	r3, [fp, #-16]
 c10243c:	e5c32000 	strb	r2, [r3]
		if((*s) != '\n')
 c102440:	e51b3010 	ldr	r3, [fp, #-16]
 c102444:	e5d33000 	ldrb	r3, [r3]
 c102448:	e353000a 	cmp	r3, #10
 c10244c:	0a000002 	beq	c10245c <uart0_gets+0x44>
				s++;
 c102450:	e51b3010 	ldr	r3, [fp, #-16]
 c102454:	e2833001 	add	r3, r3, #1
 c102458:	e50b3010 	str	r3, [fp, #-16]
	}
	while ((*s) != '\n');
 c10245c:	e51b3010 	ldr	r3, [fp, #-16]
 c102460:	e5d33000 	ldrb	r3, [r3]
 c102464:	e353000a 	cmp	r3, #10
 c102468:	1affffef 	bne	c10242c <uart0_gets+0x14>
	*s = '\0';
 c10246c:	e51b3010 	ldr	r3, [fp, #-16]
 c102470:	e3a02000 	mov	r2, #0
 c102474:	e5c32000 	strb	r2, [r3]
}
 c102478:	e24bd00c 	sub	sp, fp, #12
 c10247c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102480:	e12fff1e 	bx	lr

0c102484 <uart0_getint>:

/*Espera la recepción de una cadena de dígitos decimales que interpreta como un entero con signo que devuelve*/
int32 uart0_getint(void) {
 c102484:	e1a0c00d 	mov	ip, sp
 c102488:	e92dd800 	push	{fp, ip, lr, pc}
 c10248c:	e24cb004 	sub	fp, ip, #4
 c102490:	e24dd018 	sub	sp, sp, #24
//	}
//
//	return numero*signo;

	char buf[10+1+1];
	char *p=buf;
 c102494:	e24b3024 	sub	r3, fp, #36	; 0x24
 c102498:	e50b3010 	str	r3, [fp, #-16]
	int32 numero=0;
 c10249c:	e3a03000 	mov	r3, #0
 c1024a0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	int8 signo=1;
 c1024a4:	e3a03001 	mov	r3, #1
 c1024a8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	uart0_gets(p);
 c1024ac:	e51b0010 	ldr	r0, [fp, #-16]
 c1024b0:	ebffffd8 	bl	c102418 <uart0_gets>
	if((*p)=='-'){
 c1024b4:	e51b3010 	ldr	r3, [fp, #-16]
 c1024b8:	e5d33000 	ldrb	r3, [r3]
 c1024bc:	e353002d 	cmp	r3, #45	; 0x2d
 c1024c0:	1a000014 	bne	c102518 <uart0_getint+0x94>
		signo=-1;
 c1024c4:	e3e03000 	mvn	r3, #0
 c1024c8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
		++p;
 c1024cc:	e51b3010 	ldr	r3, [fp, #-16]
 c1024d0:	e2833001 	add	r3, r3, #1
 c1024d4:	e50b3010 	str	r3, [fp, #-16]
	}
	while((*p)!='\0'){
 c1024d8:	ea00000f 	b	c10251c <uart0_getint+0x98>
		numero = numero * 10 + ((*p) - '0'); //acumulamos digitos
 c1024dc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c1024e0:	e1a03002 	mov	r3, r2
 c1024e4:	e1a03103 	lsl	r3, r3, #2
 c1024e8:	e0833002 	add	r3, r3, r2
 c1024ec:	e1a03083 	lsl	r3, r3, #1
 c1024f0:	e1a02003 	mov	r2, r3
 c1024f4:	e51b3010 	ldr	r3, [fp, #-16]
 c1024f8:	e5d33000 	ldrb	r3, [r3]
 c1024fc:	e2433030 	sub	r3, r3, #48	; 0x30
 c102500:	e0823003 	add	r3, r2, r3
 c102504:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		++p;
 c102508:	e51b3010 	ldr	r3, [fp, #-16]
 c10250c:	e2833001 	add	r3, r3, #1
 c102510:	e50b3010 	str	r3, [fp, #-16]
 c102514:	ea000000 	b	c10251c <uart0_getint+0x98>
	uart0_gets(p);
	if((*p)=='-'){
		signo=-1;
		++p;
	}
	while((*p)!='\0'){
 c102518:	e1a00000 	nop			; (mov r0, r0)
 c10251c:	e51b3010 	ldr	r3, [fp, #-16]
 c102520:	e5d33000 	ldrb	r3, [r3]
 c102524:	e3530000 	cmp	r3, #0
 c102528:	1affffeb 	bne	c1024dc <uart0_getint+0x58>
		numero = numero * 10 + ((*p) - '0'); //acumulamos digitos
		++p;
	}

	return signo*numero;
 c10252c:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
 c102530:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c102534:	e0030392 	mul	r3, r2, r3
}
 c102538:	e1a00003 	mov	r0, r3
 c10253c:	e24bd00c 	sub	sp, fp, #12
 c102540:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102544:	e12fff1e 	bx	lr

0c102548 <uart0_gethex>:

/*Espera la recepción de una cadena de dígitos hexadecimales que interpreta como un entero sin signo que devuelve*/
uint32 uart0_gethex(void) {
 c102548:	e1a0c00d 	mov	ip, sp
 c10254c:	e92dd800 	push	{fp, ip, lr, pc}
 c102550:	e24cb004 	sub	fp, ip, #4
 c102554:	e24dd008 	sub	sp, sp, #8
	uint32 numero = 0;
 c102558:	e3a03000 	mov	r3, #0
 c10255c:	e50b3010 	str	r3, [fp, #-16]
	char c ;
	c = uart0_getchar(); //cogemos digito
 c102560:	ebffff13 	bl	c1021b4 <uart0_getchar>
 c102564:	e1a03000 	mov	r3, r0
 c102568:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

	if (c != '\n') {
 c10256c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102570:	e353000a 	cmp	r3, #10
 c102574:	0a000023 	beq	c102608 <uart0_gethex+0xc0>
		do {
			if (c-'0' < 10) {
 c102578:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10257c:	e2433030 	sub	r3, r3, #48	; 0x30
 c102580:	e3530009 	cmp	r3, #9
 c102584:	ca000006 	bgt	c1025a4 <uart0_gethex+0x5c>
				numero = numero * 16 + (c - '0'); // acumulamos digitos entre [0:9]
 c102588:	e51b3010 	ldr	r3, [fp, #-16]
 c10258c:	e1a02203 	lsl	r2, r3, #4
 c102590:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102594:	e0823003 	add	r3, r2, r3
 c102598:	e2433030 	sub	r3, r3, #48	; 0x30
 c10259c:	e50b3010 	str	r3, [fp, #-16]
 c1025a0:	ea000012 	b	c1025f0 <uart0_gethex+0xa8>
			}else if(c >= 'a' && c<= 'f'){
 c1025a4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1025a8:	e3530060 	cmp	r3, #96	; 0x60
 c1025ac:	9a000009 	bls	c1025d8 <uart0_gethex+0x90>
 c1025b0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1025b4:	e3530066 	cmp	r3, #102	; 0x66
 c1025b8:	8a000006 	bhi	c1025d8 <uart0_gethex+0x90>
				numero = numero * 16 + (c - 'a' + 10);
 c1025bc:	e51b3010 	ldr	r3, [fp, #-16]
 c1025c0:	e1a02203 	lsl	r2, r3, #4
 c1025c4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1025c8:	e0823003 	add	r3, r2, r3
 c1025cc:	e2433057 	sub	r3, r3, #87	; 0x57
 c1025d0:	e50b3010 	str	r3, [fp, #-16]
 c1025d4:	ea000005 	b	c1025f0 <uart0_gethex+0xa8>
			}
			else {
				numero = numero * 16 + (c - 'A' + 10); //// acumulamos digitos entre [A:F]
 c1025d8:	e51b3010 	ldr	r3, [fp, #-16]
 c1025dc:	e1a02203 	lsl	r2, r3, #4
 c1025e0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1025e4:	e0823003 	add	r3, r2, r3
 c1025e8:	e2433037 	sub	r3, r3, #55	; 0x37
 c1025ec:	e50b3010 	str	r3, [fp, #-16]
			}
			c = uart0_getchar();
 c1025f0:	ebfffeef 	bl	c1021b4 <uart0_getchar>
 c1025f4:	e1a03000 	mov	r3, r0
 c1025f8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		} while (c != '\n');
 c1025fc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102600:	e353000a 	cmp	r3, #10
 c102604:	1affffdb 	bne	c102578 <uart0_gethex+0x30>
	}

	return numero;
 c102608:	e51b3010 	ldr	r3, [fp, #-16]
}
 c10260c:	e1a00003 	mov	r0, r3
 c102610:	e24bd00c 	sub	sp, fp, #12
 c102614:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102618:	e12fff1e 	bx	lr

0c10261c <__aeabi_uidiv>:
 c10261c:	e2512001 	subs	r2, r1, #1
 c102620:	012fff1e 	bxeq	lr
 c102624:	3a000036 	bcc	c102704 <__aeabi_uidiv+0xe8>
 c102628:	e1500001 	cmp	r0, r1
 c10262c:	9a000022 	bls	c1026bc <__aeabi_uidiv+0xa0>
 c102630:	e1110002 	tst	r1, r2
 c102634:	0a000023 	beq	c1026c8 <__aeabi_uidiv+0xac>
 c102638:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 c10263c:	01a01181 	lsleq	r1, r1, #3
 c102640:	03a03008 	moveq	r3, #8
 c102644:	13a03001 	movne	r3, #1
 c102648:	e3510201 	cmp	r1, #268435456	; 0x10000000
 c10264c:	31510000 	cmpcc	r1, r0
 c102650:	31a01201 	lslcc	r1, r1, #4
 c102654:	31a03203 	lslcc	r3, r3, #4
 c102658:	3afffffa 	bcc	c102648 <__aeabi_uidiv+0x2c>
 c10265c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 c102660:	31510000 	cmpcc	r1, r0
 c102664:	31a01081 	lslcc	r1, r1, #1
 c102668:	31a03083 	lslcc	r3, r3, #1
 c10266c:	3afffffa 	bcc	c10265c <__aeabi_uidiv+0x40>
 c102670:	e3a02000 	mov	r2, #0
 c102674:	e1500001 	cmp	r0, r1
 c102678:	20400001 	subcs	r0, r0, r1
 c10267c:	21822003 	orrcs	r2, r2, r3
 c102680:	e15000a1 	cmp	r0, r1, lsr #1
 c102684:	204000a1 	subcs	r0, r0, r1, lsr #1
 c102688:	218220a3 	orrcs	r2, r2, r3, lsr #1
 c10268c:	e1500121 	cmp	r0, r1, lsr #2
 c102690:	20400121 	subcs	r0, r0, r1, lsr #2
 c102694:	21822123 	orrcs	r2, r2, r3, lsr #2
 c102698:	e15001a1 	cmp	r0, r1, lsr #3
 c10269c:	204001a1 	subcs	r0, r0, r1, lsr #3
 c1026a0:	218221a3 	orrcs	r2, r2, r3, lsr #3
 c1026a4:	e3500000 	cmp	r0, #0
 c1026a8:	11b03223 	lsrsne	r3, r3, #4
 c1026ac:	11a01221 	lsrne	r1, r1, #4
 c1026b0:	1affffef 	bne	c102674 <__aeabi_uidiv+0x58>
 c1026b4:	e1a00002 	mov	r0, r2
 c1026b8:	e12fff1e 	bx	lr
 c1026bc:	03a00001 	moveq	r0, #1
 c1026c0:	13a00000 	movne	r0, #0
 c1026c4:	e12fff1e 	bx	lr
 c1026c8:	e3510801 	cmp	r1, #65536	; 0x10000
 c1026cc:	21a01821 	lsrcs	r1, r1, #16
 c1026d0:	23a02010 	movcs	r2, #16
 c1026d4:	33a02000 	movcc	r2, #0
 c1026d8:	e3510c01 	cmp	r1, #256	; 0x100
 c1026dc:	21a01421 	lsrcs	r1, r1, #8
 c1026e0:	22822008 	addcs	r2, r2, #8
 c1026e4:	e3510010 	cmp	r1, #16
 c1026e8:	21a01221 	lsrcs	r1, r1, #4
 c1026ec:	22822004 	addcs	r2, r2, #4
 c1026f0:	e3510004 	cmp	r1, #4
 c1026f4:	82822003 	addhi	r2, r2, #3
 c1026f8:	908220a1 	addls	r2, r2, r1, lsr #1
 c1026fc:	e1a00230 	lsr	r0, r0, r2
 c102700:	e12fff1e 	bx	lr
 c102704:	e3500000 	cmp	r0, #0
 c102708:	13e00000 	mvnne	r0, #0
 c10270c:	ea000007 	b	c102730 <__aeabi_idiv0>

0c102710 <__aeabi_uidivmod>:
 c102710:	e3510000 	cmp	r1, #0
 c102714:	0afffffa 	beq	c102704 <__aeabi_uidiv+0xe8>
 c102718:	e92d4003 	push	{r0, r1, lr}
 c10271c:	ebffffbe 	bl	c10261c <__aeabi_uidiv>
 c102720:	e8bd4006 	pop	{r1, r2, lr}
 c102724:	e0030092 	mul	r3, r2, r0
 c102728:	e0411003 	sub	r1, r1, r3
 c10272c:	e12fff1e 	bx	lr

0c102730 <__aeabi_idiv0>:
 c102730:	e12fff1e 	bx	lr

0c102734 <__aeabi_uldivmod>:
 c102734:	e3530000 	cmp	r3, #0
 c102738:	03520000 	cmpeq	r2, #0
 c10273c:	1a000004 	bne	c102754 <__aeabi_uldivmod+0x20>
 c102740:	e3510000 	cmp	r1, #0
 c102744:	03500000 	cmpeq	r0, #0
 c102748:	13e01000 	mvnne	r1, #0
 c10274c:	13e00000 	mvnne	r0, #0
 c102750:	eafffff6 	b	c102730 <__aeabi_idiv0>
 c102754:	e24dd008 	sub	sp, sp, #8
 c102758:	e92d6000 	push	{sp, lr}
 c10275c:	eb000013 	bl	c1027b0 <__gnu_uldivmod_helper>
 c102760:	e59de004 	ldr	lr, [sp, #4]
 c102764:	e28dd008 	add	sp, sp, #8
 c102768:	e8bd000c 	pop	{r2, r3}
 c10276c:	e12fff1e 	bx	lr

0c102770 <__gnu_ldivmod_helper>:
 c102770:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
 c102774:	e1a04002 	mov	r4, r2
 c102778:	e1a07003 	mov	r7, r3
 c10277c:	e1a05000 	mov	r5, r0
 c102780:	e1a06001 	mov	r6, r1
 c102784:	eb000019 	bl	c1027f0 <__divdi3>
 c102788:	e0070790 	mul	r7, r0, r7
 c10278c:	e0832490 	umull	r2, r3, r0, r4
 c102790:	e0247491 	mla	r4, r1, r4, r7
 c102794:	e0843003 	add	r3, r4, r3
 c102798:	e0555002 	subs	r5, r5, r2
 c10279c:	e0c66003 	sbc	r6, r6, r3
 c1027a0:	e59d3018 	ldr	r3, [sp, #24]
 c1027a4:	e8830060 	stm	r3, {r5, r6}
 c1027a8:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
 c1027ac:	e12fff1e 	bx	lr

0c1027b0 <__gnu_uldivmod_helper>:
 c1027b0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
 c1027b4:	e1a04002 	mov	r4, r2
 c1027b8:	e1a07003 	mov	r7, r3
 c1027bc:	e1a05000 	mov	r5, r0
 c1027c0:	e1a06001 	mov	r6, r1
 c1027c4:	eb000133 	bl	c102c98 <__udivdi3>
 c1027c8:	e0070790 	mul	r7, r0, r7
 c1027cc:	e0832490 	umull	r2, r3, r0, r4
 c1027d0:	e0247491 	mla	r4, r1, r4, r7
 c1027d4:	e0843003 	add	r3, r4, r3
 c1027d8:	e0555002 	subs	r5, r5, r2
 c1027dc:	e0c66003 	sbc	r6, r6, r3
 c1027e0:	e59d3018 	ldr	r3, [sp, #24]
 c1027e4:	e8830060 	stm	r3, {r5, r6}
 c1027e8:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
 c1027ec:	e12fff1e 	bx	lr

0c1027f0 <__divdi3>:
 c1027f0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c1027f4:	e3510000 	cmp	r1, #0
 c1027f8:	e24dd014 	sub	sp, sp, #20
 c1027fc:	e1a0c003 	mov	ip, r3
 c102800:	a3a07000 	movge	r7, #0
 c102804:	ba000094 	blt	c102a5c <__divdi3+0x26c>
 c102808:	e35c0000 	cmp	ip, #0
 c10280c:	ba00008e 	blt	c102a4c <__divdi3+0x25c>
 c102810:	e253a000 	subs	sl, r3, #0
 c102814:	e1a0b000 	mov	fp, r0
 c102818:	e1a08001 	mov	r8, r1
 c10281c:	e1a09002 	mov	r9, r2
 c102820:	e1a04002 	mov	r4, r2
 c102824:	e1a05000 	mov	r5, r0
 c102828:	e1a06001 	mov	r6, r1
 c10282c:	1a00003e 	bne	c10292c <__divdi3+0x13c>
 c102830:	e1520001 	cmp	r2, r1
 c102834:	9a00004c 	bls	c10296c <__divdi3+0x17c>
 c102838:	e1a00002 	mov	r0, r2
 c10283c:	eb000222 	bl	c1030cc <__clzsi2>
 c102840:	e3500000 	cmp	r0, #0
 c102844:	12603020 	rsbne	r3, r0, #32
 c102848:	11a0333b 	lsrne	r3, fp, r3
 c10284c:	11a04019 	lslne	r4, r9, r0
 c102850:	11836018 	orrne	r6, r3, r8, lsl r0
 c102854:	e1a09824 	lsr	r9, r4, #16
 c102858:	11a0501b 	lslne	r5, fp, r0
 c10285c:	e1a01009 	mov	r1, r9
 c102860:	e1a00006 	mov	r0, r6
 c102864:	ebffff6c 	bl	c10261c <__aeabi_uidiv>
 c102868:	e1a01009 	mov	r1, r9
 c10286c:	e1a0a000 	mov	sl, r0
 c102870:	e1a00006 	mov	r0, r6
 c102874:	ebffffa5 	bl	c102710 <__aeabi_uidivmod>
 c102878:	e1a08804 	lsl	r8, r4, #16
 c10287c:	e1a08828 	lsr	r8, r8, #16
 c102880:	e0030a98 	mul	r3, r8, sl
 c102884:	e1a0b825 	lsr	fp, r5, #16
 c102888:	e18bb801 	orr	fp, fp, r1, lsl #16
 c10288c:	e153000b 	cmp	r3, fp
 c102890:	9a000005 	bls	c1028ac <__divdi3+0xbc>
 c102894:	e09bb004 	adds	fp, fp, r4
 c102898:	e24aa001 	sub	sl, sl, #1
 c10289c:	2a000002 	bcs	c1028ac <__divdi3+0xbc>
 c1028a0:	e153000b 	cmp	r3, fp
 c1028a4:	824aa001 	subhi	sl, sl, #1
 c1028a8:	808bb004 	addhi	fp, fp, r4
 c1028ac:	e063b00b 	rsb	fp, r3, fp
 c1028b0:	e1a01009 	mov	r1, r9
 c1028b4:	e1a0000b 	mov	r0, fp
 c1028b8:	ebffff57 	bl	c10261c <__aeabi_uidiv>
 c1028bc:	e1a01009 	mov	r1, r9
 c1028c0:	e1a06000 	mov	r6, r0
 c1028c4:	e1a0000b 	mov	r0, fp
 c1028c8:	ebffff90 	bl	c102710 <__aeabi_uidivmod>
 c1028cc:	e0080896 	mul	r8, r6, r8
 c1028d0:	e1a00805 	lsl	r0, r5, #16
 c1028d4:	e1a05820 	lsr	r5, r0, #16
 c1028d8:	e1855801 	orr	r5, r5, r1, lsl #16
 c1028dc:	e1580005 	cmp	r8, r5
 c1028e0:	9a000004 	bls	c1028f8 <__divdi3+0x108>
 c1028e4:	e0955004 	adds	r5, r5, r4
 c1028e8:	e2466001 	sub	r6, r6, #1
 c1028ec:	2a000001 	bcs	c1028f8 <__divdi3+0x108>
 c1028f0:	e1580005 	cmp	r8, r5
 c1028f4:	82466001 	subhi	r6, r6, #1
 c1028f8:	e186680a 	orr	r6, r6, sl, lsl #16
 c1028fc:	e3a09000 	mov	r9, #0
 c102900:	e3570000 	cmp	r7, #0
 c102904:	e1a03006 	mov	r3, r6
 c102908:	e1a04009 	mov	r4, r9
 c10290c:	0a000001 	beq	c102918 <__divdi3+0x128>
 c102910:	e2733000 	rsbs	r3, r3, #0
 c102914:	e2e44000 	rsc	r4, r4, #0
 c102918:	e1a00003 	mov	r0, r3
 c10291c:	e1a01004 	mov	r1, r4
 c102920:	e28dd014 	add	sp, sp, #20
 c102924:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c102928:	e12fff1e 	bx	lr
 c10292c:	e15a0001 	cmp	sl, r1
 c102930:	83a09000 	movhi	r9, #0
 c102934:	81a06009 	movhi	r6, r9
 c102938:	8afffff0 	bhi	c102900 <__divdi3+0x110>
 c10293c:	e1a00003 	mov	r0, r3
 c102940:	eb0001e1 	bl	c1030cc <__clzsi2>
 c102944:	e2504000 	subs	r4, r0, #0
 c102948:	1a00007a 	bne	c102b38 <__divdi3+0x348>
 c10294c:	e15a0008 	cmp	sl, r8
 c102950:	2159000b 	cmpcs	r9, fp
 c102954:	83a09000 	movhi	r9, #0
 c102958:	93a09001 	movls	r9, #1
 c10295c:	93a06001 	movls	r6, #1
 c102960:	91a09004 	movls	r9, r4
 c102964:	81a06009 	movhi	r6, r9
 c102968:	eaffffe4 	b	c102900 <__divdi3+0x110>
 c10296c:	e3520000 	cmp	r2, #0
 c102970:	1a000003 	bne	c102984 <__divdi3+0x194>
 c102974:	e3a00001 	mov	r0, #1
 c102978:	e1a01002 	mov	r1, r2
 c10297c:	ebffff26 	bl	c10261c <__aeabi_uidiv>
 c102980:	e1a04000 	mov	r4, r0
 c102984:	e1a00004 	mov	r0, r4
 c102988:	eb0001cf 	bl	c1030cc <__clzsi2>
 c10298c:	e2503000 	subs	r3, r0, #0
 c102990:	1a000035 	bne	c102a6c <__divdi3+0x27c>
 c102994:	e3a01001 	mov	r1, #1
 c102998:	e1a09804 	lsl	r9, r4, #16
 c10299c:	e58d1008 	str	r1, [sp, #8]
 c1029a0:	e0646006 	rsb	r6, r4, r6
 c1029a4:	e1a08824 	lsr	r8, r4, #16
 c1029a8:	e1a09829 	lsr	r9, r9, #16
 c1029ac:	e1a01008 	mov	r1, r8
 c1029b0:	e1a00006 	mov	r0, r6
 c1029b4:	ebffff18 	bl	c10261c <__aeabi_uidiv>
 c1029b8:	e1a01008 	mov	r1, r8
 c1029bc:	e1a0a000 	mov	sl, r0
 c1029c0:	e1a00006 	mov	r0, r6
 c1029c4:	ebffff51 	bl	c102710 <__aeabi_uidivmod>
 c1029c8:	e0030a99 	mul	r3, r9, sl
 c1029cc:	e1a0c825 	lsr	ip, r5, #16
 c1029d0:	e18cb801 	orr	fp, ip, r1, lsl #16
 c1029d4:	e153000b 	cmp	r3, fp
 c1029d8:	9a000005 	bls	c1029f4 <__divdi3+0x204>
 c1029dc:	e09bb004 	adds	fp, fp, r4
 c1029e0:	e24aa001 	sub	sl, sl, #1
 c1029e4:	2a000002 	bcs	c1029f4 <__divdi3+0x204>
 c1029e8:	e153000b 	cmp	r3, fp
 c1029ec:	824aa001 	subhi	sl, sl, #1
 c1029f0:	808bb004 	addhi	fp, fp, r4
 c1029f4:	e063b00b 	rsb	fp, r3, fp
 c1029f8:	e1a01008 	mov	r1, r8
 c1029fc:	e1a0000b 	mov	r0, fp
 c102a00:	ebffff05 	bl	c10261c <__aeabi_uidiv>
 c102a04:	e1a01008 	mov	r1, r8
 c102a08:	e1a06000 	mov	r6, r0
 c102a0c:	e1a0000b 	mov	r0, fp
 c102a10:	ebffff3e 	bl	c102710 <__aeabi_uidivmod>
 c102a14:	e0090996 	mul	r9, r6, r9
 c102a18:	e1a00805 	lsl	r0, r5, #16
 c102a1c:	e1a05820 	lsr	r5, r0, #16
 c102a20:	e1855801 	orr	r5, r5, r1, lsl #16
 c102a24:	e1590005 	cmp	r9, r5
 c102a28:	9a000004 	bls	c102a40 <__divdi3+0x250>
 c102a2c:	e0955004 	adds	r5, r5, r4
 c102a30:	e2466001 	sub	r6, r6, #1
 c102a34:	2a000001 	bcs	c102a40 <__divdi3+0x250>
 c102a38:	e1590005 	cmp	r9, r5
 c102a3c:	82466001 	subhi	r6, r6, #1
 c102a40:	e186680a 	orr	r6, r6, sl, lsl #16
 c102a44:	e59d9008 	ldr	r9, [sp, #8]
 c102a48:	eaffffac 	b	c102900 <__divdi3+0x110>
 c102a4c:	e1e07007 	mvn	r7, r7
 c102a50:	e2722000 	rsbs	r2, r2, #0
 c102a54:	e2e33000 	rsc	r3, r3, #0
 c102a58:	eaffff6c 	b	c102810 <__divdi3+0x20>
 c102a5c:	e2700000 	rsbs	r0, r0, #0
 c102a60:	e2e11000 	rsc	r1, r1, #0
 c102a64:	e3e07000 	mvn	r7, #0
 c102a68:	eaffff66 	b	c102808 <__divdi3+0x18>
 c102a6c:	e2638020 	rsb	r8, r3, #32
 c102a70:	e1a0b835 	lsr	fp, r5, r8
 c102a74:	e1a04314 	lsl	r4, r4, r3
 c102a78:	e1a0a836 	lsr	sl, r6, r8
 c102a7c:	e18be316 	orr	lr, fp, r6, lsl r3
 c102a80:	e1a08824 	lsr	r8, r4, #16
 c102a84:	e1a0c804 	lsl	ip, r4, #16
 c102a88:	e1a01008 	mov	r1, r8
 c102a8c:	e1a0000a 	mov	r0, sl
 c102a90:	e1a0982c 	lsr	r9, ip, #16
 c102a94:	e1a05315 	lsl	r5, r5, r3
 c102a98:	e58de008 	str	lr, [sp, #8]
 c102a9c:	ebfffede 	bl	c10261c <__aeabi_uidiv>
 c102aa0:	e1a01008 	mov	r1, r8
 c102aa4:	e1a0b000 	mov	fp, r0
 c102aa8:	e1a0000a 	mov	r0, sl
 c102aac:	ebffff17 	bl	c102710 <__aeabi_uidivmod>
 c102ab0:	e0030b99 	mul	r3, r9, fp
 c102ab4:	e59d2008 	ldr	r2, [sp, #8]
 c102ab8:	e1a06822 	lsr	r6, r2, #16
 c102abc:	e1866801 	orr	r6, r6, r1, lsl #16
 c102ac0:	e1530006 	cmp	r3, r6
 c102ac4:	9a000002 	bls	c102ad4 <__divdi3+0x2e4>
 c102ac8:	e0966004 	adds	r6, r6, r4
 c102acc:	e24bb001 	sub	fp, fp, #1
 c102ad0:	3a00006c 	bcc	c102c88 <__divdi3+0x498>
 c102ad4:	e0636006 	rsb	r6, r3, r6
 c102ad8:	e1a01008 	mov	r1, r8
 c102adc:	e1a00006 	mov	r0, r6
 c102ae0:	ebfffecd 	bl	c10261c <__aeabi_uidiv>
 c102ae4:	e1a01008 	mov	r1, r8
 c102ae8:	e1a0a000 	mov	sl, r0
 c102aec:	e1a00006 	mov	r0, r6
 c102af0:	ebffff06 	bl	c102710 <__aeabi_uidivmod>
 c102af4:	e0030a99 	mul	r3, r9, sl
 c102af8:	e59d2008 	ldr	r2, [sp, #8]
 c102afc:	e1a06802 	lsl	r6, r2, #16
 c102b00:	e1a00826 	lsr	r0, r6, #16
 c102b04:	e1806801 	orr	r6, r0, r1, lsl #16
 c102b08:	e1530006 	cmp	r3, r6
 c102b0c:	9a000005 	bls	c102b28 <__divdi3+0x338>
 c102b10:	e0966004 	adds	r6, r6, r4
 c102b14:	e24aa001 	sub	sl, sl, #1
 c102b18:	2a000002 	bcs	c102b28 <__divdi3+0x338>
 c102b1c:	e1530006 	cmp	r3, r6
 c102b20:	824aa001 	subhi	sl, sl, #1
 c102b24:	80866004 	addhi	r6, r6, r4
 c102b28:	e0636006 	rsb	r6, r3, r6
 c102b2c:	e18a380b 	orr	r3, sl, fp, lsl #16
 c102b30:	e58d3008 	str	r3, [sp, #8]
 c102b34:	eaffff9c 	b	c1029ac <__divdi3+0x1bc>
 c102b38:	e2641020 	rsb	r1, r4, #32
 c102b3c:	e1a00139 	lsr	r0, r9, r1
 c102b40:	e1a0213b 	lsr	r2, fp, r1
 c102b44:	e180a41a 	orr	sl, r0, sl, lsl r4
 c102b48:	e1a06138 	lsr	r6, r8, r1
 c102b4c:	e1828418 	orr	r8, r2, r8, lsl r4
 c102b50:	e1a0380a 	lsl	r3, sl, #16
 c102b54:	e1a0b82a 	lsr	fp, sl, #16
 c102b58:	e1a0e823 	lsr	lr, r3, #16
 c102b5c:	e1a0100b 	mov	r1, fp
 c102b60:	e1a00006 	mov	r0, r6
 c102b64:	e58d8008 	str	r8, [sp, #8]
 c102b68:	e58de00c 	str	lr, [sp, #12]
 c102b6c:	ebfffeaa 	bl	c10261c <__aeabi_uidiv>
 c102b70:	e1a0100b 	mov	r1, fp
 c102b74:	e1a08000 	mov	r8, r0
 c102b78:	e1a00006 	mov	r0, r6
 c102b7c:	ebfffee3 	bl	c102710 <__aeabi_uidivmod>
 c102b80:	e59dc00c 	ldr	ip, [sp, #12]
 c102b84:	e002089c 	mul	r2, ip, r8
 c102b88:	e59d3008 	ldr	r3, [sp, #8]
 c102b8c:	e1a06823 	lsr	r6, r3, #16
 c102b90:	e1861801 	orr	r1, r6, r1, lsl #16
 c102b94:	e1520001 	cmp	r2, r1
 c102b98:	e1a03419 	lsl	r3, r9, r4
 c102b9c:	9a000002 	bls	c102bac <__divdi3+0x3bc>
 c102ba0:	e091100a 	adds	r1, r1, sl
 c102ba4:	e2488001 	sub	r8, r8, #1
 c102ba8:	3a000032 	bcc	c102c78 <__divdi3+0x488>
 c102bac:	e0629001 	rsb	r9, r2, r1
 c102bb0:	e1a00009 	mov	r0, r9
 c102bb4:	e1a0100b 	mov	r1, fp
 c102bb8:	e58d3004 	str	r3, [sp, #4]
 c102bbc:	ebfffe96 	bl	c10261c <__aeabi_uidiv>
 c102bc0:	e1a0100b 	mov	r1, fp
 c102bc4:	e1a06000 	mov	r6, r0
 c102bc8:	e1a00009 	mov	r0, r9
 c102bcc:	ebfffecf 	bl	c102710 <__aeabi_uidivmod>
 c102bd0:	e59d000c 	ldr	r0, [sp, #12]
 c102bd4:	e0020690 	mul	r2, r0, r6
 c102bd8:	e59d3008 	ldr	r3, [sp, #8]
 c102bdc:	e1a0c803 	lsl	ip, r3, #16
 c102be0:	e1a0982c 	lsr	r9, ip, #16
 c102be4:	e1890801 	orr	r0, r9, r1, lsl #16
 c102be8:	e1520000 	cmp	r2, r0
 c102bec:	e59d3004 	ldr	r3, [sp, #4]
 c102bf0:	9a000002 	bls	c102c00 <__divdi3+0x410>
 c102bf4:	e090000a 	adds	r0, r0, sl
 c102bf8:	e2466001 	sub	r6, r6, #1
 c102bfc:	3a000019 	bcc	c102c68 <__divdi3+0x478>
 c102c00:	e062e000 	rsb	lr, r2, r0
 c102c04:	e1866808 	orr	r6, r6, r8, lsl #16
 c102c08:	e1a02826 	lsr	r2, r6, #16
 c102c0c:	e1a01823 	lsr	r1, r3, #16
 c102c10:	e1c6c802 	bic	ip, r6, r2, lsl #16
 c102c14:	e1c39801 	bic	r9, r3, r1, lsl #16
 c102c18:	e003099c 	mul	r3, ip, r9
 c102c1c:	e0090992 	mul	r9, r2, r9
 c102c20:	e00c0c91 	mul	ip, r1, ip
 c102c24:	e0010192 	mul	r1, r2, r1
 c102c28:	e099c00c 	adds	ip, r9, ip
 c102c2c:	22811801 	addcs	r1, r1, #65536	; 0x10000
 c102c30:	e093380c 	adds	r3, r3, ip, lsl #16
 c102c34:	e0a1182c 	adc	r1, r1, ip, lsr #16
 c102c38:	e15e0001 	cmp	lr, r1
 c102c3c:	3a000006 	bcc	c102c5c <__divdi3+0x46c>
 c102c40:	13a02000 	movne	r2, #0
 c102c44:	03a02001 	moveq	r2, #1
 c102c48:	e1530415 	cmp	r3, r5, lsl r4
 c102c4c:	93a09000 	movls	r9, #0
 c102c50:	82029001 	andhi	r9, r2, #1
 c102c54:	e3590000 	cmp	r9, #0
 c102c58:	0affff28 	beq	c102900 <__divdi3+0x110>
 c102c5c:	e2466001 	sub	r6, r6, #1
 c102c60:	e3a09000 	mov	r9, #0
 c102c64:	eaffff25 	b	c102900 <__divdi3+0x110>
 c102c68:	e1520000 	cmp	r2, r0
 c102c6c:	82466001 	subhi	r6, r6, #1
 c102c70:	8080000a 	addhi	r0, r0, sl
 c102c74:	eaffffe1 	b	c102c00 <__divdi3+0x410>
 c102c78:	e1520001 	cmp	r2, r1
 c102c7c:	82488001 	subhi	r8, r8, #1
 c102c80:	8081100a 	addhi	r1, r1, sl
 c102c84:	eaffffc8 	b	c102bac <__divdi3+0x3bc>
 c102c88:	e1530006 	cmp	r3, r6
 c102c8c:	824bb001 	subhi	fp, fp, #1
 c102c90:	80866004 	addhi	r6, r6, r4
 c102c94:	eaffff8e 	b	c102ad4 <__divdi3+0x2e4>

0c102c98 <__udivdi3>:
 c102c98:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c102c9c:	e2538000 	subs	r8, r3, #0
 c102ca0:	e24dd00c 	sub	sp, sp, #12
 c102ca4:	e1a05000 	mov	r5, r0
 c102ca8:	e1a04001 	mov	r4, r1
 c102cac:	e1a06002 	mov	r6, r2
 c102cb0:	e1a0a002 	mov	sl, r2
 c102cb4:	e1a0b000 	mov	fp, r0
 c102cb8:	e1a07001 	mov	r7, r1
 c102cbc:	1a000037 	bne	c102da0 <__udivdi3+0x108>
 c102cc0:	e1520001 	cmp	r2, r1
 c102cc4:	9a000045 	bls	c102de0 <__udivdi3+0x148>
 c102cc8:	e1a00002 	mov	r0, r2
 c102ccc:	eb0000fe 	bl	c1030cc <__clzsi2>
 c102cd0:	e3500000 	cmp	r0, #0
 c102cd4:	12603020 	rsbne	r3, r0, #32
 c102cd8:	11a03335 	lsrne	r3, r5, r3
 c102cdc:	11a0a016 	lslne	sl, r6, r0
 c102ce0:	11837014 	orrne	r7, r3, r4, lsl r0
 c102ce4:	e1a0482a 	lsr	r4, sl, #16
 c102ce8:	11a0b015 	lslne	fp, r5, r0
 c102cec:	e1a01004 	mov	r1, r4
 c102cf0:	e1a00007 	mov	r0, r7
 c102cf4:	ebfffe48 	bl	c10261c <__aeabi_uidiv>
 c102cf8:	e1a01004 	mov	r1, r4
 c102cfc:	e1a08000 	mov	r8, r0
 c102d00:	e1a00007 	mov	r0, r7
 c102d04:	ebfffe81 	bl	c102710 <__aeabi_uidivmod>
 c102d08:	e1a0680a 	lsl	r6, sl, #16
 c102d0c:	e1a06826 	lsr	r6, r6, #16
 c102d10:	e0030896 	mul	r3, r6, r8
 c102d14:	e1a0782b 	lsr	r7, fp, #16
 c102d18:	e1877801 	orr	r7, r7, r1, lsl #16
 c102d1c:	e1530007 	cmp	r3, r7
 c102d20:	9a000005 	bls	c102d3c <__udivdi3+0xa4>
 c102d24:	e097700a 	adds	r7, r7, sl
 c102d28:	e2488001 	sub	r8, r8, #1
 c102d2c:	2a000002 	bcs	c102d3c <__udivdi3+0xa4>
 c102d30:	e1530007 	cmp	r3, r7
 c102d34:	82488001 	subhi	r8, r8, #1
 c102d38:	8087700a 	addhi	r7, r7, sl
 c102d3c:	e0637007 	rsb	r7, r3, r7
 c102d40:	e1a01004 	mov	r1, r4
 c102d44:	e1a00007 	mov	r0, r7
 c102d48:	ebfffe33 	bl	c10261c <__aeabi_uidiv>
 c102d4c:	e1a01004 	mov	r1, r4
 c102d50:	e1a05000 	mov	r5, r0
 c102d54:	e1a00007 	mov	r0, r7
 c102d58:	ebfffe6c 	bl	c102710 <__aeabi_uidivmod>
 c102d5c:	e0060695 	mul	r6, r5, r6
 c102d60:	e1a0080b 	lsl	r0, fp, #16
 c102d64:	e1a0b820 	lsr	fp, r0, #16
 c102d68:	e18bb801 	orr	fp, fp, r1, lsl #16
 c102d6c:	e156000b 	cmp	r6, fp
 c102d70:	9a000004 	bls	c102d88 <__udivdi3+0xf0>
 c102d74:	e09bb00a 	adds	fp, fp, sl
 c102d78:	e2455001 	sub	r5, r5, #1
 c102d7c:	2a000001 	bcs	c102d88 <__udivdi3+0xf0>
 c102d80:	e156000b 	cmp	r6, fp
 c102d84:	82455001 	subhi	r5, r5, #1
 c102d88:	e1858808 	orr	r8, r5, r8, lsl #16
 c102d8c:	e3a01000 	mov	r1, #0
 c102d90:	e1a00008 	mov	r0, r8
 c102d94:	e28dd00c 	add	sp, sp, #12
 c102d98:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c102d9c:	e12fff1e 	bx	lr
 c102da0:	e1580001 	cmp	r8, r1
 c102da4:	83a01000 	movhi	r1, #0
 c102da8:	81a08001 	movhi	r8, r1
 c102dac:	8afffff7 	bhi	c102d90 <__udivdi3+0xf8>
 c102db0:	e1a00008 	mov	r0, r8
 c102db4:	eb0000c4 	bl	c1030cc <__clzsi2>
 c102db8:	e2507000 	subs	r7, r0, #0
 c102dbc:	1a00003e 	bne	c102ebc <__udivdi3+0x224>
 c102dc0:	e1580004 	cmp	r8, r4
 c102dc4:	21560005 	cmpcs	r6, r5
 c102dc8:	83a01000 	movhi	r1, #0
 c102dcc:	93a01001 	movls	r1, #1
 c102dd0:	93a08001 	movls	r8, #1
 c102dd4:	91a01007 	movls	r1, r7
 c102dd8:	81a08001 	movhi	r8, r1
 c102ddc:	eaffffeb 	b	c102d90 <__udivdi3+0xf8>
 c102de0:	e3520000 	cmp	r2, #0
 c102de4:	1a000003 	bne	c102df8 <__udivdi3+0x160>
 c102de8:	e3a00001 	mov	r0, #1
 c102dec:	e1a01002 	mov	r1, r2
 c102df0:	ebfffe09 	bl	c10261c <__aeabi_uidiv>
 c102df4:	e1a0a000 	mov	sl, r0
 c102df8:	e1a0000a 	mov	r0, sl
 c102dfc:	eb0000b2 	bl	c1030cc <__clzsi2>
 c102e00:	e2503000 	subs	r3, r0, #0
 c102e04:	1a000075 	bne	c102fe0 <__udivdi3+0x348>
 c102e08:	e1a0180a 	lsl	r1, sl, #16
 c102e0c:	e06a4004 	rsb	r4, sl, r4
 c102e10:	e1a0982a 	lsr	r9, sl, #16
 c102e14:	e1a06821 	lsr	r6, r1, #16
 c102e18:	e3a07001 	mov	r7, #1
 c102e1c:	e1a01009 	mov	r1, r9
 c102e20:	e1a00004 	mov	r0, r4
 c102e24:	ebfffdfc 	bl	c10261c <__aeabi_uidiv>
 c102e28:	e1a01009 	mov	r1, r9
 c102e2c:	e1a05000 	mov	r5, r0
 c102e30:	e1a00004 	mov	r0, r4
 c102e34:	ebfffe35 	bl	c102710 <__aeabi_uidivmod>
 c102e38:	e0030596 	mul	r3, r6, r5
 c102e3c:	e1a0282b 	lsr	r2, fp, #16
 c102e40:	e1824801 	orr	r4, r2, r1, lsl #16
 c102e44:	e1530004 	cmp	r3, r4
 c102e48:	9a000005 	bls	c102e64 <__udivdi3+0x1cc>
 c102e4c:	e094400a 	adds	r4, r4, sl
 c102e50:	e2455001 	sub	r5, r5, #1
 c102e54:	2a000002 	bcs	c102e64 <__udivdi3+0x1cc>
 c102e58:	e1530004 	cmp	r3, r4
 c102e5c:	82455001 	subhi	r5, r5, #1
 c102e60:	8084400a 	addhi	r4, r4, sl
 c102e64:	e0634004 	rsb	r4, r3, r4
 c102e68:	e1a01009 	mov	r1, r9
 c102e6c:	e1a00004 	mov	r0, r4
 c102e70:	ebfffde9 	bl	c10261c <__aeabi_uidiv>
 c102e74:	e1a01009 	mov	r1, r9
 c102e78:	e1a08000 	mov	r8, r0
 c102e7c:	e1a00004 	mov	r0, r4
 c102e80:	ebfffe22 	bl	c102710 <__aeabi_uidivmod>
 c102e84:	e0060698 	mul	r6, r8, r6
 c102e88:	e1a0b80b 	lsl	fp, fp, #16
 c102e8c:	e1a0382b 	lsr	r3, fp, #16
 c102e90:	e183b801 	orr	fp, r3, r1, lsl #16
 c102e94:	e156000b 	cmp	r6, fp
 c102e98:	9a000004 	bls	c102eb0 <__udivdi3+0x218>
 c102e9c:	e09bb00a 	adds	fp, fp, sl
 c102ea0:	e2488001 	sub	r8, r8, #1
 c102ea4:	2a000001 	bcs	c102eb0 <__udivdi3+0x218>
 c102ea8:	e156000b 	cmp	r6, fp
 c102eac:	82488001 	subhi	r8, r8, #1
 c102eb0:	e1888805 	orr	r8, r8, r5, lsl #16
 c102eb4:	e1a01007 	mov	r1, r7
 c102eb8:	eaffffb4 	b	c102d90 <__udivdi3+0xf8>
 c102ebc:	e267a020 	rsb	sl, r7, #32
 c102ec0:	e1a01a36 	lsr	r1, r6, sl
 c102ec4:	e1a02a35 	lsr	r2, r5, sl
 c102ec8:	e1818718 	orr	r8, r1, r8, lsl r7
 c102ecc:	e1a0ba34 	lsr	fp, r4, sl
 c102ed0:	e1829714 	orr	r9, r2, r4, lsl r7
 c102ed4:	e1a0a828 	lsr	sl, r8, #16
 c102ed8:	e1a0e808 	lsl	lr, r8, #16
 c102edc:	e1a0100a 	mov	r1, sl
 c102ee0:	e1a0000b 	mov	r0, fp
 c102ee4:	e1a0482e 	lsr	r4, lr, #16
 c102ee8:	e58d9004 	str	r9, [sp, #4]
 c102eec:	ebfffdca 	bl	c10261c <__aeabi_uidiv>
 c102ef0:	e1a0100a 	mov	r1, sl
 c102ef4:	e1a09000 	mov	r9, r0
 c102ef8:	e1a0000b 	mov	r0, fp
 c102efc:	ebfffe03 	bl	c102710 <__aeabi_uidivmod>
 c102f00:	e0020994 	mul	r2, r4, r9
 c102f04:	e59d0004 	ldr	r0, [sp, #4]
 c102f08:	e1a0c820 	lsr	ip, r0, #16
 c102f0c:	e18cb801 	orr	fp, ip, r1, lsl #16
 c102f10:	e152000b 	cmp	r2, fp
 c102f14:	e1a03716 	lsl	r3, r6, r7
 c102f18:	9a000002 	bls	c102f28 <__udivdi3+0x290>
 c102f1c:	e09bb008 	adds	fp, fp, r8
 c102f20:	e2499001 	sub	r9, r9, #1
 c102f24:	3a000060 	bcc	c1030ac <__udivdi3+0x414>
 c102f28:	e062b00b 	rsb	fp, r2, fp
 c102f2c:	e1a0100a 	mov	r1, sl
 c102f30:	e1a0000b 	mov	r0, fp
 c102f34:	e58d3000 	str	r3, [sp]
 c102f38:	ebfffdb7 	bl	c10261c <__aeabi_uidiv>
 c102f3c:	e1a0100a 	mov	r1, sl
 c102f40:	e1a06000 	mov	r6, r0
 c102f44:	e1a0000b 	mov	r0, fp
 c102f48:	ebfffdf0 	bl	c102710 <__aeabi_uidivmod>
 c102f4c:	e0040496 	mul	r4, r6, r4
 c102f50:	e59d0004 	ldr	r0, [sp, #4]
 c102f54:	e1a0c800 	lsl	ip, r0, #16
 c102f58:	e1a0382c 	lsr	r3, ip, #16
 c102f5c:	e1832801 	orr	r2, r3, r1, lsl #16
 c102f60:	e1540002 	cmp	r4, r2
 c102f64:	e59d3000 	ldr	r3, [sp]
 c102f68:	9a000002 	bls	c102f78 <__udivdi3+0x2e0>
 c102f6c:	e0922008 	adds	r2, r2, r8
 c102f70:	e2466001 	sub	r6, r6, #1
 c102f74:	3a000048 	bcc	c10309c <__udivdi3+0x404>
 c102f78:	e0644002 	rsb	r4, r4, r2
 c102f7c:	e1868809 	orr	r8, r6, r9, lsl #16
 c102f80:	e1a02828 	lsr	r2, r8, #16
 c102f84:	e1a0e823 	lsr	lr, r3, #16
 c102f88:	e1c80802 	bic	r0, r8, r2, lsl #16
 c102f8c:	e1c3680e 	bic	r6, r3, lr, lsl #16
 c102f90:	e0030690 	mul	r3, r0, r6
 c102f94:	e0060692 	mul	r6, r2, r6
 c102f98:	e000009e 	mul	r0, lr, r0
 c102f9c:	e00e0e92 	mul	lr, r2, lr
 c102fa0:	e0960000 	adds	r0, r6, r0
 c102fa4:	228ee801 	addcs	lr, lr, #65536	; 0x10000
 c102fa8:	e0933800 	adds	r3, r3, r0, lsl #16
 c102fac:	e0aee820 	adc	lr, lr, r0, lsr #16
 c102fb0:	e154000e 	cmp	r4, lr
 c102fb4:	3a000006 	bcc	c102fd4 <__udivdi3+0x33c>
 c102fb8:	13a02000 	movne	r2, #0
 c102fbc:	03a02001 	moveq	r2, #1
 c102fc0:	e1530715 	cmp	r3, r5, lsl r7
 c102fc4:	93a01000 	movls	r1, #0
 c102fc8:	82021001 	andhi	r1, r2, #1
 c102fcc:	e3510000 	cmp	r1, #0
 c102fd0:	0affff6e 	beq	c102d90 <__udivdi3+0xf8>
 c102fd4:	e2488001 	sub	r8, r8, #1
 c102fd8:	e3a01000 	mov	r1, #0
 c102fdc:	eaffff6b 	b	c102d90 <__udivdi3+0xf8>
 c102fe0:	e2639020 	rsb	r9, r3, #32
 c102fe4:	e1a0a31a 	lsl	sl, sl, r3
 c102fe8:	e1a07934 	lsr	r7, r4, r9
 c102fec:	e1a08935 	lsr	r8, r5, r9
 c102ff0:	e1a0982a 	lsr	r9, sl, #16
 c102ff4:	e1a0280a 	lsl	r2, sl, #16
 c102ff8:	e1a01009 	mov	r1, r9
 c102ffc:	e1a00007 	mov	r0, r7
 c103000:	e1888314 	orr	r8, r8, r4, lsl r3
 c103004:	e1a0b315 	lsl	fp, r5, r3
 c103008:	e1a06822 	lsr	r6, r2, #16
 c10300c:	ebfffd82 	bl	c10261c <__aeabi_uidiv>
 c103010:	e1a01009 	mov	r1, r9
 c103014:	e1a05000 	mov	r5, r0
 c103018:	e1a00007 	mov	r0, r7
 c10301c:	ebfffdbb 	bl	c102710 <__aeabi_uidivmod>
 c103020:	e0030596 	mul	r3, r6, r5
 c103024:	e1a04828 	lsr	r4, r8, #16
 c103028:	e1844801 	orr	r4, r4, r1, lsl #16
 c10302c:	e1530004 	cmp	r3, r4
 c103030:	9a000002 	bls	c103040 <__udivdi3+0x3a8>
 c103034:	e094400a 	adds	r4, r4, sl
 c103038:	e2455001 	sub	r5, r5, #1
 c10303c:	3a00001e 	bcc	c1030bc <__udivdi3+0x424>
 c103040:	e0634004 	rsb	r4, r3, r4
 c103044:	e1a01009 	mov	r1, r9
 c103048:	e1a00004 	mov	r0, r4
 c10304c:	ebfffd72 	bl	c10261c <__aeabi_uidiv>
 c103050:	e1a01009 	mov	r1, r9
 c103054:	e1a07000 	mov	r7, r0
 c103058:	e1a00004 	mov	r0, r4
 c10305c:	ebfffdab 	bl	c102710 <__aeabi_uidivmod>
 c103060:	e0030796 	mul	r3, r6, r7
 c103064:	e1a00808 	lsl	r0, r8, #16
 c103068:	e1a0c820 	lsr	ip, r0, #16
 c10306c:	e18c4801 	orr	r4, ip, r1, lsl #16
 c103070:	e1530004 	cmp	r3, r4
 c103074:	9a000005 	bls	c103090 <__udivdi3+0x3f8>
 c103078:	e094400a 	adds	r4, r4, sl
 c10307c:	e2477001 	sub	r7, r7, #1
 c103080:	2a000002 	bcs	c103090 <__udivdi3+0x3f8>
 c103084:	e1530004 	cmp	r3, r4
 c103088:	82477001 	subhi	r7, r7, #1
 c10308c:	8084400a 	addhi	r4, r4, sl
 c103090:	e0634004 	rsb	r4, r3, r4
 c103094:	e1877805 	orr	r7, r7, r5, lsl #16
 c103098:	eaffff5f 	b	c102e1c <__udivdi3+0x184>
 c10309c:	e1540002 	cmp	r4, r2
 c1030a0:	82466001 	subhi	r6, r6, #1
 c1030a4:	80822008 	addhi	r2, r2, r8
 c1030a8:	eaffffb2 	b	c102f78 <__udivdi3+0x2e0>
 c1030ac:	e152000b 	cmp	r2, fp
 c1030b0:	82499001 	subhi	r9, r9, #1
 c1030b4:	808bb008 	addhi	fp, fp, r8
 c1030b8:	eaffff9a 	b	c102f28 <__udivdi3+0x290>
 c1030bc:	e1530004 	cmp	r3, r4
 c1030c0:	82455001 	subhi	r5, r5, #1
 c1030c4:	8084400a 	addhi	r4, r4, sl
 c1030c8:	eaffffdc 	b	c103040 <__udivdi3+0x3a8>

0c1030cc <__clzsi2>:
 c1030cc:	e3a0101c 	mov	r1, #28
 c1030d0:	e3500801 	cmp	r0, #65536	; 0x10000
 c1030d4:	21a00820 	lsrcs	r0, r0, #16
 c1030d8:	22411010 	subcs	r1, r1, #16
 c1030dc:	e3500c01 	cmp	r0, #256	; 0x100
 c1030e0:	21a00420 	lsrcs	r0, r0, #8
 c1030e4:	22411008 	subcs	r1, r1, #8
 c1030e8:	e3500010 	cmp	r0, #16
 c1030ec:	21a00220 	lsrcs	r0, r0, #4
 c1030f0:	22411004 	subcs	r1, r1, #4
 c1030f4:	e28f2008 	add	r2, pc, #8
 c1030f8:	e7d20000 	ldrb	r0, [r2, r0]
 c1030fc:	e0800001 	add	r0, r0, r1
 c103100:	e12fff1e 	bx	lr
 c103104:	02020304 	.word	0x02020304
 c103108:	01010101 	.word	0x01010101
	...
