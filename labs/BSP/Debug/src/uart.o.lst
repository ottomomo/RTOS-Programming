   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"uart.c"
  21              	.Ltext0:
  22              		.file 1 "../src/uart.c"
 1682              		.align	2
 1683              		.global	uart0_init
 1685              	uart0_init:
 1686              	.LFB0:
   1:../src/uart.c **** #include <s3c44b0x.h>
   2:../src/uart.c **** #include <uart.h>
   3:../src/uart.c **** 
   4:../src/uart.c **** void uart0_init(void) {
 1687              		.loc 1 4 0
 1688              		.cfi_startproc
 1689              		@ Function supports interworking.
 1690              		@ args = 0, pretend = 0, frame = 0
 1691              		@ frame_needed = 1, uses_anonymous_args = 0
 1692 0000 0DC0A0E1 		mov	ip, sp
 1693              	.LCFI0:
 1694              		.cfi_def_cfa_register 12
 1695 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1696 0008 04B04CE2 		sub	fp, ip, #4
 1697              		.cfi_offset 14, -8
 1698              		.cfi_offset 13, -12
 1699              		.cfi_offset 11, -16
 1700              	.LCFI1:
 1701              		.cfi_def_cfa 11, 4
   5:../src/uart.c **** 	UFCON0 = 0x1;
 1702              		.loc 1 5 0
 1703 000c 40309FE5 		ldr	r3, .L2
 1704 0010 0120A0E3 		mov	r2, #1
 1705 0014 002083E5 		str	r2, [r3, #0]
   6:../src/uart.c **** 	UMCON0 = 0x0;
 1706              		.loc 1 6 0
 1707 0018 38309FE5 		ldr	r3, .L2+4
 1708 001c 0020A0E3 		mov	r2, #0
 1709 0020 002083E5 		str	r2, [r3, #0]
   7:../src/uart.c **** 	ULCON0 = (0 << 6) | (0 << 3) | (0 << 2) | (3);
 1710              		.loc 1 7 0
 1711 0024 1D36A0E3 		mov	r3, #30408704
 1712 0028 0320A0E3 		mov	r2, #3
 1713 002c 002083E5 		str	r2, [r3, #0]
   8:../src/uart.c **** 	UBRDIV0 = 0x22;
 1714              		.loc 1 8 0
 1715 0030 24309FE5 		ldr	r3, .L2+8
 1716 0034 2220A0E3 		mov	r2, #34
 1717 0038 002083E5 		str	r2, [r3, #0]
   9:../src/uart.c **** 	UCON0 = 0x5;
 1718              		.loc 1 9 0
 1719 003c 1C309FE5 		ldr	r3, .L2+12
 1720 0040 0520A0E3 		mov	r2, #5
 1721 0044 002083E5 		str	r2, [r3, #0]
  10:../src/uart.c **** }
 1722              		.loc 1 10 0
 1723 0048 0CD04BE2 		sub	sp, fp, #12
 1724 004c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1725 0050 1EFF2FE1 		bx	lr
 1726              	.L3:
 1727              		.align	2
 1728              	.L2:
 1729 0054 0800D001 		.word	30408712
 1730 0058 0C00D001 		.word	30408716
 1731 005c 2800D001 		.word	30408744
 1732 0060 0400D001 		.word	30408708
 1733              		.cfi_endproc
 1734              	.LFE0:
 1736              		.align	2
 1737              		.global	uart0_putchar
 1739              	uart0_putchar:
 1740              	.LFB1:
  11:../src/uart.c **** 
  12:../src/uart.c **** //envia un caracter
  13:../src/uart.c **** void uart0_putchar(char ch) {
 1741              		.loc 1 13 0
 1742              		.cfi_startproc
 1743              		@ Function supports interworking.
 1744              		@ args = 0, pretend = 0, frame = 8
 1745              		@ frame_needed = 1, uses_anonymous_args = 0
 1746 0064 0DC0A0E1 		mov	ip, sp
 1747              	.LCFI2:
 1748              		.cfi_def_cfa_register 12
 1749 0068 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1750 006c 04B04CE2 		sub	fp, ip, #4
 1751              		.cfi_offset 14, -8
 1752              		.cfi_offset 13, -12
 1753              		.cfi_offset 11, -16
 1754              	.LCFI3:
 1755              		.cfi_def_cfa 11, 4
 1756 0070 08D04DE2 		sub	sp, sp, #8
 1757 0074 0030A0E1 		mov	r3, r0
 1758 0078 0D304BE5 		strb	r3, [fp, #-13]
  14:../src/uart.c **** 	//Esperar mientras UFSTAT0[9] == 1 si se usa FIFO
  15:../src/uart.c **** 	while (((UFSTAT0>>9) & 1) == 1)//espera mientras Rx FIFO no este llena
 1759              		.loc 1 15 0
 1760 007c 0000A0E1 		mov	r0, r0	@ nop
 1761              	.L5:
 1762              		.loc 1 15 0 is_stmt 0 discriminator 1
 1763 0080 2C309FE5 		ldr	r3, .L6
 1764 0084 003093E5 		ldr	r3, [r3, #0]
 1765 0088 A334A0E1 		mov	r3, r3, lsr #9
 1766 008c 013003E2 		and	r3, r3, #1
 1767 0090 FF3003E2 		and	r3, r3, #255
 1768 0094 000053E3 		cmp	r3, #0
 1769 0098 F8FFFF1A 		bne	.L5
  16:../src/uart.c **** 		;
  17:../src/uart.c **** 	UTXH0 = ch;
 1770              		.loc 1 17 0 is_stmt 1
 1771 009c 14309FE5 		ldr	r3, .L6+4
 1772 00a0 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 1773 00a4 002083E5 		str	r2, [r3, #0]
  18:../src/uart.c **** }
 1774              		.loc 1 18 0
 1775 00a8 0CD04BE2 		sub	sp, fp, #12
 1776 00ac 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1777 00b0 1EFF2FE1 		bx	lr
 1778              	.L7:
 1779              		.align	2
 1780              	.L6:
 1781 00b4 1800D001 		.word	30408728
 1782 00b8 2000D001 		.word	30408736
 1783              		.cfi_endproc
 1784              	.LFE1:
 1786              		.align	2
 1787              		.global	uart0_getchar
 1789              	uart0_getchar:
 1790              	.LFB2:
  19:../src/uart.c **** 
  20:../src/uart.c **** //Espera la recepción de un carácter y lo devuelve
  21:../src/uart.c **** char uart0_getchar(void) {
 1791              		.loc 1 21 0
 1792              		.cfi_startproc
 1793              		@ Function supports interworking.
 1794              		@ args = 0, pretend = 0, frame = 8
 1795              		@ frame_needed = 1, uses_anonymous_args = 0
 1796 00bc 0DC0A0E1 		mov	ip, sp
 1797              	.LCFI4:
 1798              		.cfi_def_cfa_register 12
 1799 00c0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1800 00c4 04B04CE2 		sub	fp, ip, #4
 1801              		.cfi_offset 14, -8
 1802              		.cfi_offset 13, -12
 1803              		.cfi_offset 11, -16
 1804              	.LCFI5:
 1805              		.cfi_def_cfa 11, 4
 1806 00c8 08D04DE2 		sub	sp, sp, #8
  22:../src/uart.c **** 
  23:../src/uart.c **** 	while ((UFSTAT0 & 0xF) == 0)//se espera mientras Rx FIFO este vacía
 1807              		.loc 1 23 0
 1808 00cc 0000A0E1 		mov	r0, r0	@ nop
 1809              	.L9:
 1810              		.loc 1 23 0 is_stmt 0 discriminator 1
 1811 00d0 2C309FE5 		ldr	r3, .L10
 1812 00d4 003093E5 		ldr	r3, [r3, #0]
 1813 00d8 0F3003E2 		and	r3, r3, #15
 1814 00dc 000053E3 		cmp	r3, #0
 1815 00e0 FAFFFF0A 		beq	.L9
  24:../src/uart.c **** 		;
  25:../src/uart.c **** 	char s = URXH0;
 1816              		.loc 1 25 0 is_stmt 1
 1817 00e4 1C309FE5 		ldr	r3, .L10+4
 1818 00e8 003093E5 		ldr	r3, [r3, #0]
 1819 00ec 0D304BE5 		strb	r3, [fp, #-13]
  26:../src/uart.c **** 	return s;
 1820              		.loc 1 26 0
 1821 00f0 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
  27:../src/uart.c **** }
 1822              		.loc 1 27 0
 1823 00f4 0300A0E1 		mov	r0, r3
 1824 00f8 0CD04BE2 		sub	sp, fp, #12
 1825 00fc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1826 0100 1EFF2FE1 		bx	lr
 1827              	.L11:
 1828              		.align	2
 1829              	.L10:
 1830 0104 1800D001 		.word	30408728
 1831 0108 2400D001 		.word	30408740
 1832              		.cfi_endproc
 1833              	.LFE2:
 1835              		.align	2
 1836              		.global	uart0_puts
 1838              	uart0_puts:
 1839              	.LFB3:
  28:../src/uart.c **** 
  29:../src/uart.c **** //envia una cadena de caracteres
  30:../src/uart.c **** void uart0_puts(char *s) {
 1840              		.loc 1 30 0
 1841              		.cfi_startproc
 1842              		@ Function supports interworking.
 1843              		@ args = 0, pretend = 0, frame = 8
 1844              		@ frame_needed = 1, uses_anonymous_args = 0
 1845 010c 0DC0A0E1 		mov	ip, sp
 1846              	.LCFI6:
 1847              		.cfi_def_cfa_register 12
 1848 0110 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1849 0114 04B04CE2 		sub	fp, ip, #4
 1850              		.cfi_offset 14, -8
 1851              		.cfi_offset 13, -12
 1852              		.cfi_offset 11, -16
 1853              	.LCFI7:
 1854              		.cfi_def_cfa 11, 4
 1855 0118 08D04DE2 		sub	sp, sp, #8
 1856 011c 10000BE5 		str	r0, [fp, #-16]
  31:../src/uart.c **** 	while ((*s) != '\0') {
 1857              		.loc 1 31 0
 1858 0120 060000EA 		b	.L13
 1859              	.L14:
  32:../src/uart.c **** 		uart0_putchar(*s);
 1860              		.loc 1 32 0
 1861 0124 10301BE5 		ldr	r3, [fp, #-16]
 1862 0128 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1863 012c 0300A0E1 		mov	r0, r3
 1864 0130 FEFFFFEB 		bl	uart0_putchar
  33:../src/uart.c **** 		s++;
 1865              		.loc 1 33 0
 1866 0134 10301BE5 		ldr	r3, [fp, #-16]
 1867 0138 013083E2 		add	r3, r3, #1
 1868 013c 10300BE5 		str	r3, [fp, #-16]
 1869              	.L13:
  31:../src/uart.c **** 	while ((*s) != '\0') {
 1870              		.loc 1 31 0 discriminator 1
 1871 0140 10301BE5 		ldr	r3, [fp, #-16]
 1872 0144 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1873 0148 000053E3 		cmp	r3, #0
 1874 014c F4FFFF1A 		bne	.L14
  34:../src/uart.c **** 	}
  35:../src/uart.c **** }
 1875              		.loc 1 35 0
 1876 0150 0CD04BE2 		sub	sp, fp, #12
 1877 0154 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1878 0158 1EFF2FE1 		bx	lr
 1879              		.cfi_endproc
 1880              	.LFE3:
 1882              		.align	2
 1883              		.global	uart0_putint
 1885              	uart0_putint:
 1886              	.LFB4:
  36:../src/uart.c **** 
  37:../src/uart.c **** /*Envía un entero con signo como una cadena de dígitos decimales*/
  38:../src/uart.c **** void uart0_putint(int32 i) {
 1887              		.loc 1 38 0
 1888              		.cfi_startproc
 1889              		@ Function supports interworking.
 1890              		@ args = 0, pretend = 0, frame = 32
 1891              		@ frame_needed = 1, uses_anonymous_args = 0
 1892 015c 0DC0A0E1 		mov	ip, sp
 1893              	.LCFI8:
 1894              		.cfi_def_cfa_register 12
 1895 0160 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1896 0164 04B04CE2 		sub	fp, ip, #4
 1897              		.cfi_offset 14, -8
 1898              		.cfi_offset 13, -12
 1899              		.cfi_offset 11, -16
 1900              	.LCFI9:
 1901              		.cfi_def_cfa 11, 4
 1902 0168 20D04DE2 		sub	sp, sp, #32
 1903 016c 28000BE5 		str	r0, [fp, #-40]
  39:../src/uart.c **** 	char buf[9 + 1 + 1];
  40:../src/uart.c **** 	char *p = buf + 9 + 1;
 1904              		.loc 1 40 0
 1905 0170 20304BE2 		sub	r3, fp, #32
 1906 0174 0A3083E2 		add	r3, r3, #10
 1907 0178 10300BE5 		str	r3, [fp, #-16]
  41:../src/uart.c **** 	char sig = '0';
 1908              		.loc 1 41 0
 1909 017c 3030A0E3 		mov	r3, #48
 1910 0180 11304BE5 		strb	r3, [fp, #-17]
  42:../src/uart.c **** 	int8 digito;
  43:../src/uart.c **** 
  44:../src/uart.c **** 	*p = '\0';
 1911              		.loc 1 44 0
 1912 0184 10301BE5 		ldr	r3, [fp, #-16]
 1913 0188 0020A0E3 		mov	r2, #0
 1914 018c 0020C3E5 		strb	r2, [r3, #0]
 1915              	.L17:
  45:../src/uart.c **** 
  46:../src/uart.c **** 	do {
  47:../src/uart.c **** 		if (i < 0) {
 1916              		.loc 1 47 0
 1917 0190 28301BE5 		ldr	r3, [fp, #-40]
 1918 0194 000053E3 		cmp	r3, #0
 1919 0198 040000AA 		bge	.L16
  48:../src/uart.c **** 			sig = '1';
 1920              		.loc 1 48 0
 1921 019c 3130A0E3 		mov	r3, #49
 1922 01a0 11304BE5 		strb	r3, [fp, #-17]
  49:../src/uart.c **** 			i *= -1;
 1923              		.loc 1 49 0
 1924 01a4 28301BE5 		ldr	r3, [fp, #-40]
 1925 01a8 003063E2 		rsb	r3, r3, #0
 1926 01ac 28300BE5 		str	r3, [fp, #-40]
 1927              	.L16:
  50:../src/uart.c **** 		}
  51:../src/uart.c **** 		digito = i % 10;
 1928              		.loc 1 51 0
 1929 01b0 28101BE5 		ldr	r1, [fp, #-40]
 1930 01b4 A8309FE5 		ldr	r3, .L19
 1931 01b8 9123C3E0 		smull	r2, r3, r1, r3
 1932 01bc 4321A0E1 		mov	r2, r3, asr #2
 1933 01c0 C13FA0E1 		mov	r3, r1, asr #31
 1934 01c4 022063E0 		rsb	r2, r3, r2
 1935 01c8 0230A0E1 		mov	r3, r2
 1936 01cc 0331A0E1 		mov	r3, r3, asl #2
 1937 01d0 023083E0 		add	r3, r3, r2
 1938 01d4 8330A0E1 		mov	r3, r3, asl #1
 1939 01d8 012063E0 		rsb	r2, r3, r1
 1940 01dc 0230A0E1 		mov	r3, r2
 1941 01e0 12304BE5 		strb	r3, [fp, #-18]
  52:../src/uart.c **** 		*--p = '0' + digito; //almacena digito
 1942              		.loc 1 52 0
 1943 01e4 10301BE5 		ldr	r3, [fp, #-16]
 1944 01e8 013043E2 		sub	r3, r3, #1
 1945 01ec 10300BE5 		str	r3, [fp, #-16]
 1946 01f0 12305BE5 		ldrb	r3, [fp, #-18]	@ zero_extendqisi2
 1947 01f4 303083E2 		add	r3, r3, #48
 1948 01f8 FF2003E2 		and	r2, r3, #255
 1949 01fc 10301BE5 		ldr	r3, [fp, #-16]
 1950 0200 0020C3E5 		strb	r2, [r3, #0]
  53:../src/uart.c **** 		i = i / 10;
 1951              		.loc 1 53 0
 1952 0204 28301BE5 		ldr	r3, [fp, #-40]
 1953 0208 54209FE5 		ldr	r2, .L19
 1954 020c 9312C2E0 		smull	r1, r2, r3, r2
 1955 0210 4221A0E1 		mov	r2, r2, asr #2
 1956 0214 C33FA0E1 		mov	r3, r3, asr #31
 1957 0218 023063E0 		rsb	r3, r3, r2
 1958 021c 28300BE5 		str	r3, [fp, #-40]
  54:../src/uart.c **** 	} while (i);
 1959              		.loc 1 54 0
 1960 0220 28301BE5 		ldr	r3, [fp, #-40]
 1961 0224 000053E3 		cmp	r3, #0
 1962 0228 D8FFFF1A 		bne	.L17
  55:../src/uart.c **** 	if (sig == '1') {
 1963              		.loc 1 55 0
 1964 022c 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 1965 0230 310053E3 		cmp	r3, #49
 1966 0234 0500001A 		bne	.L18
  56:../src/uart.c **** 		*--p = '-'; // pone signo
 1967              		.loc 1 56 0
 1968 0238 10301BE5 		ldr	r3, [fp, #-16]
 1969 023c 013043E2 		sub	r3, r3, #1
 1970 0240 10300BE5 		str	r3, [fp, #-16]
 1971 0244 10301BE5 		ldr	r3, [fp, #-16]
 1972 0248 2D20A0E3 		mov	r2, #45
 1973 024c 0020C3E5 		strb	r2, [r3, #0]
 1974              	.L18:
  57:../src/uart.c **** 	}
  58:../src/uart.c **** 	uart0_puts(p); // envia cadena
 1975              		.loc 1 58 0
 1976 0250 10001BE5 		ldr	r0, [fp, #-16]
 1977 0254 FEFFFFEB 		bl	uart0_puts
  59:../src/uart.c **** }
 1978              		.loc 1 59 0
 1979 0258 0CD04BE2 		sub	sp, fp, #12
 1980 025c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1981 0260 1EFF2FE1 		bx	lr
 1982              	.L20:
 1983              		.align	2
 1984              	.L19:
 1985 0264 67666666 		.word	1717986919
 1986              		.cfi_endproc
 1987              	.LFE4:
 1989              		.align	2
 1990              		.global	uart0_puthex
 1992              	uart0_puthex:
 1993              	.LFB5:
  60:../src/uart.c **** 
  61:../src/uart.c **** /*Envía un entero sin signo como una cadena de dígitos hexadecimales*/
  62:../src/uart.c **** void uart0_puthex(uint32 i) {
 1994              		.loc 1 62 0
 1995              		.cfi_startproc
 1996              		@ Function supports interworking.
 1997              		@ args = 0, pretend = 0, frame = 24
 1998              		@ frame_needed = 1, uses_anonymous_args = 0
 1999 0268 0DC0A0E1 		mov	ip, sp
 2000              	.LCFI10:
 2001              		.cfi_def_cfa_register 12
 2002 026c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2003 0270 04B04CE2 		sub	fp, ip, #4
 2004              		.cfi_offset 14, -8
 2005              		.cfi_offset 13, -12
 2006              		.cfi_offset 11, -16
 2007              	.LCFI11:
 2008              		.cfi_def_cfa 11, 4
 2009 0274 18D04DE2 		sub	sp, sp, #24
 2010 0278 20000BE5 		str	r0, [fp, #-32]
  63:../src/uart.c **** 	char buf[8 + 1];
  64:../src/uart.c **** 	char *p = buf + 8; //Los caracteres se	generan	comenzando	por	el	menos	significativo
 2011              		.loc 1 64 0
 2012 027c 1C304BE2 		sub	r3, fp, #28
 2013 0280 083083E2 		add	r3, r3, #8
 2014 0284 10300BE5 		str	r3, [fp, #-16]
  65:../src/uart.c **** 	uint8 c;
  66:../src/uart.c **** 
  67:../src/uart.c **** 	*p = '\0';  // fin de cadena
 2015              		.loc 1 67 0
 2016 0288 10301BE5 		ldr	r3, [fp, #-16]
 2017 028c 0020A0E3 		mov	r2, #0
 2018 0290 0020C3E5 		strb	r2, [r3, #0]
 2019              	.L24:
  68:../src/uart.c **** 
  69:../src/uart.c **** 	do {
  70:../src/uart.c **** 		c = i & 0xf;	// resto de division /16
 2020              		.loc 1 70 0
 2021 0294 20301BE5 		ldr	r3, [fp, #-32]
 2022 0298 FF3003E2 		and	r3, r3, #255
 2023 029c 0F3003E2 		and	r3, r3, #15
 2024 02a0 11304BE5 		strb	r3, [fp, #-17]
  71:../src/uart.c **** 		if (c < 10)
 2025              		.loc 1 71 0
 2026 02a4 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2027 02a8 090053E3 		cmp	r3, #9
 2028 02ac 0800008A 		bhi	.L22
  72:../src/uart.c **** 			*--p = '0' + c;	//almacena caracter
 2029              		.loc 1 72 0
 2030 02b0 10301BE5 		ldr	r3, [fp, #-16]
 2031 02b4 013043E2 		sub	r3, r3, #1
 2032 02b8 10300BE5 		str	r3, [fp, #-16]
 2033 02bc 11305BE5 		ldrb	r3, [fp, #-17]
 2034 02c0 303083E2 		add	r3, r3, #48
 2035 02c4 FF2003E2 		and	r2, r3, #255
 2036 02c8 10301BE5 		ldr	r3, [fp, #-16]
 2037 02cc 0020C3E5 		strb	r2, [r3, #0]
 2038 02d0 070000EA 		b	.L23
 2039              	.L22:
  73:../src/uart.c **** 		else
  74:../src/uart.c **** 			*--p = 'a' + c - 10;// alamacena caracter
 2040              		.loc 1 74 0
 2041 02d4 10301BE5 		ldr	r3, [fp, #-16]
 2042 02d8 013043E2 		sub	r3, r3, #1
 2043 02dc 10300BE5 		str	r3, [fp, #-16]
 2044 02e0 11305BE5 		ldrb	r3, [fp, #-17]
 2045 02e4 573083E2 		add	r3, r3, #87
 2046 02e8 FF2003E2 		and	r2, r3, #255
 2047 02ec 10301BE5 		ldr	r3, [fp, #-16]
 2048 02f0 0020C3E5 		strb	r2, [r3, #0]
 2049              	.L23:
  75:../src/uart.c **** 		i = i >> 4; // division por 16
 2050              		.loc 1 75 0
 2051 02f4 20301BE5 		ldr	r3, [fp, #-32]
 2052 02f8 2332A0E1 		mov	r3, r3, lsr #4
 2053 02fc 20300BE5 		str	r3, [fp, #-32]
  76:../src/uart.c **** 	} while (i);
 2054              		.loc 1 76 0
 2055 0300 20301BE5 		ldr	r3, [fp, #-32]
 2056 0304 000053E3 		cmp	r3, #0
 2057 0308 E1FFFF1A 		bne	.L24
  77:../src/uart.c **** 
  78:../src/uart.c **** 	uart0_puts(p); // envia cadena
 2058              		.loc 1 78 0
 2059 030c 10001BE5 		ldr	r0, [fp, #-16]
 2060 0310 FEFFFFEB 		bl	uart0_puts
  79:../src/uart.c **** }
 2061              		.loc 1 79 0
 2062 0314 0CD04BE2 		sub	sp, fp, #12
 2063 0318 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2064 031c 1EFF2FE1 		bx	lr
 2065              		.cfi_endproc
 2066              	.LFE5:
 2068              		.align	2
 2069              		.global	uart0_gets
 2071              	uart0_gets:
 2072              	.LFB6:
  80:../src/uart.c **** 
  81:../src/uart.c **** /*Espera la recepción de una cadena y la almacena.*/
  82:../src/uart.c **** void uart0_gets(char *s) {/*Los caracteres se reciben y almacenan de uno en uno hasta detectar el f
 2073              		.loc 1 82 0
 2074              		.cfi_startproc
 2075              		@ Function supports interworking.
 2076              		@ args = 0, pretend = 0, frame = 8
 2077              		@ frame_needed = 1, uses_anonymous_args = 0
 2078 0320 0DC0A0E1 		mov	ip, sp
 2079              	.LCFI12:
 2080              		.cfi_def_cfa_register 12
 2081 0324 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2082 0328 04B04CE2 		sub	fp, ip, #4
 2083              		.cfi_offset 14, -8
 2084              		.cfi_offset 13, -12
 2085              		.cfi_offset 11, -16
 2086              	.LCFI13:
 2087              		.cfi_def_cfa 11, 4
 2088 032c 08D04DE2 		sub	sp, sp, #8
 2089 0330 10000BE5 		str	r0, [fp, #-16]
 2090              	.L27:
  83:../src/uart.c ****  En su lugar se almacena el centinela fin de cadena ('\0')*/
  84:../src/uart.c **** 
  85:../src/uart.c **** 	do{
  86:../src/uart.c **** 		*s = uart0_getchar();
 2091              		.loc 1 86 0
 2092 0334 FEFFFFEB 		bl	uart0_getchar
 2093 0338 0030A0E1 		mov	r3, r0
 2094 033c 0320A0E1 		mov	r2, r3
 2095 0340 10301BE5 		ldr	r3, [fp, #-16]
 2096 0344 0020C3E5 		strb	r2, [r3, #0]
  87:../src/uart.c **** 		if((*s) != '\n')
 2097              		.loc 1 87 0
 2098 0348 10301BE5 		ldr	r3, [fp, #-16]
 2099 034c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2100 0350 0A0053E3 		cmp	r3, #10
 2101 0354 0200000A 		beq	.L26
  88:../src/uart.c **** 				s++;
 2102              		.loc 1 88 0
 2103 0358 10301BE5 		ldr	r3, [fp, #-16]
 2104 035c 013083E2 		add	r3, r3, #1
 2105 0360 10300BE5 		str	r3, [fp, #-16]
 2106              	.L26:
  89:../src/uart.c **** 	}
  90:../src/uart.c **** 	while ((*s) != '\n');
 2107              		.loc 1 90 0
 2108 0364 10301BE5 		ldr	r3, [fp, #-16]
 2109 0368 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2110 036c 0A0053E3 		cmp	r3, #10
 2111 0370 EFFFFF1A 		bne	.L27
  91:../src/uart.c **** 	*s = '\0';
 2112              		.loc 1 91 0
 2113 0374 10301BE5 		ldr	r3, [fp, #-16]
 2114 0378 0020A0E3 		mov	r2, #0
 2115 037c 0020C3E5 		strb	r2, [r3, #0]
  92:../src/uart.c **** }
 2116              		.loc 1 92 0
 2117 0380 0CD04BE2 		sub	sp, fp, #12
 2118 0384 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2119 0388 1EFF2FE1 		bx	lr
 2120              		.cfi_endproc
 2121              	.LFE6:
 2123              		.align	2
 2124              		.global	uart0_getint
 2126              	uart0_getint:
 2127              	.LFB7:
  93:../src/uart.c **** 
  94:../src/uart.c **** /*Espera la recepción de una cadena de dígitos decimales que interpreta como un entero con signo qu
  95:../src/uart.c **** int32 uart0_getint(void) {
 2128              		.loc 1 95 0
 2129              		.cfi_startproc
 2130              		@ Function supports interworking.
 2131              		@ args = 0, pretend = 0, frame = 24
 2132              		@ frame_needed = 1, uses_anonymous_args = 0
 2133 038c 0DC0A0E1 		mov	ip, sp
 2134              	.LCFI14:
 2135              		.cfi_def_cfa_register 12
 2136 0390 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2137 0394 04B04CE2 		sub	fp, ip, #4
 2138              		.cfi_offset 14, -8
 2139              		.cfi_offset 13, -12
 2140              		.cfi_offset 11, -16
 2141              	.LCFI15:
 2142              		.cfi_def_cfa 11, 4
 2143 0398 18D04DE2 		sub	sp, sp, #24
  96:../src/uart.c **** //	int32 numero=0;
  97:../src/uart.c **** //	int8 signo=1;
  98:../src/uart.c **** //	char c;
  99:../src/uart.c **** //	c = uart0_getchar();
 100:../src/uart.c **** //	if(c == '-'){ //si es negativo
 101:../src/uart.c **** //		signo=-1;
 102:../src/uart.c **** //	}else{
 103:../src/uart.c **** //		numero = numero*10 + ( c - '0');
 104:../src/uart.c **** //	}
 105:../src/uart.c **** //
 106:../src/uart.c **** //	c = uart0_getchar(); //cogemos digito
 107:../src/uart.c **** //	if (c != '\n') {
 108:../src/uart.c **** //		do {
 109:../src/uart.c **** //			numero = numero * 10 + (c - '0'); //acumulamos digitos
 110:../src/uart.c **** //			c = uart0_getchar();
 111:../src/uart.c **** //		} while (c != '\n');
 112:../src/uart.c **** //	}
 113:../src/uart.c **** //
 114:../src/uart.c **** //	return numero*signo;
 115:../src/uart.c **** 
 116:../src/uart.c **** 	char buf[10+1+1];
 117:../src/uart.c **** 	char *p=buf;
 2144              		.loc 1 117 0
 2145 039c 24304BE2 		sub	r3, fp, #36
 2146 03a0 10300BE5 		str	r3, [fp, #-16]
 118:../src/uart.c **** 	int32 numero=0;
 2147              		.loc 1 118 0
 2148 03a4 0030A0E3 		mov	r3, #0
 2149 03a8 14300BE5 		str	r3, [fp, #-20]
 119:../src/uart.c **** 	int8 signo=1;
 2150              		.loc 1 119 0
 2151 03ac 0130A0E3 		mov	r3, #1
 2152 03b0 15304BE5 		strb	r3, [fp, #-21]
 120:../src/uart.c **** 	uart0_gets(p);
 2153              		.loc 1 120 0
 2154 03b4 10001BE5 		ldr	r0, [fp, #-16]
 2155 03b8 FEFFFFEB 		bl	uart0_gets
 121:../src/uart.c **** 	if((*p)=='-'){
 2156              		.loc 1 121 0
 2157 03bc 10301BE5 		ldr	r3, [fp, #-16]
 2158 03c0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2159 03c4 2D0053E3 		cmp	r3, #45
 2160 03c8 1400001A 		bne	.L32
 122:../src/uart.c **** 		signo=-1;
 2161              		.loc 1 122 0
 2162 03cc 0030E0E3 		mvn	r3, #0
 2163 03d0 15304BE5 		strb	r3, [fp, #-21]
 123:../src/uart.c **** 		++p;
 2164              		.loc 1 123 0
 2165 03d4 10301BE5 		ldr	r3, [fp, #-16]
 2166 03d8 013083E2 		add	r3, r3, #1
 2167 03dc 10300BE5 		str	r3, [fp, #-16]
 124:../src/uart.c **** 	}
 125:../src/uart.c **** 	while((*p)!='\0'){
 2168              		.loc 1 125 0
 2169 03e0 0F0000EA 		b	.L30
 2170              	.L31:
 126:../src/uart.c **** 		numero = numero * 10 + ((*p) - '0'); //acumulamos digitos
 2171              		.loc 1 126 0
 2172 03e4 14201BE5 		ldr	r2, [fp, #-20]
 2173 03e8 0230A0E1 		mov	r3, r2
 2174 03ec 0331A0E1 		mov	r3, r3, asl #2
 2175 03f0 023083E0 		add	r3, r3, r2
 2176 03f4 8330A0E1 		mov	r3, r3, asl #1
 2177 03f8 0320A0E1 		mov	r2, r3
 2178 03fc 10301BE5 		ldr	r3, [fp, #-16]
 2179 0400 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2180 0404 303043E2 		sub	r3, r3, #48
 2181 0408 033082E0 		add	r3, r2, r3
 2182 040c 14300BE5 		str	r3, [fp, #-20]
 127:../src/uart.c **** 		++p;
 2183              		.loc 1 127 0
 2184 0410 10301BE5 		ldr	r3, [fp, #-16]
 2185 0414 013083E2 		add	r3, r3, #1
 2186 0418 10300BE5 		str	r3, [fp, #-16]
 2187 041c 000000EA 		b	.L30
 2188              	.L32:
 125:../src/uart.c **** 	while((*p)!='\0'){
 2189              		.loc 1 125 0
 2190 0420 0000A0E1 		mov	r0, r0	@ nop
 2191              	.L30:
 125:../src/uart.c **** 	while((*p)!='\0'){
 2192              		.loc 1 125 0 is_stmt 0 discriminator 1
 2193 0424 10301BE5 		ldr	r3, [fp, #-16]
 2194 0428 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2195 042c 000053E3 		cmp	r3, #0
 2196 0430 EBFFFF1A 		bne	.L31
 128:../src/uart.c **** 	}
 129:../src/uart.c **** 
 130:../src/uart.c **** 	return signo*numero;
 2197              		.loc 1 130 0 is_stmt 1
 2198 0434 D5315BE1 		ldrsb	r3, [fp, #-21]
 2199 0438 14201BE5 		ldr	r2, [fp, #-20]
 2200 043c 920303E0 		mul	r3, r2, r3
 131:../src/uart.c **** }
 2201              		.loc 1 131 0
 2202 0440 0300A0E1 		mov	r0, r3
 2203 0444 0CD04BE2 		sub	sp, fp, #12
 2204 0448 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2205 044c 1EFF2FE1 		bx	lr
 2206              		.cfi_endproc
 2207              	.LFE7:
 2209              		.align	2
 2210              		.global	uart0_gethex
 2212              	uart0_gethex:
 2213              	.LFB8:
 132:../src/uart.c **** 
 133:../src/uart.c **** /*Espera la recepción de una cadena de dígitos hexadecimales que interpreta como un entero sin sign
 134:../src/uart.c **** uint32 uart0_gethex(void) {
 2214              		.loc 1 134 0
 2215              		.cfi_startproc
 2216              		@ Function supports interworking.
 2217              		@ args = 0, pretend = 0, frame = 8
 2218              		@ frame_needed = 1, uses_anonymous_args = 0
 2219 0450 0DC0A0E1 		mov	ip, sp
 2220              	.LCFI16:
 2221              		.cfi_def_cfa_register 12
 2222 0454 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2223 0458 04B04CE2 		sub	fp, ip, #4
 2224              		.cfi_offset 14, -8
 2225              		.cfi_offset 13, -12
 2226              		.cfi_offset 11, -16
 2227              	.LCFI17:
 2228              		.cfi_def_cfa 11, 4
 2229 045c 08D04DE2 		sub	sp, sp, #8
 135:../src/uart.c **** 	uint32 numero = 0;
 2230              		.loc 1 135 0
 2231 0460 0030A0E3 		mov	r3, #0
 2232 0464 10300BE5 		str	r3, [fp, #-16]
 136:../src/uart.c **** 	char c ;
 137:../src/uart.c **** 	c = uart0_getchar(); //cogemos digito
 2233              		.loc 1 137 0
 2234 0468 FEFFFFEB 		bl	uart0_getchar
 2235 046c 0030A0E1 		mov	r3, r0
 2236 0470 11304BE5 		strb	r3, [fp, #-17]
 138:../src/uart.c **** 
 139:../src/uart.c **** 	if (c != '\n') {
 2237              		.loc 1 139 0
 2238 0474 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2239 0478 0A0053E3 		cmp	r3, #10
 2240 047c 2300000A 		beq	.L34
 2241              	.L38:
 140:../src/uart.c **** 		do {
 141:../src/uart.c **** 			if (c-'0' < 10) {
 2242              		.loc 1 141 0
 2243 0480 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2244 0484 303043E2 		sub	r3, r3, #48
 2245 0488 090053E3 		cmp	r3, #9
 2246 048c 060000CA 		bgt	.L35
 142:../src/uart.c **** 				numero = numero * 16 + (c - '0'); // acumulamos digitos entre [0:9]
 2247              		.loc 1 142 0
 2248 0490 10301BE5 		ldr	r3, [fp, #-16]
 2249 0494 0322A0E1 		mov	r2, r3, asl #4
 2250 0498 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2251 049c 033082E0 		add	r3, r2, r3
 2252 04a0 303043E2 		sub	r3, r3, #48
 2253 04a4 10300BE5 		str	r3, [fp, #-16]
 2254 04a8 120000EA 		b	.L36
 2255              	.L35:
 143:../src/uart.c **** 			}else if(c >= 'a' && c<= 'f'){
 2256              		.loc 1 143 0
 2257 04ac 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2258 04b0 600053E3 		cmp	r3, #96
 2259 04b4 0900009A 		bls	.L37
 2260              		.loc 1 143 0 is_stmt 0 discriminator 1
 2261 04b8 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2262 04bc 660053E3 		cmp	r3, #102
 2263 04c0 0600008A 		bhi	.L37
 144:../src/uart.c **** 				numero = numero * 16 + (c - 'a' + 10);
 2264              		.loc 1 144 0 is_stmt 1
 2265 04c4 10301BE5 		ldr	r3, [fp, #-16]
 2266 04c8 0322A0E1 		mov	r2, r3, asl #4
 2267 04cc 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2268 04d0 033082E0 		add	r3, r2, r3
 2269 04d4 573043E2 		sub	r3, r3, #87
 2270 04d8 10300BE5 		str	r3, [fp, #-16]
 2271 04dc 050000EA 		b	.L36
 2272              	.L37:
 145:../src/uart.c **** 			}
 146:../src/uart.c **** 			else {
 147:../src/uart.c **** 				numero = numero * 16 + (c - 'A' + 10); //// acumulamos digitos entre [A:F]
 2273              		.loc 1 147 0
 2274 04e0 10301BE5 		ldr	r3, [fp, #-16]
 2275 04e4 0322A0E1 		mov	r2, r3, asl #4
 2276 04e8 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2277 04ec 033082E0 		add	r3, r2, r3
 2278 04f0 373043E2 		sub	r3, r3, #55
 2279 04f4 10300BE5 		str	r3, [fp, #-16]
 2280              	.L36:
 148:../src/uart.c **** 			}
 149:../src/uart.c **** 			c = uart0_getchar();
 2281              		.loc 1 149 0
 2282 04f8 FEFFFFEB 		bl	uart0_getchar
 2283 04fc 0030A0E1 		mov	r3, r0
 2284 0500 11304BE5 		strb	r3, [fp, #-17]
 150:../src/uart.c **** 		} while (c != '\n');
 2285              		.loc 1 150 0
 2286 0504 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2287 0508 0A0053E3 		cmp	r3, #10
 2288 050c DBFFFF1A 		bne	.L38
 2289              	.L34:
 151:../src/uart.c **** 	}
 152:../src/uart.c **** 
 153:../src/uart.c **** 	return numero;
 2290              		.loc 1 153 0
 2291 0510 10301BE5 		ldr	r3, [fp, #-16]
 154:../src/uart.c **** }
 2292              		.loc 1 154 0
 2293 0514 0300A0E1 		mov	r0, r3
 2294 0518 0CD04BE2 		sub	sp, fp, #12
 2295 051c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2296 0520 1EFF2FE1 		bx	lr
 2297              		.cfi_endproc
 2298              	.LFE8:
 2300              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 uart.c
C:\Users\USUARI~1\AppData\Local\Temp\ccUuTZL7.s:1682   .text:00000000 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccUuTZL7.s:1685   .text:00000000 uart0_init
C:\Users\USUARI~1\AppData\Local\Temp\ccUuTZL7.s:1729   .text:00000054 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccUuTZL7.s:1736   .text:00000064 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccUuTZL7.s:1739   .text:00000064 uart0_putchar
C:\Users\USUARI~1\AppData\Local\Temp\ccUuTZL7.s:1781   .text:000000b4 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccUuTZL7.s:1786   .text:000000bc $a
C:\Users\USUARI~1\AppData\Local\Temp\ccUuTZL7.s:1789   .text:000000bc uart0_getchar
C:\Users\USUARI~1\AppData\Local\Temp\ccUuTZL7.s:1830   .text:00000104 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccUuTZL7.s:1835   .text:0000010c $a
C:\Users\USUARI~1\AppData\Local\Temp\ccUuTZL7.s:1838   .text:0000010c uart0_puts
C:\Users\USUARI~1\AppData\Local\Temp\ccUuTZL7.s:1885   .text:0000015c uart0_putint
C:\Users\USUARI~1\AppData\Local\Temp\ccUuTZL7.s:1985   .text:00000264 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccUuTZL7.s:1989   .text:00000268 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccUuTZL7.s:1992   .text:00000268 uart0_puthex
C:\Users\USUARI~1\AppData\Local\Temp\ccUuTZL7.s:2071   .text:00000320 uart0_gets
C:\Users\USUARI~1\AppData\Local\Temp\ccUuTZL7.s:2126   .text:0000038c uart0_getint
C:\Users\USUARI~1\AppData\Local\Temp\ccUuTZL7.s:2212   .text:00000450 uart0_gethex
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
